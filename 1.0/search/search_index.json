{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>SWE-agent lets your language model of choice (e.g. GPT-4o or Claude Sonnet 3.5) autonomously use tools to:</p> <ul> <li>fix issues in real GitHub repositories,</li> <li>perform tasks on the web,</li> <li>crack cybersecurity challenges, or</li> <li>any custom task.</li> </ul> <p>It does so by using configurable agent-computer interfaces (ACIs) to interact with isolated computer environments. SWE-agent uses SWE-ReX for sandboxed code execution.</p> <ul> <li> <p> Installation</p> <p>Installing SWE-agent.</p> <p> Get started</p> </li> <li> <p> Hello world</p> <p>Solve a GitHub issue with SWE-agent.</p> <p> Hello world</p> </li> <li> <p> User guides</p> <p>Dive deeper into SWE-agent's features and goals.</p> <p> User guides</p> </li> <li> <p> Background &amp; goals</p> <p>Learn more about the project goals and academic research.</p> <p> Learn more</p> </li> </ul>"},{"location":"#news","title":"\ud83d\udce3 News","text":"<ul> <li>Feb 28: SWE-agent 1.0 + Claude 3.7 is SoTA on SWE-Bench full</li> <li>Feb 25: SWE-agent 1.0 + Claude 3.7 is SoTA on SWE-bench verified</li> <li>Feb 13: Releasing SWE-agent 1.0: SoTA on SWE-bench light &amp; tons of new features</li> <li>Dec 7: An interview with the SWE-agent &amp; SWE-bench team</li> </ul>"},{"location":"_footer/","title":"footer","text":"<ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>What models are supported?</p> <p>Probably all of them! There's even a few for testing. See models.</p> <p>What can I do if my model doesn't support function calling?</p> <p>You can configure how to parse the model's response by choosing your <code>agent.tools.parse_function</code>. The default now is <code>function_calling</code>, but you can change it to <code>thought_action</code>. More information in the reference. There are also some config example in our config folder.</p> <p>What's up with all the output files?</p> <p>You're probably most interested in the <code>*.traj</code> files, which contain complete records of SWE-agent's thought process and actions. See output files for more information.</p> <p>How can I change the demonstrations given to SWE-agent?</p> <p>At the start of each run, we feed the agent a demonstration trajectory, showing it how to solve an example issue. This substantially improves the agent's abilities to solve novel issues. If you'd like to modify or totally change this demonstration, to better fit your use case, see this.</p> <p>Does SWE-agent run on Windows/MacOS/Linux?</p> <p>Yes! Your only limitation might be the availability of the docker containers for your environments. But you can always execute SWE-agent in the cloud.</p> <p>I got a very long error message about various configuration options not working. What's up?</p> <p>This is probably because of union types. See this section for more information, but the short version is that some options (e.g., the repository or problem statement) can be specified in multiple ways, so we try every option until we find the one that works based on your inputs. If none of them work, we throw an error which then tells you why we cannot initialize any of the types, so this will get somewhat long and confusing.</p> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"background/","title":"Project overview","text":"<p>This section of the documentation talks about the architecture and research goals of SWE-agent.</p>"},{"location":"background/#swe-agent","title":"SWE-agent","text":"<p>SWE-agent turns LMs (e.g. GPT-4) into software engineering agents that can fix issues in GitHub repositories.</p> <p>On SWE-bench, SWE-agent resolves 12.29% of issues, achieving the state-of-the-art performance on the full test set.</p> <p>We accomplish our results by designing simple LM-centric commands and feedback formats to make it easier for the LM to browse the repository, view, edit and execute code files. We call this an \ud83e\udd16 Agent-Computer Interface (ACI). Read more about the ACI here.</p> <p>SWE-agent is built and maintained by researchers from Princeton University.</p> <p>For a quick introduction, watch the following video:</p> <p>A longer lecture touching on the project's motivation, research findings, as well as providing a hands-on tutorial on how to install, use, and configure SWE-agent is provided here:</p> <p>For in-depth information, read our paper. If you found this work helpful, please consider using the following citation:</p> <pre><code>@inproceedings{yang2024sweagent,\n  title={{SWE}-agent: Agent-Computer Interfaces Enable Automated Software Engineering},\n  author={John Yang and Carlos E Jimenez and Alexander Wettig and Kilian Lieret and Shunyu Yao and Karthik R Narasimhan and Ofir Press},\n  booktitle={The Thirty-eighth Annual Conference on Neural Information Processing Systems},\n  year={2024},\n  url={https://arxiv.org/abs/2405.15793}\n}\n</code></pre>"},{"location":"background/#swe-agent-enigma","title":"SWE-agent EnIGMA","text":"<p>Compatibility</p> <p>SWE-agent EnIGMA is currently only available for SWE-agent v0.7.0.</p> <p>SWE-agent EnIGMA adds advanced offensive cybersecurity capabilities.</p> <p>On the NYU CTF benchmark, EnIGMA solves 13.5% of the capture the flag (CTF) challenges, achieving the state-of-the-art performance on the full test set of 200 challenges, surpassing previous agents by more than 3x (leaderboard).</p> <p>We accomplish our results by extending the \ud83e\udd16 ACIs concept first introduced in SWE-agent, to the cybersecurity domain. We establish the novel  Interactive Agent Tools (IATs) concept, which enables our agent to use interactive tools such as a debugger, in a multitasking way such that the agent still has access to the main shell while using the debugger.</p> <p>We also use a new Summarizer concept integrated into the agent to deal with long context. Read more about our different summarizers here.</p> <p>Specific demonstrations were built per each CTF category (cryptography, reverse-engineering, forensics, ...), to enhance the model ability to solve new tasks from the same category.</p> <p>EnIGMA is built and maintained by researchers from Tel-Aviv University, New York University and Princeton University.</p> <p>For a quick introduction, watch the following video:</p> <p>For all the details, read our paper. If you found this work helpful, please consider using the following citation:</p> <pre><code>@misc{abramovich2024enigmaenhancedinteractivegenerative,\n      title={EnIGMA: Enhanced Interactive Generative Model Agent for CTF Challenges},\n      author={Talor Abramovich and Meet Udeshi and Minghao Shao and Kilian Lieret and Haoran Xi and Kimberly Milner and Sofija Jancheska and John Yang and Carlos E. Jimenez and Farshad Khorrami and Prashanth Krishnamurthy and Brendan Dolan-Gavitt and Muhammad Shafique and Karthik Narasimhan and Ramesh Karri and Ofir Press},\n      year={2024},\n      eprint={2409.16165},\n      archivePrefix={arXiv},\n      primaryClass={cs.AI},\n      url={https://arxiv.org/abs/2409.16165},\n}\n</code></pre>"},{"location":"background/aci/","title":"Agent Computer Interface (ACI)","text":"<p>SWE-agent is built on the idea of an Agent-Computer Interface (ACI). An ACI is essentially an a set of tools and interaction format that allows an agent to interact with a computer-based environment, to perform tasks, such as software engineering. The SWE-agent repository is built to make it easy to invent new ACIs for agents to solve various tasks.</p> <p>Just like how typical language models requires good prompt engineering, good ACI design leads to much better results when using agents. As we show in the SWE-agent paper, a baseline agent without a well-tuned ACI does much worse than SWE-agent.</p> <p>SWE-agent contains features that we discovered to be immensely helpful during the agent-computer interface design process:</p> <ol> <li>We add a linter that runs when an edit command is issued, and do not let the edit command go through if the code isn't syntactically correct.</li> <li>We supply the agent with a special-built file viewer, instead of having it just <code>cat</code> files. We found that this file viewer works best when displaying just 100 lines in each turn. The file editor that we built has commands for scrolling up and down and for performing a search within the file.</li> <li>We supply the agent with a special-built full-directory string searching command. We found that it was important for this tool to succinctly list the matches- we simply list each file that had at least one match. Showing the model more context about each match proved to be too confusing for the model.</li> <li>When commands have an empty output we return a message saying \"Your command ran successfully and did not produce any output.\"</li> </ol> <p>Read our paper for more details here.</p>"},{"location":"background/architecture/","title":"Architecture","text":"<p>Out of date</p> <p>This page is a bit out of date for SWE-agent 1.0.0. We're working on it!</p> <p>This page walks you through the general architecture of the SWE-agent package. Want to just run it? Jump ahead to the installation or usage sections.</p> <p></p> <p>The central entry point to SWE-agent is the <code>run.py</code> script (1). It initializes the <code>SWEEnv</code> instance (2) that manages the environment. Upon initialization (and by default for every new instance), it starts a docker container together with a shell session (3). This shell session will be kept alive throughout the task. All installation commands and actions from the model will be executed therein.</p> <p><code>SWEEnv</code> then installs the dependencies of the repository to which the task instance belongs into a new conda environment (4).</p> <p>The second class that is initialized by <code>run.py</code> is the <code>Agent</code> class (5). It can be configured with a yaml file (see config). It's most important method is <code>forward()</code> which prompts the model and executes its action.</p> <p>To prompt the model, the history (all prompts to the model together with actions and outputs) need to be sent to the LM. In order to make the best use of the context window of the model, the history gets compressed by a <code>HistoryProcessor</code> (7). The model output (8) is then interpreted by the <code>Agent</code> class and executed in the Shell session via <code>SWEEnv</code>.</p> <p>The ACI elements are implemented as custom commands (9) that are available to the shell session.</p>"},{"location":"config/","title":"Configuration","text":"<p>This page contains details describing how to write your own configurations to control how agents can interact with the <code>SWEEnv</code> environment.</p> <p>A configuration is represented in one or more <code>.yaml</code> files, specified by the <code>--config</code> flag in the command line interface, allowing you to...</p> <ul> <li>Define the tools that agents may use to traverse + modify a codebase.</li> <li>Write prompts that are deterministically/conditionally shown to the agent over the course of a single trajectory.</li> <li>Use demonstrations to guide the agent's behavior.</li> <li>Change the model behavior of the agent.</li> <li>Control the input/output interface that sits between the agent and the environment</li> </ul> <p>Default config files</p> <p>Our default config files are in the <code>config/</code> directory.</p> <p>To use a config file, you can use the <code>--config</code> flag in the command line interface.</p> <pre><code>sweagent run --config config/your_config.yaml\nsweagent run-batch --config config/your_config.yaml\n</code></pre> <p>This is the current default configuration file which is loaded when no <code>--config</code> flag is provided:</p> <code>default_from_url.yaml</code> config/default_from_url.yaml<pre><code>agent:\n  templates:\n    system_template: |-\n      SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\n\n      The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time.\n      In addition to typical bash commands, you can also use specific commands to help you navigate and edit files.\n      To call a command, you need to invoke it with a function call/tool call.\n\n      Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.\n\n      For example, if you are looking at this file:\n\n      def fct():\n          print(\"Hello world\")\n\n      and you want to edit the file to read:\n\n      def fct():\n          print(\"Hello\")\n          print(\"world\")\n\n      you search string should be `Hello world` and your replace string should be `\"Hello\"\\n    print(\"world\")`\n      (note the extra spaces before the print statement!).\n\n      You could also get the same result by search for `    print(\"Hello world\")` and replace with `    print(\"Hello\")\\n    print(\"world\")`.\n\n      RESPONSE FORMAT:\n      Your shell prompt is formatted as follows:\n      (Open file: &lt;path&gt;)\n      (Current directory: &lt;cwd&gt;)\n      bash-$\n\n      First, you should _always_ include a general thought about what you're going to do next.\n      Then, for every response, you must include exactly _ONE_ tool call/function call.\n\n      Remember, you should always include a _SINGLE_ tool call/function call and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.\n      If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first tool call, and then after receiving a response you'll be able to issue the second .\n      Note that the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.\n    instance_template: |-\n      We're currently solving the following issue within our repository. Here's the issue text:\n      ISSUE:\n      {{problem_statement}}\n\n      INSTRUCTIONS:\n      Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.\n      Remember, YOU SHOULD ALWAYS INCLUDE EXACTLY ONE TOOL CALL/FUNCTION CALL PER RESPONSE.\n      When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\n      Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with the python command.\n\n      NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\n      IMPORTANT TIPS:\n      1. Always start by trying to replicate the bug that the issues discusses.\n        If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n        Then start trying to fix it.\n        When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n\n        If the bug reproduction script does not print anything when it successfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at the end of the file,\n        so that you can be sure that the script indeed ran fine all the way through.\n\n      2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n      3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.\n\n      4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doesn't work, use the linux 'find' command.\n\n      5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current open file.\n\n      6. When editing files, it is easy to accidentally to write code with incorrect indentation or make other mistakes. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n\n      7. It may be necessary to install the repository from source before you can run code. Please think about how to install the environment from the repository directory if you need to do so.\n\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    next_step_template: |-\n      {{observation}}\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    next_step_no_output_template: |-\n      Your command ran successfully and did not produce any output.\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    demonstration_template: |\n      Here is a demonstration of how to correctly accomplish this task.\n      It is included to show you how to correctly use the interface.\n      You do not need to follow exactly what is done in the demonstration.\n      --- DEMONSTRATION ---\n      {{demonstration}}\n      --- END OF DEMONSTRATION ---\n    demonstrations:\n    - trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__function_calling_replace_from_source/marshmallow-code__marshmallow-1867.traj\n    put_demos_in_history: true\n  tools:\n    env_variables:\n      WINDOW: 100\n      OVERLAP: 2\n    bundles:\n      - path: tools/registry\n      - path: tools/defaults\n      - path: tools/search\n      - path: tools/edit_replace\n      - path: tools/submit\n    enable_bash_tool: true\n    parse_function:\n      type: function_calling\n  history_processors:\n    - type: last_n_observations\n      n: 5\n</code></pre> <p>Relative paths</p> <p>Relative paths in config files are resolved to the <code>SWE_AGENT_CONFIG_ROOT</code> environment variable (if set) or the SWE-agent repository root.</p>"},{"location":"config/config/","title":"Configuration","text":"<p>This page contains details describing how to write your own configurations to control how agents can interact with the <code>SWEEnv</code> environment.</p> <p>A configuration is represented in one or more <code>.yaml</code> files, specified by the <code>--config</code> flag in the command line interface, allowing you to...</p> <ul> <li>Define the tools that agents may use to traverse + modify a codebase.</li> <li>Write prompts that are deterministically/conditionally shown to the agent over the course of a single trajectory.</li> <li>Use demonstrations to guide the agent's behavior.</li> <li>Change the model behavior of the agent.</li> <li>Control the input/output interface that sits between the agent and the environment</li> </ul> <p>Default config files</p> <p>Our default config files are in the <code>config/</code> directory.</p> <p>To use a config file, you can use the <code>--config</code> flag in the command line interface.</p> <pre><code>sweagent run --config config/your_config.yaml\nsweagent run-batch --config config/your_config.yaml\n</code></pre> <p>This is the current default configuration file which is loaded when no <code>--config</code> flag is provided:</p> <code>default_from_url.yaml</code> config/default_from_url.yaml<pre><code>agent:\n  templates:\n    system_template: |-\n      SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\n\n      The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time.\n      In addition to typical bash commands, you can also use specific commands to help you navigate and edit files.\n      To call a command, you need to invoke it with a function call/tool call.\n\n      Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.\n\n      For example, if you are looking at this file:\n\n      def fct():\n          print(\"Hello world\")\n\n      and you want to edit the file to read:\n\n      def fct():\n          print(\"Hello\")\n          print(\"world\")\n\n      you search string should be `Hello world` and your replace string should be `\"Hello\"\\n    print(\"world\")`\n      (note the extra spaces before the print statement!).\n\n      You could also get the same result by search for `    print(\"Hello world\")` and replace with `    print(\"Hello\")\\n    print(\"world\")`.\n\n      RESPONSE FORMAT:\n      Your shell prompt is formatted as follows:\n      (Open file: &lt;path&gt;)\n      (Current directory: &lt;cwd&gt;)\n      bash-$\n\n      First, you should _always_ include a general thought about what you're going to do next.\n      Then, for every response, you must include exactly _ONE_ tool call/function call.\n\n      Remember, you should always include a _SINGLE_ tool call/function call and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.\n      If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first tool call, and then after receiving a response you'll be able to issue the second .\n      Note that the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.\n    instance_template: |-\n      We're currently solving the following issue within our repository. Here's the issue text:\n      ISSUE:\n      {{problem_statement}}\n\n      INSTRUCTIONS:\n      Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.\n      Remember, YOU SHOULD ALWAYS INCLUDE EXACTLY ONE TOOL CALL/FUNCTION CALL PER RESPONSE.\n      When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\n      Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with the python command.\n\n      NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\n      IMPORTANT TIPS:\n      1. Always start by trying to replicate the bug that the issues discusses.\n        If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n        Then start trying to fix it.\n        When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n\n        If the bug reproduction script does not print anything when it successfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at the end of the file,\n        so that you can be sure that the script indeed ran fine all the way through.\n\n      2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n      3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.\n\n      4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doesn't work, use the linux 'find' command.\n\n      5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current open file.\n\n      6. When editing files, it is easy to accidentally to write code with incorrect indentation or make other mistakes. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n\n      7. It may be necessary to install the repository from source before you can run code. Please think about how to install the environment from the repository directory if you need to do so.\n\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    next_step_template: |-\n      {{observation}}\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    next_step_no_output_template: |-\n      Your command ran successfully and did not produce any output.\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    demonstration_template: |\n      Here is a demonstration of how to correctly accomplish this task.\n      It is included to show you how to correctly use the interface.\n      You do not need to follow exactly what is done in the demonstration.\n      --- DEMONSTRATION ---\n      {{demonstration}}\n      --- END OF DEMONSTRATION ---\n    demonstrations:\n    - trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__function_calling_replace_from_source/marshmallow-code__marshmallow-1867.traj\n    put_demos_in_history: true\n  tools:\n    env_variables:\n      WINDOW: 100\n      OVERLAP: 2\n    bundles:\n      - path: tools/registry\n      - path: tools/defaults\n      - path: tools/search\n      - path: tools/edit_replace\n      - path: tools/submit\n    enable_bash_tool: true\n    parse_function:\n      type: function_calling\n  history_processors:\n    - type: last_n_observations\n      n: 5\n</code></pre> <p>Relative paths</p> <p>Relative paths in config files are resolved to the <code>SWE_AGENT_CONFIG_ROOT</code> environment variable (if set) or the SWE-agent repository root.</p>"},{"location":"config/demonstrations/","title":"Changing the demonstrations","text":"<p>Under construction</p> <p>We're in the process of updating this page to reflect SWE-agent 1.0.0.</p> <p>An important way to show LMs how to use commands and interact with the environment is through providing a demonstration - which is basically a completed trajectory that the LM can learn from.</p> <p>For simplicity we only ingest demonstrations in the from of a trajectory file. However, since trajectory files are usually JSON, you can convert them to yaml using the <code>sweagent traj-to-demo</code> command to be more human-readable and easier to edit.</p> <p>Demo (yaml) files are stored in the <code>demos/</code> directory by default and consist primarily of the sequence of actions that an LM would need to take to complete a task. It's important that your demo have the proper format to be parsed by SWE-agent and your config.</p>"},{"location":"config/demonstrations/#manually-creating-a-custom-trajectory","title":"Manually creating a custom trajectory","text":"<p>You can manually generate a trajectory by running the agent with <code>--agent.model.name=human_thought</code>. This lets you input, at each turn, the thought (ending with END_THOUGHT) and then the action (a single command).</p> <p>You should then convert that trajectory into a demonstration as shown below.</p> <p>To edit text in <code>human_thought</code> mode with the traditional line-based editor:</p> <ol> <li>Run the command <code>edit edit_start_line:edit_end_line</code></li> <li>Write the text you want to insert. Feel free to write the text across multiple lines.</li> <li>Press <code>return</code> then write <code>end_of_edit</code> and then press <code>return</code> again to submit the edit.</li> </ol> <p>If you would like to run <code>human_thought</code> mode without having to type in a thought at each turn (for debugging for example), use  <code>--agent.model.name=human</code>.</p>"},{"location":"config/demonstrations/#converting-an-existing-trajectory-into-a-demonstration","title":"Converting an existing trajectory into a demonstration","text":"<p>Here's how you can make a demo from an existing trajectory file (like the one created from the previous step):</p> <ol> <li>Find a basic trajectory that you already like and want to use as the basis for your demo.    For instance, consider the <code>.traj</code> files in the <code>trajectories/demonstrations/</code> folder    or find the trajectory from the previous step (the path will be printed at the bottom).</li> <li>Run <code>sweagent traj-to-demo --traj_path&lt;path to trajectory file.traj&gt;</code> to convert the trajectory to a demo.    This demo will be saved as a readable yaml file in the <code>demos/</code> directory.</li> <li>Edit the demo by hand to make it work for your particular use case and configuration.</li> <li>(Optional) Run <code>sweagent run-replay --traj_path &lt;path to demo&gt;</code> to execute the actions of the demo, have the system generate the execution output, and ensure that it works as expected.</li> <li>Inspect the resulting trajectory to ensure it was executed correctly.</li> <li>Specify the path to your demonstration in your config file</li> </ol> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"config/env/","title":"Environment variables","text":"<p>This page details all environment variables that are currently in use by SWE-agent.</p> <ul> <li>All API keys (for LMs and GitHub) can be set as an environment variable. See here for more information.</li> <li><code>SWE_AGENT_CONFIG_ROOT</code>: Used to resolve relative paths in the config</li> </ul> <p>The following three variables can only be set as environment variables, not in the config file</p> <ul> <li><code>SWE_AGENT_LOG_TIME</code>: Add timestamps to log</li> <li><code>SWE_AGENT_LOG_STREAM_LEVEL</code>: Level of logging that is shown on the command line interface (<code>TRACE</code> being a custom level below <code>DEBUG</code>). Will have no effect for <code>run-batch</code>.</li> </ul> <p>Persisting environment variables</p> <p>Most environment variables can also be added to <code>.env</code> instead.</p>"},{"location":"config/environments/","title":"Environments","text":"<p>SWE-agent runs on docker images (<code>python:3.11</code> by default). If you are running on SWE-Benmch, every instance has a docker image that we pull from dockerhub.</p> <p>Here's an example of a simple custom docker environment:</p> tiny.Dockerfile<pre><code>FROM python:3.11.10-bullseye  # (1)!\n\nARG DEBIAN_FRONTEND=noninteractive  # (2)!\nENV TZ=Etc/UTC\n\nWORKDIR /\n\n# Install swe-rex for faster startup\nRUN pip install pipx\nRUN pipx install swe-rex\nRUN pipx ensurepath\nENV PATH=\"$PATH:/root/.local/bin/\"\n\n# Install any extra dependencies\nRUN pip install flake8\n\nSHELL [\"/bin/bash\", \"-c\"]\n</code></pre> <ol> <li>This is the base image that we're starting from</li> <li>Important to disable any interactive prompts when installing things</li> </ol> <p>Build it with <code>docker build -f tiny.Dockerfile -t swe-agent-tiny</code>.</p> <p>Now you can run it in the agent with <code>sweagent run --env.image swe-agent-tiny ...</code></p>"},{"location":"config/models/","title":"Models","text":"<p>Required reading</p> <p>See the model section in the installation guide for a primer before reading the rest of this page.</p> <p>Related pages</p> <ul> <li>See the model config reference for the full list of model options</li> <li>To control how the agent extracts the actions from the model response, see the action parsers reference</li> </ul>"},{"location":"config/models/#notes-for-specific-models","title":"Notes for specific models","text":""},{"location":"config/models/#local-models","title":"Local models","text":"<p>See the model section in the installation guide. Remember to unset spending limits and configure the action parser if you cannot support function calling.</p>"},{"location":"config/models/#anthropic-claude","title":"Anthropic Claude","text":"<p>Prompt caching makes SWE-agent several times more affordable. While this is done automatically for models like <code>gpt-4o</code>, care has to be taken for Anthropic Claude, as you need to manually set the cache break points.</p> <p>For this, include the following history processor:</p> <pre><code>agent:\n  history_processors:\n  - type: cache_control\n    last_n_messages: 2\n</code></pre> <p>Other history processors</p> <p>Other history processors might interfere with the prompt caching if you are not careful. However, if your history processor is only modifying the last observation, you can combine as done here.</p> <p>Anthropic Claude gives you 4 cache break points per key. You need two of them for a single agent run (because the break points are both used to retrieve and set the cache). Therefore, you can only run two parallel instances of SWE-agent with <code>run-batch</code> per key. To support more parallel running instances, supply multiple keys as described below.</p> <p>We recommend that you check how often you hit the cache. A very simple way is to go to your trajectory directory and grep like so:</p> <pre><code>grep -o \"cached_tokens=[0-9]*\" django__django-11299.debug.log\n</code></pre>"},{"location":"config/models/#o1","title":"o1","text":"<p>Make sure to set</p> <pre><code>agent:\n    model:\n        top_p: null\n        temperature: 1.\n</code></pre> <p>as other values aren't supported by <code>o1</code>.</p>"},{"location":"config/models/#using-multiple-keys","title":"Using multiple keys","text":"<p>We support rotating through multiple keys for <code>run-batch</code>. For this, concatenate all keys with <code>:::</code> and set them via the <code>--agent.model.api_key</code> flag. Every thread (i.e., every parallel running agent that is working on one task instance) will stick to one key during the entire run, i.e., this does not break prompt caching.</p>"},{"location":"config/models/#models-for-testing","title":"Models for testing","text":"<p>We also provide models for testing SWE-agent without spending any credits</p> <ul> <li><code>HumanModel</code> and <code>HumanThoughtModel</code> will prompt for input from the user that stands in for the output of the LM. This can be used to create new demonstrations.</li> <li><code>ReplayModel</code> takes a trajectory as input and \"replays it\"</li> <li><code>InstantEmptySubmitTestModel</code> will create an empty <code>reproduce.py</code> and then submit</li> </ul> <p>% include-markdown \"../_footer.md\" %}</p>"},{"location":"config/templates/","title":"Templates","text":""},{"location":"config/templates/#configuring-templates","title":"Configuring templates","text":"<p>The following diagram illustrates where each template is shown within a single episode of solving one task instance.</p> <p></p> <p>One of three templates can be shown per turn:</p> <ul> <li>\"Next Step\" (<code>next_step_template</code>): Displayed if the model's action successfully runs. The output and a prompt for the next action is shown</li> <li>\"Next Step (No Output)\" (<code>next_step_no_output_template</code>): Displayed if the model's action successfully runs, but does not produce any standard output (e.g. <code>rm</code>, <code>cd</code>)</li> <li>\"Format Error\" (<code>format_error_template</code>): Displayed if the model's response is malformed. Over the next two turns...</li> <li>If one of the model's next response is correct, the message history is updated such that the \"Format Error\" turn is not kept. The episode continues.</li> <li>If the model's next two responses are both malformed, the episode terminates.</li> </ul> <p>All options</p> <p>See the template reference for all options.</p> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"config/tools/","title":"Configuring tools","text":"<p>Tools are one one of the ways to configure and extend the agent.</p> <p>Typically, there is</p> <ul> <li>The <code>bash</code> tool, allowing the agent to run shell commands (including invoking python scripts)</li> <li>Specific tools for the agent to inspect the code (file viewer, etc)</li> <li>Code editors (for example with search and replace or line range based methods)</li> </ul> <p>With SWE-agent, these tools are organized in tool bundles.</p> <p>Each tool bundle is a folder with the following structure:</p> <pre><code>bundle/\n\u251c\u2500\u2500 bin/\n\u2502   \u2514\u2500\u2500 &lt;tool executable&gt;\n\u2502   \u2514\u2500\u2500 &lt;state executable&gt;\n\u251c\u2500\u2500 config.yaml\n\u251c\u2500\u2500 install.sh\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>The <code>bin/</code> folder contains the actual tool implementation as executables.</p> <p>Here's an example of a tool bundle config:</p> <pre><code>tools:\n  filemap:\n    signature: \"filemap &lt;file_path&gt;\"\n    docstring: \"Print the contents of a Python file, skipping lengthy function and method definitions.\"\n    arguments:\n      - name: file_path\n        type: string\n        description: The path to the file to be read\n        required: true\n</code></pre> <p>Another important key is the <code>state</code> field. The <code>state</code> command is a special command that is executed after every action and returns a json string that we parse. The resulting dictionary can be used to format prompt templates. For example, for the classical SWE-agent tools, we extract the working directory and the currently open file like so:</p> tools/defaults/bin/_state<pre><code>#!/usr/bin/env python3\n\nimport json\nimport os\nfrom pathlib import Path\n\nfrom registry import registry  # type: ignore\n\n\ndef main():\n    current_file = registry.get(\"CURRENT_FILE\")\n    open_file = \"n/a\" if not current_file else str(Path(current_file).resolve())\n    state = {\"open_file\": open_file, \"working_dir\": os.getcwd()}\n\n    print(json.dumps(state))\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>TO use it, we set the following config key</p> <pre><code>tools:\n    ...\nstate_command: \"_state\"\n</code></pre> <p>To see the full specification of the state command, see the tool config documentation.</p>"},{"location":"dev/contribute/","title":"Contribute to SWE-agent","text":"<p>Formatting change</p> <p>We've recently added automated formatting to our code base. If you are dealing with merge-conflicts when opening a PR or updating your fork, please first install <code>pre-commit</code> and run <code>pre-commit run --all-files</code> and try again.</p> <p>The easiest way to contribute is to give us feedback.</p> <ul> <li>Something isn't working? Open a bug report.   Rule of thumb: If you're running something and you get some error messages, this is the issue type for you.</li> <li>You have a concrete question? Open a question issue.</li> <li>You are missing something? Open a feature request issue</li> <li>Open-ended discussion? Talk on discord. Note that all actionable items should be an issue though.</li> </ul> <p>Wanna do more and actually contribute code? Great! Please see the following sections for tips and guidelines!</p>"},{"location":"dev/contribute/#development-repository-set-up","title":"Development repository set-up","text":"<p>Please install the repository from source, following our usual instructions but add the <code>[dev]</code> option to the <code>pip</code> command (you can just run the command again):</p> <pre><code>pip install -e '.[dev]'\n</code></pre> <p>Then, make sure to set up <code>pre-commit</code>:</p> <pre><code># cd to our repo root\npre-commit install\n</code></pre> <p><code>pre-commit</code> will check for formatting and basic syntax errors before your commits.</p> <p>Autofixes</p> <p>Most problems (including formatting) will be automatically fixed. Therefore, if <code>pre-commit</code>/<code>git commit</code> fails on its first run, simply try running it a second time.</p> <p>Some more autofixes can be enabled with the <code>--unsafe-fixes</code> option from <code>ruff</code>:</p> <pre><code>pipx run ruff check --fix --unsafe-fixes\n</code></pre>"},{"location":"dev/contribute/#running-tests","title":"Running tests","text":"<p>We provide a lot of tests that can be very helpful for rapid development. Run them with</p> <pre><code>pytest\n</code></pre> <p>Some of the tests might be slower than others. You can exclude them with</p> <pre><code>pytest -m \"not slow\"\n</code></pre> <p>You can run all tests in parallel with <code>pytest-xdist</code>:</p> <pre><code>pytest -n auto\n</code></pre> <p>If you are using VSCode, you might want to add the following two files:</p> <code>.vscode/launch.json</code> <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Debug Tests\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"purpose\": [\"debug-test\"],\n            \"console\": \"integratedTerminal\",\n            \"env\": {\n                \"PYTEST_ADDOPTS\": \"--no-cov\"\n            },\n            \"justMyCode\": false\n        }\n    ]\n}\n</code></pre> <code>.vscode/settings.json</code> <pre><code>{\n    \"python.testing.pytestArgs\": [\n        \"sweagent\",\n        \"--cov=sweagent/\",\n        \"--cov-report=xml:cov.xml\",\n        \"-n\", \"auto\",\n        \"tests\"\n    ],\n    \"python.testing.unittestEnabled\": false,\n    \"python.testing.pytestEnabled\": true,\n    \"git.ignoreLimitWarning\": true\n}\n</code></pre>"},{"location":"dev/contribute/#debugging","title":"Debugging","text":"<p>We recommend to install <code>pdbpp</code> for some improved debugger features:</p> <pre><code>pip install pdbpp\n</code></pre> <p>Set breakpoints with <code>breakpoint()</code> and then run <code>sweagent</code> with <code>pdb</code>:</p> <pre><code>pdb -m sweagent &lt;command&gt; -- &lt;more command line arguments&gt; # (1)!\n</code></pre> <ol> <li>Note the <code>--</code> before the options passed to sweagent. This is to separate   options passed to <code>pdb</code> from those that are passed to <code>sweagent</code>.</li> </ol>"},{"location":"dev/contribute/#tips-for-pull-requests","title":"Tips for pull requests","text":"<ul> <li>If you see a lot of formatting-related merge conflicts, please see here.</li> <li>Please open separate PRs for separate issues. This makes it easier to incorporate part of your changes.</li> <li>It might be good to open an issue and discuss first before investing time on an experimental feature.</li> <li>Don't know where to get started? Look for issues marked \ud83d\udc4b good first issue or \ud83d\ude4f help wanted</li> <li>When changing the behavior of the agent, we need to have some indication that it actually improves the success rate of SWE-agent.   However, if you make the behavior optional without complicating SWE-agent (for example by providing new commands),   we might be less strict.</li> <li>Please add simple unit tests or integration tests wherever possible. Take a look in the tests directory   for inspiration. We emphasize simple easy-tow-rite tests that get a lot of coverage.</li> </ul>"},{"location":"dev/contribute/#building-the-documentation","title":"Building the documentation","text":"<p>Simply run</p> <pre><code># cd repo root\nmkdocs serve\n</code></pre> <p>and point your browser to port 8000 or click one of the links in the output.</p>"},{"location":"dev/contribute/#diving-into-the-code","title":"Diving into the code","text":"<ul> <li> <p> Code structure and reference</p> <p>Read the reference for more information on our code.</p> <p> Read more</p> </li> </ul> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"dev/formatting_conflicts/","title":"Formatting conflicts","text":"<p>On May 28th, 2024, we introduced automated formatting with <code>ruff-format</code> and <code>pre-commit</code>. This changed almost every file in the project. If you forked or branched off before these changes and now try to synchronize your fork/branch with <code>SWE-agent/SWE-agent:main</code>, you will see a lot of merge conflicts.</p> <p>To solve this, you need to apply the same formatting to your code. Here's how you can do it.</p> <p>First let's add the official remote (if it exists, you've probably already added it and you can ignore the warning).</p> <pre><code>git remote add upstream https://github.com/SWE-agent/SWE-agent.git\ngit fetch upstream\n</code></pre> <p>Now, you need the updated <code>pyproject.toml</code> and <code>.pre-commit-config.yaml</code> files. We can get them from <code>SWE-agent/SWE-agent:main</code>:</p> <pre><code>git checkout upstream/main -- .pre-commit-config.yaml pyproject.toml\ngit commit -m \"Update formatting instructions\" --no-verify\n</code></pre> <p>Let's assume that your changes are on branch <code>FEATURE_BRANCH</code>, for example, if you've committed to <code>main</code>:</p> <pre><code>export FEATURE_BRANCH=\"main\"\n</code></pre> <p>Next we create a copy of this branch (so we don't further modify it):</p> <pre><code>git branch \"${FEATURE_BRANCH}\" \"${FEATURE_BRANCH}_REBASED\"\n</code></pre> <p>And now comes the tricky bit: We rebase your changes on top of <code>upstream/mean</code>, while applying the formatting fixes at every step:</p> <pre><code>git rebase upstream/main \"${FEATURE_BRANCH}_REBASED\" \\\n  -Xtheirs \\\n  --exec 'git reset --soft HEAD^; pre-commit run; pipx run ruff check --fix --unsafe-fixes; git add -u; git commit -C HEAD@{1} --no-verify'\n</code></pre> <p>Understanding the last command</p> <p>Here's what is happening:</p> <ul> <li><code>git rebase upstream/main \"${FEATURE_BRANCH}_REBASED\"</code> applies every commit from <code>\"${FEATURE_BRANCH}_REBASED\"</code> on top of <code>upstream/main</code>.</li> <li><code>-Xtheirs</code> tells git to always take your changes for merge conflicts   (rather than the format changes).</li> <li>After every commit, the command from <code>--exec</code> is being called.<ul> <li><code>git reset --soft HEAD^</code> undos the <code>git commit</code> action (while leaving the   changes staged),</li> <li>then we apply the formatting, and</li> <li>finally we commit the   formatted changes again.</li> </ul> </li> </ul> <p>Still merge conflicts?</p> <p>It's possible that there are non-formatting-related merge conflicts that you are encountering. In this case, <code>git rebase</code> will stop every time it cannot resolve the conflict. Simply fix the merge conflicts as you would normally do (edit the file, commit once done), and then run <code>git rebase --continue</code>.</p> <p>You can now open a PR from <code>${FEATURE_BRANCH}_REBASED</code> or make it your new default branch.</p> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"installation/","title":"Setting up SWE-agent","text":"<ul> <li> <p> Install from source</p> <p>Install SWE-agent locally from source using <code>pip</code>. This is the default option.</p> <p> Get started</p> </li> <li> <p> All in browser</p> <p>Run SWE-agent using GitHub codespaces in an in-browser VSCode environment. Best for a quick first peek.</p> <p> Get started</p> </li> <li> <p> Coming soon: Run in docker</p> <p>Pull a docker container and directly run SWE-agent. This is our fallback solution if the local installation does not work for you.</p> <p> Coming soon</p> </li> <li> <p> Changelog</p> <p>See what's new in SWE-agent!</p> <p> Read the changelog</p> </li> </ul>"},{"location":"installation/changelog/","title":"Changelog","text":""},{"location":"installation/changelog/#swe-agent-101-2025-02-28","title":"SWE-agent 1.0.1 (2025-02-28)","text":"<p>This fixup release brings fixes mostly to the compatibility with local models. We have also significantly expanded the documentation in that aspect (models &amp; keys documentation).</p>"},{"location":"installation/changelog/#changed","title":"Changed","text":"<ul> <li>Change: Make anthropic_filemap the new default config by @klieret in #927</li> </ul>"},{"location":"installation/changelog/#added","title":"Added","text":"<ul> <li>Enh: Set timeout for post_startup_commands by @klieret in #973</li> <li>Enh: Allow to override max_input_tokens for local models by @klieret in #992</li> </ul>"},{"location":"installation/changelog/#fixes","title":"Fixes","text":"<ul> <li>Fix: Handling local models cost lookup issues by @klieret in #937</li> <li>Fix: Requires-python &gt;= 3.11 by @klieret in #940</li> <li>traj inspector viewport reset by @klieret in #946</li> <li>Fix: Reset viewport when next/prev step/traj by @klieret in #948</li> <li>Fix: Disable highlighting of model outputs by @klieret in #949</li> <li>Fix: Create PRs by @klieret in #954</li> <li>Fix: Add init,py to agent/hooks by @RNabel in #961</li> <li>Fix: Pin textual to version 1.0.0 by @RNabel in #960</li> <li>Fix: OpenAI API: Don't pass None tool_calls to the OpenAI API by @RNabel in #967</li> <li>Fix: Forces platform to be linux/amd64 for swe-bench batch runs by @carlosejimenez in #942</li> <li>Fix \"TypeError: Cannot read properties of null (reading 'replace')\" in Trajectory viewer by @0xba1a in #989</li> <li>Fix: No retries if costs cannot be calculated by @klieret in #990</li> <li>Fix: Race condition/size change during iteration by @klieret in #993</li> <li>Fix: Handle total cost limit exceeded by @klieret in #994</li> </ul>"},{"location":"installation/changelog/#new-contributors","title":"New Contributors","text":"<ul> <li>@RNabel made their first contribution in #961</li> <li>@dhruvji made their first contribution in #963</li> <li>@0xba1a made their first contribution in #989</li> </ul> <p>Full Changelog: https://github.com/SWE-agent/SWE-agent/compare/v1.0.0...v1.0.1</p>"},{"location":"installation/changelog/#100-2025-02-13","title":"1.0.0 (2025-02-13)","text":"<p>This is a massive release that includes many new features, fixes, and changes. You can read more about the changes in the migration guide.</p>"},{"location":"installation/changelog/#added_1","title":"Added","text":"<ul> <li>Fast, massively parallel code execution with SWE-ReX.</li> <li>Run SWE-agent locally but execute code in the cloud (using modal, AWS, or anything else that runs SWE-ReX).</li> <li>Configurable retry mechanisms: Try multiple agent configurations, models, parameters, etc., then choose the best one.</li> <li>Flexible tool definitions with tool bundles.</li> <li>All language models supported using <code>litellm</code> (see models).</li> <li>Override any configuration option from the command line (see command line basics).</li> <li>New command line trajectory inspector to scroll few hundreds of trajectories with ease.</li> <li>New command line interface with subcommands for running over single issues, batches, and various utility commands.</li> <li>Greatly simplified and cleaned up codebase. In particular, the <code>Agent</code> class is now much easier to modify.</li> </ul>"},{"location":"installation/changelog/#changed_1","title":"Changed","text":"<ul> <li>The code base has been largely rewritten. Lots of things have moved and changed.</li> <li>The biggest change is that we now use SWE-ReX for code execution. This allowed us to remove a lot of distracting code from the agent.</li> <li>We now use <code>pydantic</code> for all configuration.</li> <li>Templates are now <code>jinja2</code> templates, which gives you more flexibility (but you'll have to update your templates)</li> <li>All models are now configured using <code>litellm</code> (see models).</li> </ul> <p>See the migration guide for more details.</p>"},{"location":"installation/changelog/#new-contributors_1","title":"New contributors","text":"<ul> <li>@manya706 made their first contribution in #787</li> <li>@Prathamesh010 made their first contribution in #796</li> <li>@magnimusprime made their first contribution in #813</li> <li>@dependabot made their first contribution in #817</li> <li>@Mefisto04 made their first contribution in #824</li> <li>@acheshkov made their first contribution in #857</li> <li>@yu-iskw made their first contribution in #881</li> </ul>"},{"location":"installation/changelog/#070-2024-09-23","title":"0.7.0 (2024-09-23)","text":""},{"location":"installation/changelog/#added_2","title":"Added","text":"<p>The main new feature is the EnIGMA mode, which included additions like support for Interactive Agent Tools and Summarizers.</p> <ul> <li>Add filemap command in the spirit of repomap by @samuela in #619</li> <li>Create config to run human eval style challenges by @ofirpress in #658</li> <li>Add claude 3.5 sonnet to models by @carlosejimenez in #601</li> <li>Enh: Warn if scrolling &gt;= 3 times by @klieret in #626</li> <li>feat: support deepseek-coder LLM by @jcraftsman in #638</li> <li>Enh: Make timeout for agent commands configurable by @klieret in #674</li> <li>Add support for new gpt-4o-mini model by @ivan4722 in #693</li> <li>Groq Models Integration by @MohammedNagdy in #721</li> <li>Make log level configurable; add TRACE level by @klieret in #612</li> </ul>"},{"location":"installation/changelog/#fixes_1","title":"Fixes","text":"<ul> <li>Compatibility with SWE-bench 2.0 by @klieret in #671</li> <li>ensure variables work in special command docstring by @forresty in #628</li> <li>Important fix: Catch CostLimitExceeded in retry because of format/block by @klieret in #682</li> <li>Fix: Handle empty traj in should_skip by @klieret in #616</li> <li>Fix for end-marker communicate: Exit status always 0/invalid by @klieret in #644</li> <li>Fix: Insufficient quoting of git commit message by @klieret in #646</li> <li>Fix nonsensical trajectory formatting for PRs by @klieret in #647</li> <li>Fix: sweunexpected keyword 'python_version' by @klieret in #692</li> <li>Fix: Use LONG_TIMEOUT for pre_install commands by @klieret in #695</li> <li>Fix: UnboundLocalError when catching decoding issue by @klieret in #709</li> <li>Also create empty patch files for completeness by @klieret in #725</li> <li>Fix: Raise ContextWindowExceeded instead of exit_cost by @klieret in #727</li> <li>Fix: Deal with non-utf8 encoded bytes in comm by @klieret in #731</li> <li>Fix: Handle spaces in repo names by @klieret in #734</li> <li>Fix: Ensure utils is part of package by @klieret in #742</li> <li>Fix: Submitting ' ' in human mode crashes container by @klieret in #749</li> <li>Fix: Block su as command by @klieret in #752</li> <li>Fix: SWE_AGENT_MODEL_MAX_RETRIES needs casting by @klieret in #757</li> </ul>"},{"location":"installation/changelog/#new-contributors_2","title":"New Contributors","text":"<p>\ud83c\udf89 @talorabr, @udiboy1209, @haoranxi, @NickNameInvalid, @rollingcoconut joined the team to build EnIGMA \ud83c\udf89</p> <ul> <li>@samefarrar made their first contribution in #606</li> <li>@hubstrauss made their first contribution in #625</li> <li>@samuela made their first contribution in #619</li> <li>@forresty made their first contribution in #628</li> <li>@jcraftsman made their first contribution in #638</li> <li>@ivan4722 made their first contribution in #693</li> <li>@JoshuaPurtell made their first contribution in #703</li> <li>@MohammedNagdy made their first contribution in #721</li> <li>@pdemro made their first contribution in #729</li> </ul>"},{"location":"installation/changelog/#061-2024-06-20","title":"0.6.1 (2024-06-20)","text":"<p>All new commits</p> <p>This is (mostly) a patch release, in particular fixing several issues that had been introduced by the speed improvements of v0.6.0. We also solve a bug where existing linter errors in a file left SWE-agent unable to edit (because of our lint-retry-loop).</p>"},{"location":"installation/changelog/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Change: sparse clone method is now correctly called \"shallow\" by @klieret in #591</li> </ul>"},{"location":"installation/changelog/#improved","title":"Improved","text":"<ul> <li>Enh: Show commands when encountering timeout error by @klieret in #582</li> <li>Enh: Configuration option to show time in log by @klieret in #583</li> <li>Enh: Allow to configure LONG_TIMEOUT for SWEEnv by @klieret in #584</li> <li>Enh: Always write log to traj directory by @klieret in #588</li> </ul>"},{"location":"installation/changelog/#fixed","title":"Fixed","text":"<ul> <li>fix <code>docker.errors.NotFound</code> by @klieret in #587</li> <li>Fix: Revert to full clone method when needed by @klieret in #589</li> <li>Fix: Refresh container_obj before querying status by @klieret in #590</li> <li>Fixed #571 - show message that model arg is ignored in case of using Azure OpenAI by @jank in #592</li> <li>Fix: Linting blocks for existing lint errors by @klieret in #593</li> <li>Fix: Process done marker not found in read with timeout by @klieret in #596</li> </ul>"},{"location":"installation/changelog/#060-2024-06-05","title":"0.6.0 (2024-06-05)","text":"<p>All new commits</p> <p>We sped up SWE-agent by 2x (timed with GPT4o). This is mostly due to faster communication with the running processes inside of the Docker container and other container setup &amp; installation related improvements. Here are a few relevant PRs:</p> <ul> <li>Switch to fast communicate and shallow clone by default by @klieret in #530</li> <li>Change: Only wait 1s for docker to start by @klieret in #541</li> <li>Feat: experimental shallow cloning by @klieret in #498</li> <li>Enh: Start from clone of python conda environment for speedup by @klieret in #548</li> <li>Enh: Use uv for editable install by default by @klieret in #547</li> </ul>"},{"location":"installation/changelog/#improved_1","title":"Improved","text":"<ul> <li>Improve scrolling behavior in web UI by @anishfish2 in #420</li> <li>Web UI: Render Markdown in agent feed messages. by @kwight in #486</li> <li>Enh: Remove redundant 'saved traj to X' messages by @klieret in #528</li> <li>Allow to disable config dump to log by @klieret in #537</li> <li>Resolve relative paths to demonstrations and commands by @klieret in #444</li> </ul>"},{"location":"installation/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Web UI: Remove -n option to wait by @klieret in #487</li> <li>Web UI: Kill the Flask server on exit. by @kwight in #479</li> <li>Web UI: Avoid proxy errors on MacOS by @klieret in #506</li> <li>Ensure container_name is reset for non-persistent containers by @klieret in #463</li> <li>Fix: Do not allow persistent container with cache task imgs by @klieret in #551</li> </ul>"},{"location":"installation/changelog/#050-2024-05-28","title":"0.5.0 (2024-05-28)","text":"<p>All new commits</p> <p>\u2728 The big news is our brand new documentation \u2728</p> <p>Secondly, @ollmer added a new flag <code>--cache_task_images</code> that will significantly speed up SWE-agent when running on the same environment/repository multiple times (no more waiting for cloning and installation!)</p>"},{"location":"installation/changelog/#breaking-changes_1","title":"Breaking changes","text":"<ul> <li>We have reformatted our codebase. If you create a PR based on a previous commit, make sure you install our <code>pre-commit</code> hook to avoid merge-conflicts because of formatting. See our docs for more information.</li> <li>Remove direct imports in <code>__init__.py</code> (you can no longer <code>from sweagent import Agent</code> by @klieret in #436</li> </ul>"},{"location":"installation/changelog/#added_3","title":"Added","text":"<ul> <li>Running the web UI is now supported when running swe-agent completely in docker</li> <li>Speed up evaluation by caching task environments as docker images by @ollmer in #317</li> </ul>"},{"location":"installation/changelog/#improved_2","title":"Improved","text":"<ul> <li>Add gpt-4o model by @raymyers in #344</li> <li>Web: Allow to specify commit hash by @klieret in #358</li> <li>Add default environment_setup config by @klieret in #351</li> <li>Enh: Suppress openai logging; improve formatting of stats by @klieret in #416</li> <li>Remove signal dependency by @klieret in #428</li> <li>Do not use select if running on Windows by @klieret in #429</li> <li>Use custom Config class to support env and keys.cfg (this allows passing keys as environment variables) by @klieret in #430</li> </ul>"},{"location":"installation/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Web: Fix script_path input by @klieret in #334</li> <li>Fix: Don't print patch msg for exit_cost patch by @klieret in #343</li> <li>Fix: Do not request job control in bash by @klieret in #345</li> <li>Fix: --base_commit not used for gh urls by @klieret in #346</li> <li>Fix: Separate data path/traj dir cause exception by @klieret in #348</li> <li>Add docker-py lower bound by @klieret in #406</li> <li>Fix: IndexError when replaying incomplete trajectories by @klieret in #410</li> </ul>"},{"location":"installation/changelog/#040-2024-05-09","title":"0.4.0 (2024-05-09)","text":"<p>All new commits</p>"},{"location":"installation/changelog/#added_4","title":"Added","text":"<p>We\u2019re excited to launch the SWE-agent web UI! Specify a bug, press start and watch SWE-agent do the magic.</p>"},{"location":"installation/changelog/#030-2024-05-02","title":"0.3.0 (2024-05-02)","text":""},{"location":"installation/changelog/#added_5","title":"Added","text":"<ul> <li>Run SWE-agent in the cloud using GitHub Codespaces</li> <li>Add GPT4-turbo model by @zgrannan in #252</li> <li>feat: Amazon Bedrock support (Claude models) by @JGalego in #207</li> </ul>"},{"location":"installation/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Better error handling for --open_pr by @klieret in #239</li> <li>Fixed a potential error by @DanjieTang in #242</li> <li>fix: TARGETARCH not set on some OS/docker setups by @mspronesti in #249</li> <li>Pass Python version to get_environment_yml by @waterson in #271</li> <li>Fix Together model validation error by @mikanfactory in #236</li> <li>Doc: Avoid invalid github token by @klieret in #292</li> </ul>"},{"location":"installation/changelog/#020-2024-04-15","title":"0.2.0 (2024-04-15)","text":"<p>All new commits</p>"},{"location":"installation/changelog/#added_6","title":"Added","text":"<ul> <li>Allow to run on local repos (new flag: <code>--repo_path</code>) in #193</li> <li>Patch files are now saved separately to a patch directory in #126</li> <li>Allow to supply custom installation commands when running on gh issues or locally (<code>--environment_setup</code>) in #153</li> <li>Allow to specify openapi base url in <code>keys.cfg</code> in #118</li> </ul>"},{"location":"installation/changelog/#improved_3","title":"Improved","text":"<ul> <li>Improve error handling of docker issues in #165</li> <li>Make github token fully optional in #189</li> </ul>"},{"location":"installation/changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fix opening PR from fork in #229</li> <li>Fix: Choosing TogetherAI models in #130</li> </ul>"},{"location":"installation/codespaces/","title":"Running SWE-agent in your browser","text":"<p>Running SWE-agent in your browser is the easiest way to try out our project.</p> <ol> <li>Click </li> <li>Add your language modelAPI keys to <code>.env</code> (find the file in the left sidebar and fill out the template). More information on the keys here.</li> <li>Make sure to wait until the <code>postCreateCommand</code> in the terminal window at the bottom is finished</li> <li>Enter your SWE-agent command, see, see  using the command line.</li> </ol>"},{"location":"installation/codespaces/#running-the-web-ui","title":"Running the Web UI","text":"<p>Web UI</p> <p>We're currently working on updating the web UI to be compatible with the latest version of SWE-agent. Please use the using the command line until this is fixed.</p> <p>Go to the terminal and enter</p> <pre><code>./start_web_ui.sh\n</code></pre> <p>After a while, you should see a popup offering you to forward port <code>3000</code>. Click <code>Open in Browser</code>.</p> <p></p> <p>If you instead only see the offer to forward port <code>8000</code>, do not click it (this is the port that's being used by the backend).</p> <p>Instead, click on the <code>Ports</code> tab, and click on the globe next to port <code>3000</code>:</p> <p></p> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"installation/keys/","title":"Models and API keys","text":"<p>Setting up models</p> <p>This page shows how you can set up your LM with SWE-agent</p> <ul> <li>Generally all API models work out of the box by just adding the key and specifying <code>--agent.model.name</code></li> <li>More care must be taken for local models (see tips below!)</li> </ul>"},{"location":"installation/keys/#setting-api-keys","title":"Setting API keys","text":"<p>In order to access the LM of your choice (and to access private GitHub repositories), you need to supply the corresponding keys.</p> <p>There are two options to do this:</p> <ol> <li>Set the corresponding environment variables.</li> <li>Create a <code>.env</code> file at the root of this repository. All of the variables defined there will take the place of environment variables.</li> <li>Use <code>--agent.model.api_key</code> to set the key</li> </ol> <p>Here's an example</p> <pre><code># Remove the comment '#' in front of the line for all keys that you have set\n# GITHUB_TOKEN='GitHub Token for access to private repos'\n# OPENAI_API_KEY='OpenAI API Key Here if using OpenAI Model'\n# ANTHROPIC_API_KEY='Anthropic API Key Here if using Anthropic Model'\n# TOGETHER_API_KEY='Together API Key Here if using Together Model'\n</code></pre> <p>See the following links for tutorials on obtaining Anthropic, OpenAI, and Github tokens.</p> <p>Advanced settings</p> <p>See model config for more details on advanced settings.</p>"},{"location":"installation/keys/#supported-api-models","title":"Supported API models","text":"<p>We support all models supported by litellm, see their list here.</p> <p>Here are a few options for <code>--agent.model.name</code>:</p> Model API key Comment <code>claude-3-5-sonnet-20241022</code> <code>ANTHROPIC_API_KEY</code> Our recommended model <code>gpt-4o</code> <code>OPENAI_API_KEY</code> <code>o1-preview</code> <code>OPENAI_API_KEY</code> You might need to set temperature and sampling to the supported values. <p>Function calling and more: Setting the correct parser</p> <p>The default config uses function calling to retrieve actions from the model response, i.e., the model directly provides the action as a JSON object. If your model doesn't support function calling, you can use the <code>thought_action</code> parser by setting <code>agent.tools.parse_function.type</code> to <code>thought_action</code>. Then, we extract the last triple-backticks block from the model response as the action. See our API docs for more details on parsers. Remember to document the tools in your prompt as the model will not be able to see the function signature like with function calling.</p> <p>Specific models</p> <p>See model config for more details on specific models.</p>"},{"location":"installation/keys/#using-local-models","title":"Using local models","text":"<p>We currently support all models that serve to an endpoint with an OpenAI-compatible API.</p> <p>For example, to use llama, you can follow the litellm instructions and set</p> config/your_config.yaml<pre><code>agent:\n  model:\n    name: ollama/llama2  # (1)!\n    api_base: http://localhost:11434\n    per_instance_cost_limit: 0   # (2)!\n    total_cost_limit: 0\n    per_instance_call_limit: 100\n    max_input_tokens: 0  # (3)!\n  tools:\n    # The default for obtaining actions from model outputs is function calling.\n    # If your local model does not support that, you can use the thought_action parser\n    # instead (see below)\n    parse_function:\n      type: \"thought_action\"\n  # You probably do not need the cache control history processor if you're not\n  # using Claude, so please remove it if it's in your config.\n  history_processors: []\n</code></pre> <ol> <li>Make sure that your model includes a \"provider\", i.e., follows the form <code>provider/model_name</code>. The model name and provider might be arbitrarily chosen.</li> <li>We cannot track costs, so you must disable this (see below)</li> <li>Disable max input tokens check</li> </ol> <p>in your config file. Note that you're always ingesting a config file: If you haven't specified it manually with <code>--config</code>, we're loading a default config, which might not what you want (in particular, it uses function calling and prompt caching)! If you're using a litellm proxy, make sure to set your <code>agent.model.name</code> to <code>openai/...</code> and set <code>agent.model.api_key</code> to the key you've configured for your proxy (or a random value; it cannot be empty).</p> <p>Model providers</p> <p>Make sure that your model name includes a \"provider\", i.e., follows the form <code>provider/model_name</code>. The model name and provider might be arbitrarily chosen for local models.</p> <p>Cost/token limits</p> <p>If you do not disable the default cost limits, you will see an error because the cost calculator will not be able to find the model in the <code>litellm</code> model cost dictionary. Please make sure to the set the <code>per_instance_cost_limit</code> to 0 and use the <code>per_instance_call_limit</code> instead to limit the runtime per issue. Please also make sure to set <code>max_input_tokens</code> to a non-<code>None</code> value to avoid a lot of warnings.</p> <p>Parsing functions</p> <p>The default config uses function calling to retrieve actions from the model response, i.e., the model directly provides the action as a JSON object. If your model doesn't support function calling, you can use the <code>thought_action</code> parser by setting <code>agent.tools.parse_function.type</code> to <code>thought_action</code>. Then, we extract the last triple-backticks block from the model response as the action. See our API docs for more details on parsers. Remember to document the tools in your prompt as the model will not be able to see the function signature like with function calling.</p> <p>Message types</p> <p>The <code>cache_control</code> history processor requires a different message format (e.g., <code>{'role': 'user', 'content': [{'type': 'text', 'text': 'some text', 'cache_control': {'type': 'ephemeral'}}]}]</code>). This might not be understood by all language models. Therefore, please remove this history processor if you do not need it (it's currently mostly used for anthropic cache control). See #957 for more information.</p>"},{"location":"installation/keys/#something-went-wrong","title":"Something went wrong?","text":"<ul> <li>If you get <code>Error code: 404</code>, please check your configured keys, in particular   whether you set <code>OPENAI_API_BASE_URL</code> correctly (if you're not using it, the   line should be deleted or commented out).   Also see this issue   for reference.</li> </ul>"},{"location":"installation/keys/#further-reads-debugging","title":"Further reads &amp; debugging","text":"<p>Further reads</p> <p>See our API docs for all available options. Our model config page has more details on specific models and tips and tricks.</p> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"installation/migration/","title":"SWE-agent 1.0.0 migration guide","text":"<p>Welcome to SWE-agent 1.0! So much new stuff! Here's a quick rundown of the cool new things you can do:</p> <ul> <li> Fast, massively parallel code execution with SWE-ReX.</li> <li> Run SWE-agent locally but execute code in the cloud (using modal, AWS, or anything else that runs SWE-ReX).</li> <li> Configurable retry mechanisms: Try multiple agent configurations, models, parameters, etc., then choose the best one.</li> <li> Flexible tool definitions with tool bundles.</li> <li> All language models supported using <code>litellm</code> (see models).</li> <li> Override any configuration option from the command line (see command line basics).</li> <li> New command line trajectory inspector to scroll few hundreds of trajectories with ease.</li> <li> New command line interface with subcommands for running over single issues, batches, and various utility commands.</li> <li> Greatly simplified and cleaned up codebase. In particular, the <code>Agent</code> class is now much easier to modify.</li> </ul> <p>If you're familiar with the old SWE-agent, here are the main changes you need to be aware of.</p> <p>SWE-agent 0.7</p> <p>The old SWE-agent before the major overhaul is still preserved on the <code>v0.7</code> branch. In particular, this is still the version to use for the SWE-agent EnIGMA configuration. You can also switch to the old documentation using the dropdown in the top menu bar.</p>"},{"location":"installation/migration/#command-line-interface-and-basic-configuration","title":"Command line interface and basic configuration","text":"<ul> <li>Instead of the <code>run.py</code> script, we now have a central <code>sweagent</code> entry point that you can call after installing the package.   This should be much more convenient!</li> <li>Instead of one <code>run.py</code> command, we now have several subcommands: <code>sweagent run</code> to run over single issues, <code>sweagent run-batch</code> to run over a whole batch of issues, and various utility commands. Run <code>sweagent --help</code> to see all options. Splitting up both commands made it easier to make both use cases more convenient and flexible.</li> <li>We have switched to a hierarchical configuration system. This means that command line options look something like this: <code>--agent.model.name=gpt-4o</code>.   The configuration files have also been updated to reflect this.</li> </ul>"},{"location":"installation/migration/#environment-setup","title":"Environment setup","text":"<p>We removed the complicated mess of environment setup options (<code>conda</code> environments, <code>pip</code>, docker images, etc.). Instead, you now always start from a docker image of your choice and we recommend that this should ship with all the dependencies you need. However, you can also execute additional commands before starting the agent with <code>EnvironmentConfig.post_startup_commands</code>. Additionally, every tool bundle can include a <code>setup.sh</code> script that will be executed, allowing to e.g., install <code>flake8</code> if needed by the tools.</p>"},{"location":"installation/migration/#more-advanced-configuration","title":"More advanced configuration","text":"<ul> <li>Tools now live in tool bundles in the <code>tools/</code> directory. You can mix and match tools to your liking.</li> </ul>"},{"location":"installation/migration/#code","title":"Code","text":"<p>The codebase has been nearly rewritten from scratch and both more powerful and more flexible.</p> <ul> <li>The biggest change is SWE-ReX, our new \"backend\" that handles all code execution.</li> <li>As a result of this, the <code>SWEEnv</code> class is basically gone and only is a small wrapper around a <code>swerex</code> runtime</li> <li>The <code>Agent</code> class also has gotten a lot simpler. It also delegates a lot of tool/execution logic to the new <code>Tools</code> class.</li> </ul>"},{"location":"installation/source/","title":"Installation from source","text":"<p>Installation from source is the preferred way to set up SWE-agent on your machine.</p> <ol> <li>Clone the repository, for example with     <pre><code>git clone https://github.com/SWE-agent/SWE-agent.git\n</code></pre></li> <li>Run     <pre><code>python -m pip install --upgrade pip &amp;&amp; pip install --editable .\n</code></pre>     at the repository root (as with any python setup, it's recommended to use conda or virtual environments to manage dependencies).</li> <li>Set up your language model of choice as explained here.</li> </ol> <p>Let's run a quick check:</p> <pre><code>sweagent --help\n</code></pre> <p>should show an overview over the available top-level commands.</p> Command not found?  You might also try `python -m sweagent`. If this also doesn't work, please check with `which python` that you're using the same `python` as when you installed SWE-agent.  <p>Optional installation steps:</p> <ol> <li>The default backend for SWE-agent is docker, so we recommend to install Docker    (follow the docs or use the get-docker.sh script for linux),    then start Docker locally. Problems? See docker issues.    If you do not want to use docker, you can still use SWE-agent with code evaluation in the cloud.</li> <li>If you plan on using the web-based GUI: Install <code>nodejs</code>.</li> </ol> <p>Installation tips</p> <ul> <li>If you run into docker issues, see the installation tips section for more help.</li> <li>SWE-agent is still in active development. Features and enhancement are added often. To make sure you are on the latest version, periodically run <code>git pull</code> (there is no need to redo the <code>pip install</code>).</li> <li>SWE-agent EnIGMA is currently only compatible with <code>v0.7</code> of SWE-agent. Please run <code>git switch v0.7</code> after step 1 to switch to the correct version.</li> <li>Want to modify SWE-agent? Great! There are a few extra steps and tips: Please check our contribution guide.</li> </ul> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"installation/tips/","title":"Installation troubleshooting","text":""},{"location":"installation/tips/#docker-issues","title":"Docker issues","text":"<p>First, test if you can use docker in general, for example by running</p> <pre><code>docker run hello-world\n</code></pre> <p>If you get an error like</p> <pre><code>docker: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock:\nHead \"http://%2Fvar%2Frun%2Fdocker.sock/_ping\": dial unix /var/run/docker.sock: connect: permission denied.\n</code></pre> <ul> <li>Make sure that you allow the use of the Docker socket. In Docker desktop, click Settings &gt; Advanced &gt; Allow the default Docker socket to be used (requires password).</li> <li>On the command line, you can try <code>sudo chmod 666 /var/run/docker.sock</code> or add your user to the <code>docker</code> linux user group</li> <li>If your docker installation uses a different socket, you might have to symlink them, see this command for example</li> </ul> <p>If you are using any containers from dockerhub (i.e., you ran <code>docker pull ...</code> or you are running <code>docker run ...</code>), please make sure that you are using the latest versions. Just because an image has the <code>latest</code> tag (e.g., <code>sweagent/swe-agent-run:latest</code>) does not mean that it will auto-update. Please run <code>docker pull sweagent/swe-agent-run:latest</code> to make sure you actually have the most recent version!</p> <p>Any remaining issues? Please open a GitHub issue!</p>"},{"location":"reference/","title":"API Reference","text":"<p>This section shows all configuration options, as well as API details for the main classes.</p> <p>SWE-agent architecture</p> <p>Before you dive into the code, please first read the architecture page for an overview of SWE-agent.</p>"},{"location":"reference/agent/","title":"The agent class","text":"<p>This page documents the <code>Agent</code> class, which runs the main loop of the agent. To learn about the configuration objects used to specify the behavior of an agent, see the agent configuration reference page.</p>"},{"location":"reference/agent/#sweagent.agent.agents.RetryAgent","title":"sweagent.agent.agents.RetryAgent","text":"<pre><code>RetryAgent(config: RetryAgentConfig)\n</code></pre> <p>               Bases: <code>AbstractAgent</code></p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def __init__(self, config: RetryAgentConfig):\n    # Always copy config to avoid shared state between different instances\n    self.config = config.model_copy(deep=True)\n    self._hooks = []\n    self._i_attempt = 0\n    self.logger = get_logger(\"swea-agent\", emoji=\"\ud83e\udd20\")\n    self._agent: DefaultAgent | None = None\n    self._attempt_data: list[dict[str, Any]] = []\n    self._total_instance_attempt_stats = InstanceStats()\n    \"\"\"Note that total_instance_attempt_stats only accumulates the states of the sub-agent,\n    not the reviewer. Use self._total_instance_stats for the total stats.\n    \"\"\"\n    self._chook = CombinedAgentHook()\n    self._traj_path: Path | None = None\n    self._problem_statement: ProblemStatement | None = None\n    self._env: SWEEnv | None = None\n    self._output_dir: Path | None = None\n    self._rloop: ScoreRetryLoop | ChooserRetryLoop | None = None\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.RetryAgent.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = model_copy(deep=True)\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.RetryAgent.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger('swea-agent', emoji='\ud83e\udd20')\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.RetryAgent.add_hook","title":"add_hook","text":"<pre><code>add_hook(hook: AbstractAgentHook) -&gt; None\n</code></pre> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def add_hook(self, hook: AbstractAgentHook) -&gt; None:\n    self._chook.add_hook(hook)\n    self._hooks.append(hook)\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.RetryAgent.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: RetryAgentConfig) -&gt; Self\n</code></pre> Source code in <code>sweagent/agent/agents.py</code> <pre><code>@classmethod\ndef from_config(cls, config: RetryAgentConfig) -&gt; Self:\n    return cls(config)\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.RetryAgent.get_trajectory_data","title":"get_trajectory_data","text":"<pre><code>get_trajectory_data(choose: bool) -&gt; dict[str, Any]\n</code></pre> <p>Get all data that we save in .traj files.</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def get_trajectory_data(self, choose: bool) -&gt; dict[str, Any]:\n    \"\"\"Get all data that we save in .traj files.\"\"\"\n    assert self._rloop is not None\n\n    data = {\n        \"attempts\": self._attempt_data,\n    }\n\n    if choose:\n        try:\n            best_attempt_idx = self._rloop.get_best()\n        except TotalCostLimitExceededError:\n            raise\n        except Exception as e:\n            self.logger.critical(f\"Error getting best attempt index: {e}. Setting to 0.\", exc_info=True)\n            best_attempt_idx = 0\n        data |= copy.deepcopy(self._attempt_data[best_attempt_idx])  # type: ignore\n        data[\"info\"][\"best_attempt_idx\"] = best_attempt_idx\n        data[\"info\"][\"rloop_model_stats\"] = self._rloop.review_model_stats.model_dump()\n        # Overwrite model stats with total stats\n        data[\"info\"][\"model_stats\"] = self._total_instance_stats.model_dump()\n        if isinstance(self._rloop, ChooserRetryLoop):\n            data[\"info\"][\"chooser\"] = (\n                self._rloop._chooser_output.model_dump() if self._rloop._chooser_output else {}\n            )\n    return data\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.RetryAgent.run","title":"run","text":"<pre><code>run(env: SWEEnv, problem_statement: ProblemStatement | ProblemStatementConfig, output_dir: Path = Path('.')) -&gt; AgentRunResult\n</code></pre> <p>Run the agent on a problem instance. This method contains the main loop that repeatedly calls <code>self._step</code> until the problem is solved.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>SWEEnv</code> <p>The environment to run the agent on.</p> required <code>problem_statement</code> <code>ProblemStatement | ProblemStatementConfig</code> <p>The problem statement to run the agent on.</p> required <code>output_dir</code> <code>Path</code> <p>Directory to save the trajectory to</p> <code>Path('.')</code> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def run(\n    self,\n    env: SWEEnv,\n    problem_statement: ProblemStatement | ProblemStatementConfig,\n    output_dir: Path = Path(\".\"),\n) -&gt; AgentRunResult:\n    \"\"\"Run the agent on a problem instance. This method contains the\n    main loop that repeatedly calls `self._step` until the problem is solved.\n\n    Args:\n        env: The environment to run the agent on.\n        problem_statement: The problem statement to run the agent on.\n        output_dir: Directory to save the trajectory to\n    \"\"\"\n    output_dir.mkdir(parents=True, exist_ok=True)\n    self.setup(env=env, problem_statement=problem_statement, output_dir=output_dir)\n    assert self._rloop is not None\n\n    # Run action/observation loop\n    self._chook.on_run_start()\n    step_output = StepOutput()\n    self._setup_agent()\n    assert self._agent is not None\n    while not step_output.done:\n        step_output = self.step()\n        self.save_trajectory(choose=False)\n        if step_output.done:\n            self._rloop.on_submit(\n                ReviewSubmission(\n                    trajectory=self._agent.trajectory,\n                    info=self._agent.info,\n                    model_stats=self._agent.model.stats,\n                )\n            )\n            if isinstance(self._rloop, ScoreRetryLoop):\n                self._agent.info[\"review\"] = self._rloop.reviews[-1].model_dump()  # type: ignore\n            self._finalize_agent_run()\n            self.save_trajectory(choose=False)\n            if self._rloop.retry():\n                assert self._env is not None\n                self._next_attempt()\n                step_output.done = False\n    self.save_trajectory(choose=True)  # call again after we finalized\n    self._chook.on_run_done(trajectory=self._agent.trajectory, info=self._agent.info)\n\n    self.logger.info(\"Trajectory saved to %s\", self._traj_path)\n\n    # Here we want to return the \"global\" information (e.g., submission should\n    # be the best submission instead of the last one, etc.), so we get it from the traj file\n    data = self.get_trajectory_data(choose=True)\n    return AgentRunResult(info=data[\"info\"], trajectory=data[\"trajectory\"])\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.RetryAgent.save_trajectory","title":"save_trajectory","text":"<pre><code>save_trajectory(choose: bool) -&gt; None\n</code></pre> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def save_trajectory(self, choose: bool) -&gt; None:\n    data = self.get_trajectory_data(choose=choose)\n    assert self._traj_path is not None\n    self._traj_path.write_text(json.dumps(data, indent=2))\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.RetryAgent.setup","title":"setup","text":"<pre><code>setup(env: SWEEnv, problem_statement: ProblemStatement | ProblemStatementConfig, output_dir: Path = Path('.')) -&gt; None\n</code></pre> <p>Setup the retry agent for a new problem instance. This is mostly a bookkeeping step.</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def setup(\n    self, env: SWEEnv, problem_statement: ProblemStatement | ProblemStatementConfig, output_dir: Path = Path(\".\")\n) -&gt; None:\n    \"\"\"Setup the retry agent for a new problem instance.\n    This is mostly a bookkeeping step.\n    \"\"\"\n    self._total_instance_attempt_stats = InstanceStats()\n    self._problem_statement = problem_statement\n    self._traj_path = output_dir / (self._problem_statement.id + \".traj\")\n    self._env = env\n    self._output_dir = output_dir\n    self._rloop = get_retry_loop_from_config(self.config.retry_loop, problem_statement=problem_statement)\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.RetryAgent.step","title":"step","text":"<pre><code>step() -&gt; StepOutput\n</code></pre> <p>Step the agent of the current attempt. Attempt autosubmit if an error occurs (though all errors should already be handled by the attempt agent).</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def step(self) -&gt; StepOutput:\n    \"\"\"Step the agent of the current attempt.\n    Attempt autosubmit if an error occurs (though all errors should already be handled by the attempt agent).\n    \"\"\"\n    assert self._agent is not None\n    # Failsafe cost check, this should not actually happen, because the sub-agent should have already been\n    # initialized with the correct cost limit to not exceed the total cost limit. Using factor of 1.1, because\n    # sub-agent might only catch the cost limit after attempting.\n    if self._total_instance_stats.instance_cost &gt; 1.1 * self.config.retry_loop.cost_limit &gt; 0:\n        msg = \"Total instance cost exceeded cost limit. This should not happen, please report this. Triggering autosubmit.\"\n        self.logger.critical(msg)\n        return self._agent.attempt_autosubmission_after_error(step=StepOutput())\n    try:\n        step = self._agent.step()\n    except TotalCostLimitExceededError:\n        # Need to make sure that this error causes everything to stop\n        raise\n    except Exception as e:\n        msg = \"Error in agent step: %s. This really shouldn't happen, please report this. Triggering autosubmit.\"\n        self.logger.critical(msg, e, exc_info=True)\n        step = self._agent.attempt_autosubmission_after_error(step=StepOutput())\n    return step\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent","title":"sweagent.agent.agents.DefaultAgent","text":"<pre><code>DefaultAgent(*, templates: TemplateConfig, tools: ToolHandler, history_processors: list[HistoryProcessor], model: AbstractModel, max_requeries: int = 3, name: str = 'main', _catch_errors: bool = True, _always_require_zero_exit_code: bool = False, action_sampler_config: ActionSamplerConfig | None = None)\n</code></pre> <p>               Bases: <code>AbstractAgent</code></p> <p>The agent handles the behaviour of the model and how it interacts with the environment.</p> <p>To run the agent, either call <code>self.run</code> or <code>self.setup</code> and then <code>self.step</code> in a loop.</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def __init__(\n    self,\n    *,\n    templates: TemplateConfig,\n    tools: ToolHandler,\n    history_processors: list[HistoryProcessor],\n    model: AbstractModel,\n    max_requeries: int = 3,\n    name: str = \"main\",\n    _catch_errors: bool = True,\n    _always_require_zero_exit_code: bool = False,\n    action_sampler_config: ActionSamplerConfig | None = None,\n):\n    \"\"\"The agent handles the behaviour of the model and how it interacts with the environment.\n\n    To run the agent, either call `self.run` or `self.setup` and then `self.step` in a loop.\n    \"\"\"\n    self._catch_errors = _catch_errors\n    self._always_require_zero_exit_code = _always_require_zero_exit_code\n    self.name = name\n    self.model = model\n    self.templates = templates\n    self.tools = tools\n    if isinstance(self.model, HumanThoughtModel):\n        self.tools.config.parse_function = ThoughtActionParser()\n    elif isinstance(self.model, HumanModel):\n        self.tools.config.parse_function = ActionOnlyParser()\n    self.history_processors = history_processors\n    self.max_requeries = max_requeries\n    self.logger = get_logger(\"swea-agent\", emoji=\"\ud83e\udd20\")\n    # Set in run method\n    self._env: SWEEnv | None = None\n    self._problem_statement: ProblemStatement | ProblemStatementConfig | None = None\n    self.traj_path: Path | None = None\n\n    #: The following three attributes collect the information about how the agent\n    #: solved the problem.\n    self.history = []\n    self._trajectory = []\n    self.info = AgentInfo()\n\n    self._chook = CombinedAgentHook()\n\n    self._replay_config: BaseModel | None = None\n    \"\"\"This can be set to a RunSingleConfig from the Run instance whenever possible.\n    It can be used to replay the agent's trajectory in an environment.\n    \"\"\"\n\n    self._action_sampler: AbstractActionSampler | None = None\n    if action_sampler_config is not None:\n        self._action_sampler = action_sampler_config.get(self.model, self.tools)\n\n    #: Count how many timeout errors have occurred consecutively. Kills agent\n    #: after 5 of them.\n    self._n_consecutive_timeouts = 0\n    self._total_execution_time = 0.0\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.history","title":"history  <code>instance-attribute</code>","text":"<pre><code>history = []\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.history_processors","title":"history_processors  <code>instance-attribute</code>","text":"<pre><code>history_processors = history_processors\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.info","title":"info  <code>instance-attribute</code>","text":"<pre><code>info = AgentInfo()\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger('swea-agent', emoji='\ud83e\udd20')\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.max_requeries","title":"max_requeries  <code>instance-attribute</code>","text":"<pre><code>max_requeries = max_requeries\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.messages","title":"messages  <code>property</code>","text":"<pre><code>messages: list[dict[str, Any]]\n</code></pre> <p>Return the history of the agent for this attempt since the last reset, processed through all history processors.</p>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = model\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.replay_config","title":"replay_config  <code>property</code> <code>writable</code>","text":"<pre><code>replay_config: BaseModel | None\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.templates","title":"templates  <code>instance-attribute</code>","text":"<pre><code>templates = templates\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.tools","title":"tools  <code>instance-attribute</code>","text":"<pre><code>tools = tools\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.traj_path","title":"traj_path  <code>instance-attribute</code>","text":"<pre><code>traj_path: Path | None = None\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.trajectory","title":"trajectory  <code>property</code>","text":"<pre><code>trajectory: Trajectory\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.add_demonstrations_to_history","title":"add_demonstrations_to_history","text":"<pre><code>add_demonstrations_to_history() -&gt; None\n</code></pre> <p>Add demonstrations to history</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def add_demonstrations_to_history(self) -&gt; None:\n    \"\"\"Add demonstrations to history\"\"\"\n    for demonstration_path in self.templates.demonstrations:\n        self._add_demonstration_to_history(demonstration_path)\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.add_hook","title":"add_hook","text":"<pre><code>add_hook(hook: AbstractAgentHook) -&gt; None\n</code></pre> <p>Add hook to agent</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def add_hook(self, hook: AbstractAgentHook) -&gt; None:\n    \"\"\"Add hook to agent\"\"\"\n    hook.on_init(agent=self)\n    self._chook.add_hook(hook)\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.add_instance_template_to_history","title":"add_instance_template_to_history","text":"<pre><code>add_instance_template_to_history(state: dict[str, str]) -&gt; None\n</code></pre> <p>Add observation to history, as well as the instance template or demonstrations if we're at the start of a new attempt.</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def add_instance_template_to_history(self, state: dict[str, str]) -&gt; None:\n    \"\"\"Add observation to history, as well as the instance template or demonstrations if we're\n    at the start of a new attempt.\n    \"\"\"\n    templates: list[str] = []\n    # Determine observation template based on what prior observation was\n    assert self.history[-1][\"role\"] == \"system\" or self.history[-1].get(\"is_demo\", False)\n    # Show instance template if prev. obs. was initial system message\n    templates = [self.templates.instance_template]\n    if self.templates.strategy_template is not None:\n        templates.append(self.templates.strategy_template)\n\n    self._add_templated_messages_to_history(templates, **state)  # type: ignore\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.add_step_to_history","title":"add_step_to_history","text":"<pre><code>add_step_to_history(step: StepOutput) -&gt; None\n</code></pre> <p>Adds a step (command that was run and output) to the model history</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def add_step_to_history(self, step: StepOutput) -&gt; None:\n    \"\"\"Adds a step (command that was run and output) to the model history\"\"\"\n    self._append_history(\n        {\n            \"role\": \"assistant\",\n            \"content\": step.output,\n            \"thought\": step.thought,\n            \"action\": step.action,\n            \"agent\": self.name,\n            \"tool_calls\": step.tool_calls,\n            \"message_type\": \"action\",\n        },\n    )\n\n    elided_chars = 0\n    if step.observation.strip() == \"\":\n        # Show no output template if observation content was empty\n        templates = [self.templates.next_step_no_output_template]\n    elif len(step.observation) &gt; self.templates.max_observation_length:\n        templates = [self.templates.next_step_truncated_observation_template]\n        elided_chars = len(step.observation) - self.templates.max_observation_length\n        step.observation = step.observation[: self.templates.max_observation_length]\n    else:\n        # Show standard output template if there is observation content\n        templates = [self.templates.next_step_template]\n    self._add_templated_messages_to_history(\n        templates,\n        observation=step.observation,\n        elided_chars=elided_chars,\n        max_observation_length=self.templates.max_observation_length,\n        tool_call_ids=step.tool_call_ids,\n        **step.state,\n    )\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.add_step_to_trajectory","title":"add_step_to_trajectory","text":"<pre><code>add_step_to_trajectory(step: StepOutput) -&gt; None\n</code></pre> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def add_step_to_trajectory(self, step: StepOutput) -&gt; None:\n    trajectory_step = TrajectoryStep(\n        {\n            \"action\": step.action,\n            \"observation\": step.observation,\n            \"response\": step.output,\n            \"thought\": step.thought,\n            \"execution_time\": step.execution_time,\n            \"state\": step.state,\n            \"messages\": self.messages,\n            \"extra_info\": step.extra_info,\n        },\n    )\n    self.trajectory.append(trajectory_step)\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.add_system_message_to_history","title":"add_system_message_to_history","text":"<pre><code>add_system_message_to_history() -&gt; None\n</code></pre> <p>Add system message to history</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def add_system_message_to_history(self) -&gt; None:\n    \"\"\"Add system message to history\"\"\"\n    assert self._problem_statement is not None\n    system_msg = Template(self.templates.system_template).render(**self._get_format_dict())\n    self.logger.info(f\"SYSTEM ({self.name})\\n{system_msg}\")\n    self._append_history(\n        {\"role\": \"system\", \"content\": system_msg, \"agent\": self.name, \"message_type\": \"system_prompt\"}\n    )\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.attempt_autosubmission_after_error","title":"attempt_autosubmission_after_error","text":"<pre><code>attempt_autosubmission_after_error(step: StepOutput) -&gt; StepOutput\n</code></pre> <p>For most exceptions, we attempt to still extract the patch and submit that. This means we send the <code>submit</code> command to the runtime and parse the output.</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def attempt_autosubmission_after_error(self, step: StepOutput) -&gt; StepOutput:\n    \"\"\"For most exceptions, we attempt to still extract the patch and submit that.\n    This means we send the `submit` command to the runtime and parse the output.\n    \"\"\"\n    self.logger.warning(\"Attempting autosubmission after error\")\n    step = step.model_copy(deep=True)\n    step.done = True\n    assert self._env is not None\n    if not asyncio.run(self._env.deployment.is_alive(timeout=10)):\n        # The agent is dead. This is very bad. Maybe we can take a 'diff' that was saved\n        # for a previous step? (if running with diff in tools)\n        self.logger.error(\"Runtime is no longer alive\")\n        try:\n            last_trajectory_step = self.trajectory[-1]\n        except IndexError:\n            self.logger.info(\"No last trajectory step to extract patch from\")\n            return step\n        if \"diff\" not in last_trajectory_step[\"state\"]:\n            self.logger.info(\"No diff in last trajectory step state, cannot autosubmit\")\n            return step\n        diff = last_trajectory_step[\"state\"][\"diff\"]\n        self.logger.info(\"Using diff from last trajectory step to autosubmit\")\n        step.submission = diff\n        if step.submission:\n            step.observation = \"Environment died unexpectedly. Exited (autosubmitted)\"\n            step.exit_status = f\"submitted ({step.exit_status})\"\n        else:\n            self.logger.info(\"Diff from last traj step empty.\")\n        return step\n    # Let us manually run the submission command and collect the output\n    repo_name = \"/\"\n    if self._env.repo is not None:\n        repo_name = f\"/{self._env.repo.repo_name}\"\n    submission_command = \"git add -A &amp;&amp; git diff --cached &gt; /root/model.patch\"\n    self.logger.info(\"Executing submission command %s in %s\", submission_command, repo_name)\n    try:\n        self._env.execute_command(submission_command, check=True, cwd=repo_name)\n    except Exception as e:\n        self.logger.error(\"Failed to execute submission command, got %s\", e)\n    # There's still hope for the submission, because the `/root/model.patch` file might have been\n    # generated by the state command\n    step = self.handle_submission(step, observation=\"\", force_submission=True)\n    if step.submission:\n        self.logger.info(\"Exiting with autosubmission\")\n        step.observation = \"Exited (autosubmitted)\"\n    return step\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.forward","title":"forward","text":"<pre><code>forward(history: list[dict[str, str]]) -&gt; StepOutput\n</code></pre> <p>Forward the model without handling errors.</p> <p>All exceptions raised will contain the <code>StepOutput</code> object with some of the attributes set.</p> <p>Parameters:</p> Name Type Description Default <code>history</code> <code>list[dict[str, str]]</code> <p>history to query the model with</p> required <p>Returns:</p> Name Type Description <code>step_output</code> <code>StepOutput</code> <p>step output</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def forward(self, history: list[dict[str, str]]) -&gt; StepOutput:\n    \"\"\"Forward the model without handling errors.\n\n    All exceptions raised will contain the `StepOutput` object\n    with some of the attributes set.\n\n    Args:\n        history: history to query the model with\n\n    Returns:\n        step_output: step output\n    \"\"\"\n    if self._total_execution_time &gt; self.tools.config.total_execution_timeout:\n        raise _TotalExecutionTimeExceeded()\n\n    # we continuously add actions, output etc. to the step object\n    # because some of the specific exception handling requires some of these\n    # attributes (e.g., if we want to requery the model for a bash syntax error, we\n    # need to have the previous model output to format the requery template)\n    step = StepOutput()\n    try:\n        # Forward model and get actions\n        self._chook.on_model_query(messages=history, agent=self.name)\n        # todo: Add all options to the extra info\n        if self._action_sampler is not None:\n            assert self._problem_statement is not None\n            best = self._action_sampler.get_action(\n                problem_statement=self._problem_statement,\n                trajectory=self.trajectory,\n                history=history,\n            )\n            output = best.completion\n            # todo: Handle history and trajectory\n            step.extra_info.update(best.extra_info)\n        else:\n            output = self.model.query(history)  # type: ignore\n        step.output = output[\"message\"]\n        # todo: Can't I override the parser in __init__?\n        step.thought, step.action = self.tools.parse_actions(output)\n        if output.get(\"tool_calls\") is not None:\n            step.tool_call_ids = [call[\"id\"] for call in output[\"tool_calls\"]]\n            step.tool_calls = output[\"tool_calls\"]\n        self.logger.info(f\"\ud83d\udcad THOUGHT\\n{step.thought}\\n\\n\ud83c\udfac ACTION\\n{step.action.strip()}\")\n        self._chook.on_actions_generated(step=step)\n        return self.handle_action(step)\n    except Exception as e:\n        if step.action == step.thought == \"\":\n            # Probably the parsing failed/no action included. Let's still fill in thought\n            # so that trajectory viewers have something to show us for this step.\n            step.thought = step.output\n        # Attach the step object to the exception\n        e.step = step  # type: ignore\n        raise\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.forward_with_handling","title":"forward_with_handling","text":"<pre><code>forward_with_handling(history: list[dict[str, str]]) -&gt; StepOutput\n</code></pre> <p>Forward the model and handle errors, requerying the model if we can. For example, if the model outputs a bash command that has syntax errors, we will not execute it but requery the model for a corrected command.</p> <p>Note: This will update the trajectory, but not the history.</p> <p>Parameters:</p> Name Type Description Default <code>history</code> <code>list[dict[str, str]]</code> <p>history to forward</p> required <p>Returns:</p> Name Type Description <code>step_output</code> <code>StepOutput</code> <p>step output</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def forward_with_handling(self, history: list[dict[str, str]]) -&gt; StepOutput:\n    \"\"\"Forward the model and handle errors, requerying the model if we can.\n    For example, if the model outputs a bash command that has syntax errors,\n    we will not execute it but requery the model for a corrected command.\n\n    Note: This will update the trajectory, but not the history.\n\n    Args:\n        history: history to forward\n\n    Returns:\n        step_output: step output\n    \"\"\"\n\n    def handle_error_with_autosubmission(exit_status: str, message: str) -&gt; StepOutput:\n        \"\"\"Attempts to autosubmit (extract patch from the environment) and stops the loop.\"\"\"\n        self.logger.warning(message)\n        return self.attempt_autosubmission_after_error(\n            StepOutput(\n                thought=message,\n                exit_status=exit_status,\n                output=message,\n                done=True,\n            )\n        )\n\n    def handle_error_with_retry(exception: Exception, template: str, n_requeries: int) -&gt; list[dict[str, str]]:\n        \"\"\"Requeries the model if the error is a format/blocklist/bash syntax error.\"\"\"\n        self.logger.warning(\"Requerying model after %s (%dth requery)\", type(exception).__name__, n_requeries)\n        step: StepOutput = getattr(exception, \"step\", StepOutput())\n        self.add_step_to_trajectory(step)\n        exception_message = getattr(exception, \"message\", \"\")\n        if not exception_message:\n            try:\n                exception_message = exception.args[0]\n            except (IndexError, AttributeError):\n                pass\n        return self.get_model_requery_history(\n            error_template=template,\n            **step.to_template_format_dict(),\n            **getattr(exception, \"extra_info\", {}),\n            exception_message=exception_message,\n        )\n\n    n_format_fails = 0\n    while n_format_fails &lt; self.max_requeries:\n        try:\n            return self.forward(history)\n\n        # Errors that are raised\n\n        except KeyboardInterrupt:\n            raise\n\n        # Errors that cause requery\n\n        except FormatError as e:\n            n_format_fails += 1\n            history = handle_error_with_retry(\n                exception=e, template=self.tools.config.format_error_template, n_requeries=n_format_fails\n            )\n        except _BlockedActionError as e:\n            n_format_fails += 1\n            history = handle_error_with_retry(\n                exception=e, template=self.tools.config.filter.blocklist_error_template, n_requeries=n_format_fails\n            )\n        except ContentPolicyViolationError:\n            self.logger.warning(\"Content policy violation, trying to resample\")\n            n_format_fails += 1\n            # Try if simply resampling helps here\n            pass\n        except BashIncorrectSyntaxError as e:\n            n_format_fails += 1\n            history = handle_error_with_retry(\n                exception=e,\n                template=self.templates.shell_check_error_template,\n                n_requeries=n_format_fails,\n            )\n        except _RetryWithOutput as e:\n            history = handle_error_with_retry(\n                exception=e,\n                template=self.templates.next_step_template,\n                n_requeries=n_format_fails,\n            )\n        except _RetryWithoutOutput:\n            pass\n            # Requery with the same template as the last step\n\n        # Errors that cause exit\n        except _TotalExecutionTimeExceeded:\n            self.logger.exception(\"Exiting due to total execution time exceeded\", exc_info=True)\n            return handle_error_with_autosubmission(\n                \"exit_total_execution_time\",\n                \"Exit due to total execution time exceeded\",\n            )\n\n        except CommandTimeoutError:\n            self.logger.exception(\"Exiting due to multiple consecutive command timeouts\", exc_info=True)\n            return handle_error_with_autosubmission(\n                \"exit_command_timeout\",\n                \"Exit due to multiple consecutive command timeouts\",\n            )\n\n        except ContextWindowExceededError:\n            return handle_error_with_autosubmission(\n                \"exit_context\",\n                \"Exit due to context window\",\n            )\n        except TotalCostLimitExceededError:\n            raise\n        except CostLimitExceededError:\n            return handle_error_with_autosubmission(\n                \"exit_cost\",\n                \"Exit due to cost limit\",\n            )\n        except RetryError as e:\n            self.logger.exception(f\"Exiting due to retry error: {e}\", exc_info=True)\n            return handle_error_with_autosubmission(\n                \"exit_api\",\n                f\"Exit due to retry error: {e}\",\n            )\n        except SwerexException as e:\n            self.logger.exception(f\"Exiting due to environment error: {e}\", exc_info=True)\n            return handle_error_with_autosubmission(\n                \"exit_environment_error\",\n                f\"Exit due to environment error: {e}\",\n            )\n        except RuntimeError as e:\n            self.logger.exception(f\"Exiting due to runtime error: {e}\", exc_info=True)\n            return handle_error_with_autosubmission(\n                \"exit_error\",\n                f\"Exit due to runtime error: {e}\",\n            )\n        except Exception as e:\n            self.logger.exception(f\"Exiting due to unknown error: {e}\", exc_info=True)\n            return handle_error_with_autosubmission(\n                \"exit_error\",\n                f\"Exit due to unknown error: {e}\",\n            )\n    self.logger.exception(\n        \"Exit due to repeated format/blocklist/bash syntax errors\",\n        exc_info=True,\n    )\n    return handle_error_with_autosubmission(\n        \"exit_format\",\n        \"Exit due to repeated format/blocklist/bash syntax errors\",\n    )\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: DefaultAgentConfig) -&gt; Self\n</code></pre> Source code in <code>sweagent/agent/agents.py</code> <pre><code>@classmethod\ndef from_config(cls, config: DefaultAgentConfig) -&gt; Self:\n    # To ensure that all models stay completely independent, we deepcopy the\n    # model config, because it lives on as a property in the model, tools, etc.\n    config = config.model_copy(deep=True)\n    model = get_model(config.model, config.tools)\n    return cls(\n        templates=config.templates,\n        tools=ToolHandler(config.tools),\n        history_processors=config.history_processors,\n        model=model,\n        max_requeries=config.max_requeries,\n        action_sampler_config=config.action_sampler,\n    )\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.get_model_requery_history","title":"get_model_requery_history","text":"<pre><code>get_model_requery_history(error_template: str, *, output: str, **kwargs: str | int | float | bool | None) -&gt; list[dict[str, str]]\n</code></pre> <p>Ask the model to correct after a hitting one of the following errors:</p> <ol> <li>Malformatted output (could not parse action)</li> <li>Blocked action (command is on the blocklist)</li> <li>Bash command syntax error</li> </ol> <p>At the time this function is called, the proposed action and observation are not part of the history yet.</p> <p>This function adds temporary history based on the error template and queries the model. If the model is able to correct itself, the records of the mistakes will not be part of the history (but they are saved in the trajectory).</p> <p>Parameters:</p> Name Type Description Default <code>error_template</code> <code>str</code> <p>error template</p> required <code>output</code> <code>str</code> <p>model output</p> required <code>**kwargs</code> <code>str | int | float | bool | None</code> <p>keyword arguments to be passed to the error template</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[dict[str, str]]</code> <p>model output after requery</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def get_model_requery_history(\n    self, error_template: str, *, output: str, **kwargs: str | int | float | bool | None\n) -&gt; list[dict[str, str]]:\n    \"\"\"Ask the model to correct after a hitting one of the following errors:\n\n    1. Malformatted output (could not parse action)\n    2. Blocked action (command is on the blocklist)\n    3. Bash command syntax error\n\n    At the time this function is called, the proposed action and observation are not part of the history\n    yet.\n\n    This function adds temporary history based on the error template and queries the model.\n    If the model is able to correct itself, the records of the mistakes will not be part of the history\n    (but they are saved in the trajectory).\n\n    Args:\n        error_template: error template\n        output: model output\n        **kwargs: keyword arguments to be passed to the error template\n\n    Returns:\n        model output after requery\n    \"\"\"\n    format_dict = {**kwargs, **self._get_format_dict()}\n    error_template = Template(error_template).render(**format_dict)\n\n    self.logger.warning(f\"{error_template}\")\n\n    return self.messages + [\n        {\"role\": \"assistant\", \"content\": output, \"agent\": self.name},\n        {\"role\": \"user\", \"content\": error_template, \"agent\": self.name},\n    ]\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.get_trajectory_data","title":"get_trajectory_data","text":"<pre><code>get_trajectory_data() -&gt; dict[str, Any]\n</code></pre> <p>Get all data that we save in .traj files.</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def get_trajectory_data(self) -&gt; dict[str, Any]:\n    \"\"\"Get all data that we save in .traj files.\"\"\"\n\n    assert self._env is not None\n    # The deepcopy here is important because else the\n    # data[\"info\"][\"model_stats\"] update will create havoc!\n    attempt_data = copy.deepcopy(\n        {\n            \"trajectory\": self.trajectory,\n            \"history\": self.history,\n            \"info\": self.info,\n        }\n    )\n    attempt_data[\"replay_config\"] = self.replay_config.model_dump_json() if self.replay_config is not None else None\n    attempt_data[\"environment\"] = self._env.name\n    return attempt_data\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.handle_action","title":"handle_action","text":"<pre><code>handle_action(step: StepOutput) -&gt; StepOutput\n</code></pre> <p>Runs an action proposed by the agent in the environment and returns the corresponding output.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <p>command to run in bash shell</p> required <code>output</code> <p>output from model (only used for error handling)</p> required <p>Returns:</p> Name Type Description <code>action_execution_output</code> <code>StepOutput</code> <p>action execution output</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def handle_action(self, step: StepOutput) -&gt; StepOutput:\n    \"\"\"Runs an action proposed by the agent in the environment and returns the corresponding output.\n\n    Args:\n        action: command to run in bash shell\n        output: output from model (only used for error handling)\n\n    Returns:\n        action_execution_output: action execution output\n    \"\"\"\n    if self.tools.should_block_action(step.action):\n        raise _BlockedActionError()\n\n    if step.action.strip() == \"exit\":\n        self.logger.info(\"Exiting agent\")\n        step.done = True\n        step.observation = \"Exited\"\n        step.exit_status = \"exit_command\"\n        assert self._env is not None\n        step.state = self.tools.get_state(env=self._env)  # for history\n        return step\n\n    assert self._env is not None\n    self._chook.on_action_started(step=step)\n    execution_t0 = time.perf_counter()\n    run_action: str = self.tools.guard_multiline_input(step.action).strip()\n    try:\n        step.observation = self._env.communicate(\n            input=run_action,\n            timeout=self.tools.config.execution_timeout,\n            check=\"raise\" if self._always_require_zero_exit_code else \"ignore\",\n        )\n    except CommandTimeoutError:\n        try:\n            if self._n_consecutive_timeouts &gt;= self.tools.config.max_consecutive_execution_timeouts:\n                msg = \"Exiting agent due to too many consecutive execution timeouts\"\n                self.logger.critical(msg)\n                raise\n            self._env.interrupt_session()\n            self._n_consecutive_timeouts += 1\n        except Exception as f:\n            self.logger.exception(\"Failed to interrupt session after command timeout: %s\", f, exc_info=True)\n            raise\n        step.observation = Template(self.templates.command_cancelled_timeout_template).render(\n            **self._get_format_dict(),\n            timeout=self.tools.config.execution_timeout,\n            command=run_action,\n        )\n    else:\n        self._n_consecutive_timeouts = 0\n    step.execution_time = time.perf_counter() - execution_t0\n    self._total_execution_time += step.execution_time\n    self._chook.on_action_executed(step=step)\n    step.state = self.tools.get_state(env=self._env)\n\n    if RETRY_WITH_OUTPUT_TOKEN in step.observation:\n        step.observation = step.observation.replace(RETRY_WITH_OUTPUT_TOKEN, \"\")\n        raise _RetryWithOutput()\n    elif RETRY_WITHOUT_OUTPUT_TOKEN in step.observation:\n        step.observation = step.observation.replace(RETRY_WITHOUT_OUTPUT_TOKEN, \"\")\n        raise _RetryWithoutOutput()\n\n    return self.handle_submission(step)\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.handle_submission","title":"handle_submission","text":"<pre><code>handle_submission(step: StepOutput, *, observation='', force_submission: bool = False) -&gt; StepOutput\n</code></pre> <p>Check if there was a submission in the observation and handle it.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>StepOutput</code> required <code>observation</code> <p>If specified, will use this rather than stepobservation</p> <code>''</code> <code>force_submission</code> <code>bool</code> <p>If True, will always submit even if no submission is found</p> <code>False</code> <p>Returns:</p> Name Type Description <code>step</code> <code>StepOutput</code> <p>step with submission and observation updated (if submission was found)</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def handle_submission(self, step: StepOutput, *, observation=\"\", force_submission: bool = False) -&gt; StepOutput:\n    \"\"\"Check if there was a submission in the observation and handle it.\n\n    Args:\n        step:\n        observation: If specified, will use this rather than stepobservation\n        force_submission: If True, will always submit even if no submission is found\n\n    Returns:\n        step: step with submission and observation updated (if submission was found)\n    \"\"\"\n    step = step.model_copy(deep=True)\n    assert self.tools is not None\n    is_submission = self.tools.check_for_submission_cmd(observation or step.observation)\n    if is_submission or force_submission:\n        assert self._env is not None\n        try:\n            submission = self._env.read_file(\"/root/model.patch\", encoding=\"utf-8\", errors=\"backslashreplace\")\n        except FileNotFoundError:\n            self.logger.warning(\"Submission file not found, no submission was made\")\n            return step\n        except Exception as e:\n            self.logger.exception(\"Failed to read submission file, got %s\", e)\n            return step\n        if submission.strip() != \"\":\n            step.submission = submission\n        else:\n            step.submission = None\n        step.observation = submission\n        if not step.exit_status:\n            step.exit_status = \"submitted\"\n        elif step.submission:\n            step.exit_status = f\"submitted ({step.exit_status})\"\n        step.done = True\n        self.logger.info(f\"Found submission: {submission}\")\n    return step\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.run","title":"run","text":"<pre><code>run(env: SWEEnv, problem_statement: ProblemStatement | ProblemStatementConfig, output_dir: Path = Path('.')) -&gt; AgentRunResult\n</code></pre> <p>Run the agent on a problem instance. This method contains the main loop that repeatedly calls <code>self._step</code> until the problem is solved.</p> <p>Parameters:</p> Name Type Description Default <code>setup_args</code> <p>Arguments to pass to the agent's setup method.</p> required <code>env</code> <code>SWEEnv</code> <p>The environment to run the agent on.</p> required <code>traj_dir</code> <p>Directory to save the trajectory to</p> required Source code in <code>sweagent/agent/agents.py</code> <pre><code>def run(\n    self,\n    env: SWEEnv,\n    problem_statement: ProblemStatement | ProblemStatementConfig,\n    output_dir: Path = Path(\".\"),\n) -&gt; AgentRunResult:\n    \"\"\"Run the agent on a problem instance. This method contains the\n    main loop that repeatedly calls `self._step` until the problem is solved.\n\n    Args:\n        setup_args: Arguments to pass to the agent's setup method.\n        env: The environment to run the agent on.\n        traj_dir: Directory to save the trajectory to\n    \"\"\"\n    self.setup(env=env, problem_statement=problem_statement, output_dir=output_dir)\n\n    # Run action/observation loop\n    self._chook.on_run_start()\n    step_output = StepOutput()\n    while not step_output.done:\n        step_output = self.step()\n        self.save_trajectory()\n    self._chook.on_run_done(trajectory=self.trajectory, info=self.info)\n\n    self.logger.info(\"Trajectory saved to %s\", self.traj_path)\n\n    # Here we want to return the \"global\" information (e.g., submission should\n    # be the best submission instead of the last one, etc.), so we get it from the traj file\n    data = self.get_trajectory_data()\n    return AgentRunResult(info=data[\"info\"], trajectory=data[\"trajectory\"])\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.save_trajectory","title":"save_trajectory","text":"<pre><code>save_trajectory() -&gt; None\n</code></pre> <p>Save the trajectory to disk. This includes the history, the environment state, and the model stats.</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def save_trajectory(\n    self,\n) -&gt; None:\n    \"\"\"Save the trajectory to disk.\n    This includes the history, the environment state, and the model stats.\n    \"\"\"\n    data = self.get_trajectory_data()\n    assert self.traj_path is not None\n    self.traj_path.write_text(json.dumps(data, indent=2))\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.setup","title":"setup","text":"<pre><code>setup(env: SWEEnv, problem_statement: ProblemStatement | ProblemStatementConfig, output_dir: Path = Path('.')) -&gt; None\n</code></pre> <p>Setup the agent for a new instance. This includes formatting the system message and adding demonstrations to the history.</p> <p>This method is called by <code>self.run</code>.</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def setup(\n    self,\n    env: SWEEnv,\n    problem_statement: ProblemStatement | ProblemStatementConfig,\n    output_dir: Path = Path(\".\"),\n) -&gt; None:\n    \"\"\"Setup the agent for a new instance. This includes\n    formatting the system message and adding demonstrations to the history.\n\n    This method is called by `self.run`.\n    \"\"\"\n    output_dir.mkdir(parents=True, exist_ok=True)\n    self._problem_statement = problem_statement\n    self._env = env\n    iid = self._problem_statement.id\n    self.logger.info(\"Setting up agent for instance %s\", iid)\n\n    # Save/reset some attributes\n    self.traj_path = output_dir / (self._problem_statement.id + \".traj\")\n    self.logger.info(\"Trajectory will be saved to %s\", self.traj_path)\n\n    self._chook.on_tools_installation_started()\n    self.tools.install(self._env)\n    self._chook.on_setup_attempt()\n    self.info = AgentInfo()\n    self.info[\"swe_agent_hash\"] = get_agent_commit_hash()\n    self.info[\"swe_agent_version\"] = __version__\n    self.info[\"swe_rex_version\"] = get_rex_version()\n    self.info[\"swe_rex_hash\"] = get_rex_commit_hash()\n    assert self._env is not None\n    assert self._problem_statement is not None\n    self._env.set_env_variables({\"PROBLEM_STATEMENT\": self._problem_statement.get_problem_statement()})\n    self.add_system_message_to_history()\n    self.add_demonstrations_to_history()\n    self.add_instance_template_to_history(state=self.tools.get_state(self._env))\n    self._chook.on_setup_done()\n</code></pre>"},{"location":"reference/agent/#sweagent.agent.agents.DefaultAgent.step","title":"step","text":"<pre><code>step() -&gt; StepOutput\n</code></pre> <p>Run a step of the agent. This is a wrapper around <code>self.forward_with_handling</code> with additional bookkeeping:</p> <ol> <li>Update message history with performed action and observation</li> <li>Update trajectory with the final executed result</li> <li>Update the info dictionary</li> </ol> <p>Returns:</p> Name Type Description <code>step_output</code> <code>StepOutput</code> <p>step output (same as the output of <code>self.forward_with_handling</code>)</p> Source code in <code>sweagent/agent/agents.py</code> <pre><code>def step(self) -&gt; StepOutput:\n    \"\"\"Run a step of the agent. This is a wrapper around `self.forward_with_handling`\n    with additional bookkeeping:\n\n    1. Update message history with performed action and observation\n    2. Update trajectory with the final executed result\n    3. Update the info dictionary\n\n    Returns:\n        step_output: step output (same as the output of `self.forward_with_handling`)\n    \"\"\"\n\n    assert self._env is not None\n    self._chook.on_step_start()\n\n    n_step = len(self.trajectory) + 1\n    self.logger.info(\"=\" * 25 + f\" STEP {n_step} \" + \"=\" * 25)\n    step_output = self.forward_with_handling(self.messages)\n    self.add_step_to_history(step_output)\n\n    self.info[\"submission\"] = step_output.submission\n    self.info[\"exit_status\"] = step_output.exit_status  # type: ignore\n    self.info.update(self._get_edited_files_with_context(patch=step_output.submission or \"\"))  # type: ignore\n    self.info[\"model_stats\"] = self.model.stats.model_dump()\n\n    self.add_step_to_trajectory(step_output)\n\n    self._chook.on_step_done(step=step_output, info=self.info)\n    return step_output\n</code></pre>"},{"location":"reference/agent_config/","title":"Agent configuration","text":"<p>This page documents the configuration objects used to specify the behavior of an agent. To learn about the agent class itself, see the agent class reference page.</p> <p>It might be easiest to simply look at some of our example configurations in the config dir.</p> Example: default config <code>default.yaml</code> <pre><code>agent:\n  templates:\n    system_template: |-\n      SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\n\n      The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time.\n      In addition to typical bash commands, you can also use specific commands to help you navigate and edit files.\n      To call a command, you need to invoke it with a function call/tool call.\n\n      Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.\n\n      For example, if you are looking at this file:\n\n      def fct():\n          print(\"Hello world\")\n\n      and you want to edit the file to read:\n\n      def fct():\n          print(\"Hello\")\n          print(\"world\")\n\n      you search string should be `Hello world` and your replace string should be `\"Hello\"\\n    print(\"world\")`\n      (note the extra spaces before the print statement!).\n\n      You could also get the same result by search for `    print(\"Hello world\")` and replace with `    print(\"Hello\")\\n    print(\"world\")`.\n\n      RESPONSE FORMAT:\n      Your shell prompt is formatted as follows:\n      (Open file: &lt;path&gt;)\n      (Current directory: &lt;cwd&gt;)\n      bash-$\n\n      First, you should _always_ include a general thought about what you're going to do next.\n      Then, for every response, you must include exactly _ONE_ tool call/function call.\n\n      Remember, you should always include a _SINGLE_ tool call/function call and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.\n      If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first tool call, and then after receiving a response you'll be able to issue the second .\n      Note that the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.\n    instance_template: |-\n      We're currently solving the following issue within our repository. Here's the issue text:\n      ISSUE:\n      {{problem_statement}}\n\n      INSTRUCTIONS:\n      Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.\n      Remember, YOU SHOULD ALWAYS INCLUDE EXACTLY ONE TOOL CALL/FUNCTION CALL PER RESPONSE.\n      When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\n      Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with the python command.\n\n      NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\n      IMPORTANT TIPS:\n      1. Always start by trying to replicate the bug that the issues discusses.\n        If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n        Then start trying to fix it.\n        When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n\n        If the bug reproduction script does not print anything when it successfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at the end of the file,\n        so that you can be sure that the script indeed ran fine all the way through.\n\n      2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n      3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.\n\n      4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doesn't work, use the linux 'find' command.\n\n      5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current open file.\n\n      6. When editing files, it is easy to accidentally to write code with incorrect indentation or make other mistakes. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n\n      7. It may be necessary to install the repository from source before you can run code. Please think about how to install the environment from the repository directory if you need to do so.\n\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    next_step_template: |-\n      {{observation}}\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    next_step_no_output_template: |-\n      Your command ran successfully and did not produce any output.\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    demonstration_template: |\n      Here is a demonstration of how to correctly accomplish this task.\n      It is included to show you how to correctly use the interface.\n      You do not need to follow exactly what is done in the demonstration.\n      --- DEMONSTRATION ---\n      {{demonstration}}\n      --- END OF DEMONSTRATION ---\n    demonstrations:\n    - trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__function_calling_replace_from_source/marshmallow-code__marshmallow-1867.traj\n    put_demos_in_history: true\n  tools:\n    env_variables:\n      WINDOW: 100\n      OVERLAP: 2\n    bundles:\n      - path: tools/registry\n      - path: tools/defaults\n      - path: tools/search\n      - path: tools/edit_replace\n      - path: tools/submit\n    enable_bash_tool: true\n    parse_function:\n      type: function_calling\n  history_processors:\n    - type: last_n_observations\n      n: 5\n</code></pre> <p>Currently, there are two main agent classes:</p> <ul> <li><code>DefaultAgentConfig</code>: This is the default agent.</li> <li><code>RetryAgentConfig</code>: A \"meta agent\" that instantiates multiple agents for multiple attempts and then picks the best solution.</li> </ul>"},{"location":"reference/agent_config/#sweagent.agent.agents.RetryAgentConfig","title":"sweagent.agent.agents.RetryAgentConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>agent_configs</code>                 (<code>list[DefaultAgentConfig]</code>)             </li> <li> <code>retry_loop</code>                 (<code>RetryLoopConfig</code>)             </li> <li> <code>type</code>                 (<code>Literal['retry']</code>)             </li> </ul>"},{"location":"reference/agent_config/#sweagent.agent.agents.RetryAgentConfig.agent_configs","title":"agent_configs  <code>pydantic-field</code>","text":"<pre><code>agent_configs: list[DefaultAgentConfig]\n</code></pre>"},{"location":"reference/agent_config/#sweagent.agent.agents.RetryAgentConfig.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str = 'retry_main'\n</code></pre>"},{"location":"reference/agent_config/#sweagent.agent.agents.RetryAgentConfig.retry_loop","title":"retry_loop  <code>pydantic-field</code>","text":"<pre><code>retry_loop: RetryLoopConfig\n</code></pre>"},{"location":"reference/agent_config/#sweagent.agent.agents.RetryAgentConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['retry'] = 'retry'\n</code></pre>"},{"location":"reference/agent_config/#sweagent.agent.agents.DefaultAgentConfig","title":"sweagent.agent.agents.DefaultAgentConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This configuration object specifies the behavior of an agent.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>templates</code>                 (<code>TemplateConfig</code>)             </li> <li> <code>tools</code>                 (<code>ToolConfig</code>)             </li> <li> <code>history_processors</code>                 (<code>list[HistoryProcessor]</code>)             </li> <li> <code>model</code>                 (<code>ModelConfig</code>)             </li> <li> <code>max_requeries</code>                 (<code>int</code>)             </li> <li> <code>action_sampler</code>                 (<code>ActionSamplerConfig | None</code>)             </li> <li> <code>type</code>                 (<code>Literal['default']</code>)             </li> </ul>"},{"location":"reference/agent_config/#sweagent.agent.agents.DefaultAgentConfig.action_sampler","title":"action_sampler  <code>pydantic-field</code>","text":"<pre><code>action_sampler: ActionSamplerConfig | None = None\n</code></pre>"},{"location":"reference/agent_config/#sweagent.agent.agents.DefaultAgentConfig.history_processors","title":"history_processors  <code>pydantic-field</code>","text":"<pre><code>history_processors: list[HistoryProcessor]\n</code></pre>"},{"location":"reference/agent_config/#sweagent.agent.agents.DefaultAgentConfig.max_requeries","title":"max_requeries  <code>pydantic-field</code>","text":"<pre><code>max_requeries: int = 3\n</code></pre> <p>Maximum number of times to requery the model after an error, such as a formatting error, a blocked action, or a bash syntax error.</p>"},{"location":"reference/agent_config/#sweagent.agent.agents.DefaultAgentConfig.model","title":"model  <code>pydantic-field</code>","text":"<pre><code>model: ModelConfig\n</code></pre> <p>Model options.</p>"},{"location":"reference/agent_config/#sweagent.agent.agents.DefaultAgentConfig.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str = 'main'\n</code></pre>"},{"location":"reference/agent_config/#sweagent.agent.agents.DefaultAgentConfig.templates","title":"templates  <code>pydantic-field</code>","text":"<pre><code>templates: TemplateConfig\n</code></pre>"},{"location":"reference/agent_config/#sweagent.agent.agents.DefaultAgentConfig.tools","title":"tools  <code>pydantic-field</code>","text":"<pre><code>tools: ToolConfig\n</code></pre>"},{"location":"reference/agent_config/#sweagent.agent.agents.DefaultAgentConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['default'] = 'default'\n</code></pre>"},{"location":"reference/batch_instances/","title":"Batch instances","text":""},{"location":"reference/batch_instances/#sweagent.run.batch_instances.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = get_logger('swea-config', emoji='\ud83d\udd27')\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.BatchInstanceSourceConfig","title":"BatchInstanceSourceConfig  <code>module-attribute</code>","text":"<pre><code>BatchInstanceSourceConfig = InstancesFromHuggingFace | InstancesFromFile | SWEBenchInstances | ExpertInstancesFromFile\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.AbstractInstanceSource","title":"AbstractInstanceSource","text":"<p>               Bases: <code>ABC</code></p> <p>Anything that adheres to this standard can be used to load instances.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.AbstractInstanceSource.get_instance_configs","title":"get_instance_configs  <code>abstractmethod</code>","text":"<pre><code>get_instance_configs() -&gt; list[EnvironmentConfig]\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.BatchInstance","title":"BatchInstance  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A single instance in a batch of instances. This specifies both the environment configuration and the problem statement.</p> <p>Fields:</p> <ul> <li> <code>env</code>                 (<code>EnvironmentConfig</code>)             </li> <li> <code>problem_statement</code>                 (<code>ProblemStatementConfig</code>)             </li> </ul>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.BatchInstance.env","title":"env  <code>pydantic-field</code>","text":"<pre><code>env: EnvironmentConfig\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.BatchInstance.problem_statement","title":"problem_statement  <code>pydantic-field</code>","text":"<pre><code>problem_statement: ProblemStatementConfig\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SimpleBatchInstance","title":"SimpleBatchInstance  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A simple way to configure a single instance in a batch of instances that all use similar deployment configurations.</p> <p>Predominantly used for benchmarking purposes. Assumes that the repository is already present in the docker container.</p> <p>Fields:</p> <ul> <li> <code>image_name</code>                 (<code>str</code>)             </li> <li> <code>problem_statement</code>                 (<code>str</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>repo_name</code>                 (<code>str</code>)             </li> <li> <code>base_commit</code>                 (<code>str</code>)             </li> <li> <code>extra_fields</code>                 (<code>dict[str, Any]</code>)             </li> </ul>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SimpleBatchInstance.image_name","title":"image_name  <code>pydantic-field</code>","text":"<pre><code>image_name: str\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SimpleBatchInstance.problem_statement","title":"problem_statement  <code>pydantic-field</code>","text":"<pre><code>problem_statement: str\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SimpleBatchInstance.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SimpleBatchInstance.repo_name","title":"repo_name  <code>pydantic-field</code>","text":"<pre><code>repo_name: str = ''\n</code></pre> <p>Specifies the repository to use. If empty, no repository is used. If the string does not contain a slash, it is interpreted as an already existing repository at the root of the docker container. If it contains the word \"github\", it is interpreted as a github repository. Else, it is interpreted as a local repository.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SimpleBatchInstance.base_commit","title":"base_commit  <code>pydantic-field</code>","text":"<pre><code>base_commit: str = 'HEAD'\n</code></pre> <p>Used to reset repo.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SimpleBatchInstance.extra_fields","title":"extra_fields  <code>pydantic-field</code>","text":"<pre><code>extra_fields: dict[str, Any]\n</code></pre> <p>Any additional data to be added to the instance. This data will be available when formatting prompt templates.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SimpleBatchInstance.to_full_batch_instance","title":"to_full_batch_instance","text":"<pre><code>to_full_batch_instance(deployment: DeploymentConfig) -&gt; BatchInstance\n</code></pre> <p>Merge the deployment options into the <code>SimpleBatchInstance</code> object to get a full <code>BatchInstance</code>.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SimpleBatchInstance.from_swe_bench","title":"from_swe_bench  <code>classmethod</code>","text":"<pre><code>from_swe_bench(instance: dict[str, Any]) -&gt; Self\n</code></pre> <p>Convert instances from the classical SWE-bench dataset to the <code>SimpleBatchInstance</code> format.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromFile","title":"InstancesFromFile  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>AbstractInstanceSource</code></p> <p>Load instances from a file.</p> <p>Fields:</p> <ul> <li> <code>path</code>                 (<code>Path</code>)             </li> <li> <code>filter</code>                 (<code>str</code>)             </li> <li> <code>slice</code>                 (<code>str</code>)             </li> <li> <code>shuffle</code>                 (<code>bool</code>)             </li> <li> <code>deployment</code>                 (<code>DeploymentConfig</code>)             </li> <li> <code>simple</code>                 (<code>Literal[True]</code>)             </li> <li> <code>type</code>                 (<code>Literal['file']</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromFile.path","title":"path  <code>pydantic-field</code>","text":"<pre><code>path: Path\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromFile.filter","title":"filter  <code>pydantic-field</code>","text":"<pre><code>filter: str = '.*'\n</code></pre> <p>Regular expression to filter the instances by instance id.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromFile.slice","title":"slice  <code>pydantic-field</code>","text":"<pre><code>slice: str = ''\n</code></pre> <p>Select only a slice of the instances (after filtering by <code>filter</code>). Possible values are stop or start:stop or start:stop:step (i.e., it behaves exactly like python's list slicing <code>list[slice]</code>).</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromFile.shuffle","title":"shuffle  <code>pydantic-field</code>","text":"<pre><code>shuffle: bool = False\n</code></pre> <p>Shuffle the instances (before filtering and slicing).</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromFile.deployment","title":"deployment  <code>pydantic-field</code>","text":"<pre><code>deployment: DeploymentConfig\n</code></pre> <p>Note that the image_name option is overwritten by the images specified in the task instances.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromFile.simple","title":"simple  <code>pydantic-field</code>","text":"<pre><code>simple: Literal[True] = True\n</code></pre> <p>Convenience discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromFile.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['file'] = 'file'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromFile.id","title":"id  <code>property</code> <code>pydantic-field</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromFile.get_instance_configs","title":"get_instance_configs","text":"<pre><code>get_instance_configs() -&gt; list[BatchInstance]\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromHuggingFace","title":"InstancesFromHuggingFace  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>AbstractInstanceSource</code></p> <p>Load instances from HuggingFace.</p> <p>Fields:</p> <ul> <li> <code>dataset_name</code>                 (<code>str</code>)             </li> <li> <code>split</code>                 (<code>str</code>)             </li> <li> <code>filter</code>                 (<code>str</code>)             </li> <li> <code>slice</code>                 (<code>str</code>)             </li> <li> <code>shuffle</code>                 (<code>bool</code>)             </li> <li> <code>deployment</code>                 (<code>DeploymentConfig</code>)             </li> <li> <code>type</code>                 (<code>Literal['huggingface']</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromHuggingFace.dataset_name","title":"dataset_name  <code>pydantic-field</code>","text":"<pre><code>dataset_name: str\n</code></pre> <p>Name of the HuggingFace dataset. Same as when using <code>datasets.load_dataset</code>.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromHuggingFace.split","title":"split  <code>pydantic-field</code>","text":"<pre><code>split: str = 'dev'\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromHuggingFace.filter","title":"filter  <code>pydantic-field</code>","text":"<pre><code>filter: str = '.*'\n</code></pre> <p>Regular expression to filter the instances by instance id.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromHuggingFace.slice","title":"slice  <code>pydantic-field</code>","text":"<pre><code>slice: str = ''\n</code></pre> <p>Select only a slice of the instances (after filtering by <code>filter</code>). Possible values are stop or start:stop or start:stop:step. (i.e., it behaves exactly like python's list slicing <code>list[slice]</code>).</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromHuggingFace.shuffle","title":"shuffle  <code>pydantic-field</code>","text":"<pre><code>shuffle: bool = False\n</code></pre> <p>Shuffle the instances (before filtering and slicing).</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromHuggingFace.deployment","title":"deployment  <code>pydantic-field</code>","text":"<pre><code>deployment: DeploymentConfig\n</code></pre> <p>Deployment configuration. Note that the <code>image_name</code> option is overwritten by the images specified in the task instances.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromHuggingFace.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['huggingface'] = 'huggingface'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromHuggingFace.id","title":"id  <code>property</code> <code>pydantic-field</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.InstancesFromHuggingFace.get_instance_configs","title":"get_instance_configs","text":"<pre><code>get_instance_configs() -&gt; list[BatchInstance]\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances","title":"SWEBenchInstances  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>AbstractInstanceSource</code></p> <p>Load instances from SWE-bench.</p> <p>Fields:</p> <ul> <li> <code>subset</code>                 (<code>Literal['lite', 'verified', 'full']</code>)             </li> <li> <code>split</code>                 (<code>Literal['dev', 'test']</code>)             </li> <li> <code>deployment</code>                 (<code>DeploymentConfig</code>)             </li> <li> <code>type</code>                 (<code>Literal['swe_bench']</code>)             </li> <li> <code>filter</code>                 (<code>str</code>)             </li> <li> <code>slice</code>                 (<code>str</code>)             </li> <li> <code>shuffle</code>                 (<code>bool</code>)             </li> <li> <code>evaluate</code>                 (<code>bool</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances.subset","title":"subset  <code>pydantic-field</code>","text":"<pre><code>subset: Literal['lite', 'verified', 'full'] = 'lite'\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances.split","title":"split  <code>pydantic-field</code>","text":"<pre><code>split: Literal['dev', 'test'] = 'dev'\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances.deployment","title":"deployment  <code>pydantic-field</code>","text":"<pre><code>deployment: DeploymentConfig\n</code></pre> <p>Deployment configuration. Note that the image_name option is overwritten by the images specified in the task instances.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['swe_bench'] = 'swe_bench'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances.filter","title":"filter  <code>pydantic-field</code>","text":"<pre><code>filter: str = '.*'\n</code></pre> <p>Regular expression to filter the instances by instance id.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances.slice","title":"slice  <code>pydantic-field</code>","text":"<pre><code>slice: str = ''\n</code></pre> <p>Select only a slice of the instances (after filtering by <code>filter</code>). Possible values are stop or start:stop or start:stop:step. (i.e., it behaves exactly like python's list slicing <code>list[slice]</code>).</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances.shuffle","title":"shuffle  <code>pydantic-field</code>","text":"<pre><code>shuffle: bool = False\n</code></pre> <p>Shuffle the instances (before filtering and slicing).</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances.evaluate","title":"evaluate  <code>pydantic-field</code>","text":"<pre><code>evaluate: bool = False\n</code></pre> <p>Run sb-cli to evaluate</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances.id","title":"id  <code>property</code> <code>pydantic-field</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.SWEBenchInstances.get_instance_configs","title":"get_instance_configs","text":"<pre><code>get_instance_configs() -&gt; list[BatchInstance]\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.ExpertInstancesFromFile","title":"ExpertInstancesFromFile  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>AbstractInstanceSource</code></p> <p>Load instances from a file. The difference to <code>InstancesFromFile</code> is that the instances are configured as full <code>EnvironmentInstanceConfig</code> objects, i.e., we could specify separate deployment configurations etc.</p> <p>Fields:</p> <ul> <li> <code>path</code>                 (<code>Path</code>)             </li> <li> <code>filter</code>                 (<code>str</code>)             </li> <li> <code>slice</code>                 (<code>str</code>)             </li> <li> <code>shuffle</code>                 (<code>bool</code>)             </li> <li> <code>type</code>                 (<code>Literal['expert_file']</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.ExpertInstancesFromFile.path","title":"path  <code>pydantic-field</code>","text":"<pre><code>path: Path\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.ExpertInstancesFromFile.filter","title":"filter  <code>pydantic-field</code>","text":"<pre><code>filter: str = '.*'\n</code></pre> <p>Regular expression to filter the instances by instance id.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.ExpertInstancesFromFile.slice","title":"slice  <code>pydantic-field</code>","text":"<pre><code>slice: str = ''\n</code></pre> <p>Select only a slice of the instances (after filtering by <code>filter</code>). Possible values are stop or start:stop or start:stop:step. (i.e., it behaves exactly like python's list slicing <code>list[slice]</code>).</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.ExpertInstancesFromFile.shuffle","title":"shuffle  <code>pydantic-field</code>","text":"<pre><code>shuffle: bool = False\n</code></pre> <p>Shuffle the instances (before filtering and slicing).</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.ExpertInstancesFromFile.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['expert_file'] = 'expert_file'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.ExpertInstancesFromFile.id","title":"id  <code>property</code> <code>pydantic-field</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/batch_instances/#sweagent.run.batch_instances.ExpertInstancesFromFile.get_instance_configs","title":"get_instance_configs","text":"<pre><code>get_instance_configs() -&gt; list[BatchInstance]\n</code></pre>"},{"location":"reference/bundle_config/","title":"Tool bundle configuration","text":"<p>Tool bundle configuration</p> <p>This is the page for configuring a tool bundle, not for setting up the tools that are being used for the agent. For the latter, see tools configuration.</p>"},{"location":"reference/bundle_config/#sweagent.tools.bundle.BundleConfig","title":"sweagent.tools.bundle.BundleConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>tools</code>                 (<code>dict[str, dict]</code>)             </li> <li> <code>state_command</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"reference/bundle_config/#sweagent.tools.bundle.BundleConfig.state_command","title":"state_command  <code>pydantic-field</code>","text":"<pre><code>state_command: str | None = None\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.bundle.BundleConfig.tools","title":"tools  <code>pydantic-field</code>","text":"<pre><code>tools: dict[str, dict]\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Command","title":"sweagent.tools.commands.Command  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an executable command with arguments and documentation.</p> <p>A command can be either a simple bash command or a multi-line command terminated by an end marker.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The command name</p> <code>docstring</code> <code>str | None</code> <p>Human readable description of what the command does</p> <code>signature</code> <code>str | None</code> <p>Optional custom signature override</p> <code>end_name</code> <code>str | None</code> <p>For multi-line commands, the terminating marker</p> <code>arguments</code> <code>list[Argument]</code> <p>List of arguments accepted by the command</p> Properties <p>invoke_format: Format string for constructing the full command invocation</p> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>docstring</code>                 (<code>str | None</code>)             </li> <li> <code>signature</code>                 (<code>str | None</code>)             </li> <li> <code>end_name</code>                 (<code>str | None</code>)             </li> <li> <code>arguments</code>                 (<code>list[Argument]</code>)             </li> <li> <code>invoke_format</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_arguments</code> </li> </ul>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Command.arguments","title":"arguments  <code>pydantic-field</code>","text":"<pre><code>arguments: list[Argument] = []\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Command.docstring","title":"docstring  <code>pydantic-field</code>","text":"<pre><code>docstring: str | None\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Command.end_name","title":"end_name  <code>pydantic-field</code>","text":"<pre><code>end_name: str | None = None\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Command.invoke_format","title":"invoke_format  <code>cached</code> <code>property</code> <code>pydantic-field</code>","text":"<pre><code>invoke_format: str\n</code></pre> <p>Gets the format string for invoking this command with arguments.</p> <p>Returns either the custom signature with argument placeholders replaced, or a default format of \"command arg1 arg2 ...\".</p>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Command.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Command.signature","title":"signature  <code>pydantic-field</code>","text":"<pre><code>signature: str | None = None\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Command.get_function_calling_tool","title":"get_function_calling_tool","text":"<pre><code>get_function_calling_tool() -&gt; dict\n</code></pre> <p>Converts this command into an OpenAI function calling tool definition.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Dict containing the OpenAI function schema for this command</p> Source code in <code>sweagent/tools/commands.py</code> <pre><code>def get_function_calling_tool(self) -&gt; dict:\n    \"\"\"Converts this command into an OpenAI function calling tool definition.\n\n    Returns:\n        Dict containing the OpenAI function schema for this command\n    \"\"\"\n    tool = {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": self.name,\n            \"description\": self.docstring or \"\",\n        },\n    }\n    properties = {}\n    required = []\n    if self.arguments:\n        for arg in self.arguments:\n            properties[arg.name] = {\"type\": arg.type, \"description\": arg.description}\n\n            if arg.items:\n                properties[arg.name][\"items\"] = arg.items\n\n            if arg.required:\n                required.append(arg.name)\n\n            # Handle enum if present\n            if arg.enum:\n                properties[arg.name][\"enum\"] = arg.enum\n    tool[\"function\"][\"parameters\"] = {\"type\": \"object\", \"properties\": properties, \"required\": required}\n    return tool\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Command.validate_arguments","title":"validate_arguments  <code>pydantic-validator</code>","text":"<pre><code>validate_arguments() -&gt; Command\n</code></pre> <p>Validates command argument configuration.</p> <p>Checks: - Required arguments come before optional ones - Argument names are unique - Argument names match the pattern - Arguments match the signature</p> <p>Returns:</p> Type Description <code>Command</code> <p>The validated Command instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If validation fails</p> Source code in <code>sweagent/tools/commands.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_arguments(self) -&gt; Command:\n    \"\"\"Validates command argument configuration.\n\n    Checks:\n    - Required arguments come before optional ones\n    - Argument names are unique\n    - Argument names match the pattern\n    - Arguments match the signature\n\n    Returns:\n        The validated Command instance\n\n    Raises:\n        ValueError: If validation fails\n    \"\"\"\n    if not self.arguments:\n        return self\n    found_optional = False\n    for arg in self.arguments:\n        if found_optional and arg.required:\n            msg = f\"Command '{self.name}': Required argument '{arg.name}' cannot come after optional arguments\"\n            raise ValueError(msg)\n        if not arg.required:\n            found_optional = True\n    duplicates = {arg.name for arg in self.arguments if self.arguments.count(arg) &gt; 1}\n    if duplicates:\n        msg = f\"Command '{self.name}': Duplicate argument names: {duplicates}\"\n        raise ValueError(msg)\n    for arg in self.arguments:\n        if not re.match(ARGUMENT_NAME_PATTERN, arg.name):\n            msg = f\"Command '{self.name}': Invalid argument name: '{arg.name}'\"\n            raise ValueError(msg)\n    if (invoke_keys := _extract_keys(self.invoke_format)) != {arg.name for arg in self.arguments}:\n        msg = f\"Command '{self.name}': Argument names ({invoke_keys}) in signature / invoke_format {self.invoke_format!r} do not match argument names\"\n        raise ValueError(msg)\n    return self\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Argument","title":"sweagent.tools.commands.Argument  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>items</code>                 (<code>dict[str, str] | None</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>required</code>                 (<code>bool</code>)             </li> <li> <code>enum</code>                 (<code>list[str] | None</code>)             </li> <li> <code>argument_format</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_argument_format</code>                 \u2192                   <code>argument_format</code> </li> </ul>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Argument.argument_format","title":"argument_format  <code>pydantic-field</code>","text":"<pre><code>argument_format: str = '{{value}}'\n</code></pre> <p>How to invoke the argument in the command. Make sure to use jinja syntax ({{value}}) instead of {value}).</p>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Argument.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Argument.enum","title":"enum  <code>pydantic-field</code>","text":"<pre><code>enum: list[str] | None = None\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Argument.items","title":"items  <code>pydantic-field</code>","text":"<pre><code>items: dict[str, str] | None = None\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Argument.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Argument.required","title":"required  <code>pydantic-field</code>","text":"<pre><code>required: bool\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Argument.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: str\n</code></pre>"},{"location":"reference/bundle_config/#sweagent.tools.commands.Argument.validate_argument_format","title":"validate_argument_format  <code>pydantic-validator</code>","text":"<pre><code>validate_argument_format(value: str) -&gt; str\n</code></pre> Source code in <code>sweagent/tools/commands.py</code> <pre><code>@field_validator(\"argument_format\")\ndef validate_argument_format(cls, value: str) -&gt; str:\n    _warn_probably_wrong_jinja_syntax(value)\n    return value\n</code></pre>"},{"location":"reference/env/","title":"The environment class","text":""},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv","title":"sweagent.environment.swe_env.SWEEnv","text":"<pre><code>SWEEnv(*, deployment: AbstractDeployment, repo: Repo | RepoConfig | None, post_startup_commands: list[str], post_startup_command_timeout: int = 500, hooks: list[EnvHook] | None = None, name: str = 'main')\n</code></pre> <p>This class represents the environment in which we solve the tasks.</p> <p>Parameters:</p> Name Type Description Default <code>deployment</code> <code>AbstractDeployment</code> <p>SWE-ReX deployment instance</p> required <code>repo</code> <code>Repo | RepoConfig | None</code> <p>Repository configuration object, or anything following the <code>Repo</code> protocol</p> required <code>post_startup_commands</code> <code>list[str]</code> <p>Commands to execute before starting the agent</p> required <code>hooks</code> <code>list[EnvHook] | None</code> <p>Environment hooks (used to inject custom functionality) Equivalent to calling <code>add_hook</code> for each hook after initialization.</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of the environment</p> <code>'main'</code> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def __init__(\n    self,\n    *,\n    deployment: AbstractDeployment,\n    repo: Repo | RepoConfig | None,\n    post_startup_commands: list[str],\n    post_startup_command_timeout: int = 500,\n    hooks: list[EnvHook] | None = None,\n    name: str = \"main\",\n):\n    \"\"\"This class represents the environment in which we solve the tasks.\n\n    Args:\n        deployment: SWE-ReX deployment instance\n        repo: Repository configuration object, or anything following the `Repo` protocol\n        post_startup_commands: Commands to execute before starting the agent\n        hooks: Environment hooks (used to inject custom functionality)\n            Equivalent to calling `add_hook` for each hook after initialization.\n        name: Name of the environment\n    \"\"\"\n    super().__init__()\n    self.deployment = deployment\n    self.repo = repo\n    self._post_startup_commands = post_startup_commands\n    self.post_startup_command_timeout = post_startup_command_timeout\n    self.logger = get_logger(\"swea-env\", emoji=\"\ufffd\ufffd\ufffd\")\n    self.name = name\n    self.clean_multi_line_functions = lambda x: x\n    self._chook = CombinedEnvHooks()\n    for hook in hooks or []:\n        self.add_hook(hook)\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.clean_multi_line_functions","title":"clean_multi_line_functions  <code>instance-attribute</code>","text":"<pre><code>clean_multi_line_functions = lambda x: x\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.deployment","title":"deployment  <code>instance-attribute</code>","text":"<pre><code>deployment = deployment\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger('swea-env', emoji='\ufffd\ufffd\ufffd')\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.post_startup_command_timeout","title":"post_startup_command_timeout  <code>instance-attribute</code>","text":"<pre><code>post_startup_command_timeout = post_startup_command_timeout\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.repo","title":"repo  <code>instance-attribute</code>","text":"<pre><code>repo = repo\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.add_hook","title":"add_hook","text":"<pre><code>add_hook(hook: EnvHook) -&gt; None\n</code></pre> <p>Add <code>EnvHook</code> to the environment.</p> <p>This allows to inject custom functionality at different stages of the environment lifecycle, in particular to connect SWE-agent to a new interface (like a GUI).</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def add_hook(self, hook: EnvHook) -&gt; None:\n    \"\"\"Add `EnvHook` to the environment.\n\n    This allows to inject custom functionality at different stages of the environment\n    lifecycle, in particular to connect SWE-agent to a new interface (like a GUI).\n    \"\"\"\n    hook.on_init(env=self)\n    self._chook.add_hook(hook)\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Shutdown SWE-ReX deployment etc.</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"Shutdown SWE-ReX deployment etc.\"\"\"\n    self.logger.info(\"Beginning environment shutdown...\")\n    asyncio.run(self.deployment.stop())\n    self._chook.on_close()\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.communicate","title":"communicate","text":"<pre><code>communicate(input: str, timeout: int | float = 25, *, check: Literal['warn', 'ignore', 'raise'] = 'ignore', error_msg: str = 'Command failed') -&gt; str\n</code></pre> <p>Executes a command in the running shell. The details of this are handled by the SWE-ReX deployment/runtime.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str</code> <p>input to send to container</p> required <code>timeout_duration</code> <p>duration to wait for output</p> required <code>check</code> <code>Literal['warn', 'ignore', 'raise']</code> <p><code>ignore</code>: do not extract exit code (more stable), <code>warn</code>: extract exit code and log error if exit code is non-zero, <code>raise</code>: raise error if exit code is non-zero</p> <code>'ignore'</code> <code>error_msg</code> <code>str</code> <p>error message to raise if the command fails</p> <code>'Command failed'</code> <p>Returns:</p> Name Type Description <code>output</code> <code>str</code> <p>output from container</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def communicate(\n    self,\n    input: str,\n    timeout: int | float = 25,\n    *,\n    check: Literal[\"warn\", \"ignore\", \"raise\"] = \"ignore\",\n    error_msg: str = \"Command failed\",\n) -&gt; str:\n    \"\"\"Executes a command in the running shell. The details of this are handled by\n    the SWE-ReX deployment/runtime.\n\n    Args:\n        input: input to send to container\n        timeout_duration: duration to wait for output\n        check: `ignore`: do not extract exit code (more stable), `warn`: extract exit code and log error if\n            exit code is non-zero, `raise`: raise error if exit code is non-zero\n        error_msg: error message to raise if the command fails\n\n    Returns:\n        output: output from container\n    \"\"\"\n    self.logger.log(logging.TRACE, \"Input:\\n%s\", input)  # type: ignore\n    rex_check = \"silent\" if check else \"ignore\"\n    r = asyncio.run(\n        self.deployment.runtime.run_in_session(BashAction(command=input, timeout=timeout, check=rex_check))\n    )\n    output = r.output\n    self.logger.log(logging.TRACE, \"Output:\\n%s\", output)  # type: ignore\n    if check != \"ignore\" and r.exit_code != 0:\n        self.logger.error(f\"{error_msg}:\\n{output}\")\n        msg = f\"Command {input!r} failed ({r.exit_code=}): {error_msg}\"\n        self.logger.error(msg)\n        if check == \"raise\":\n            self.close()\n            raise RuntimeError(msg)\n    return output\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.execute_command","title":"execute_command","text":"<pre><code>execute_command(command: str, shell: bool = True, check: bool = False, env: dict[str, str] | None = None, cwd: str | None = None) -&gt; None\n</code></pre> <p>Execute a command in the environment independent of the session (i.e., as a subprocess)</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def execute_command(\n    self,\n    command: str,\n    shell: bool = True,\n    check: bool = False,\n    env: dict[str, str] | None = None,\n    cwd: str | None = None,\n) -&gt; None:\n    \"\"\"Execute a command in the environment independent of the session (i.e., as a subprocess)\"\"\"\n    asyncio.run(\n        self.deployment.runtime.execute(RexCommand(command=command, shell=shell, check=check, env=env, cwd=cwd))\n    )\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.from_config","title":"from_config  <code>classmethod</code>","text":"<pre><code>from_config(config: EnvironmentConfig) -&gt; Self\n</code></pre> <p>Create an environment instance from a configuration object. This is the recommended way to create an environment instance, unless you need more flexibility.</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>@classmethod\ndef from_config(cls, config: EnvironmentConfig) -&gt; Self:\n    \"\"\"Create an environment instance from a configuration object.\n    This is the recommended way to create an environment instance, unless you need\n    more flexibility.\n    \"\"\"\n    # Always copy config to avoid shared state between different instances\n    config = config.model_copy(deep=True)\n    return cls(\n        deployment=get_deployment(config.deployment),\n        repo=config.repo,\n        post_startup_commands=config.post_startup_commands,\n        post_startup_command_timeout=config.post_startup_command_timeout,\n        name=config.name,\n    )\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.hard_reset","title":"hard_reset","text":"<pre><code>hard_reset()\n</code></pre> <p>Resets the environment and deployment, i.e., completely restarts the deployment.</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def hard_reset(self):\n    \"\"\"Resets the environment and deployment, i.e., completely restarts the\n    deployment.\n    \"\"\"\n    self.close()\n    self.start()\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.interrupt_session","title":"interrupt_session","text":"<pre><code>interrupt_session()\n</code></pre> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def interrupt_session(self):\n    self.logger.info(\"Interrupting session\")\n    asyncio.run(self.deployment.runtime.run_in_session(BashInterruptAction()))\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.read_file","title":"read_file","text":"<pre><code>read_file(path: str | PurePath, encoding: str | None = None, errors: str | None = None) -&gt; str\n</code></pre> <p>Read file contents from container</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | PurePath</code> <p>Absolute path to file</p> required <code>encoding</code> <code>str | None</code> <p>Encoding to use when reading the file. None means default encoding. This is the same as the <code>encoding</code> argument of <code>Path.read_text()</code></p> <code>None</code> <code>errors</code> <code>str | None</code> <p>Error handling to use when reading the file. None means default error handling. This is the same as the <code>errors</code> argument of <code>Path.read_text()</code></p> <code>None</code> <p>Returns:</p> Name Type Description <code>file_contents</code> <code>str</code> <p>Contents of file as string</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def read_file(self, path: str | PurePath, encoding: str | None = None, errors: str | None = None) -&gt; str:\n    \"\"\"Read file contents from container\n\n    Args:\n        path: Absolute path to file\n        encoding: Encoding to use when reading the file. None means default encoding.\n            This is the same as the `encoding` argument of `Path.read_text()`\n        errors: Error handling to use when reading the file. None means default error handling.\n            This is the same as the `errors` argument of `Path.read_text()`\n\n    Returns:\n        file_contents: Contents of file as string\n    \"\"\"\n    r = asyncio.run(\n        self.deployment.runtime.read_file(ReadFileRequest(path=str(path), encoding=encoding, errors=errors))\n    )\n    return r.content\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the environment to a clean state. Gets called by <code>start</code>, but can also be called independently to reset the environment to a clean state before a new attempt.</p> <p>Returns:</p> Name Type Description <code>observation</code> <p>output from container</p> <code>info</code> <p>additional information (e.g. debugging information)</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def reset(self):\n    \"\"\"Reset the environment to a clean state.\n    Gets called by `start`, but can also be called independently to reset the\n    environment to a clean state before a new attempt.\n\n    Returns:\n        observation: output from container\n        info: additional information (e.g. debugging information)\n    \"\"\"\n    self.communicate(input=\"cd /\", check=\"raise\")\n    self._copy_repo()\n    self._reset_repository()\n    self._chook.on_environment_startup()\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.set_env_variables","title":"set_env_variables","text":"<pre><code>set_env_variables(env_variables: dict[str, str]) -&gt; None\n</code></pre> <p>Set environment variables in the environment.</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def set_env_variables(self, env_variables: dict[str, str]) -&gt; None:\n    \"\"\"Set environment variables in the environment.\"\"\"\n    if not env_variables:\n        self.logger.debug(\"No environment variables to set\")\n        return\n    _env_setters = [f\"export {k}={shlex.quote(str(v))}\" for k, v in env_variables.items()]\n    command = \" &amp;&amp; \".join(_env_setters)\n    self.communicate(command, check=\"raise\")\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start the environment and reset it to a clean state.</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the environment and reset it to a clean state.\"\"\"\n    self._init_deployment()\n    self.reset()\n    for command in self._post_startup_commands:\n        self.communicate(command, check=\"raise\", timeout=self.post_startup_command_timeout)\n</code></pre>"},{"location":"reference/env/#sweagent.environment.swe_env.SWEEnv.write_file","title":"write_file","text":"<pre><code>write_file(path: str | PurePath, content: str) -&gt; None\n</code></pre> <p>Write content to file in container</p> Source code in <code>sweagent/environment/swe_env.py</code> <pre><code>def write_file(self, path: str | PurePath, content: str) -&gt; None:\n    \"\"\"Write content to file in container\"\"\"\n    asyncio.run(self.deployment.runtime.write_file(WriteFileRequest(path=str(path), content=content)))\n</code></pre>"},{"location":"reference/env_config/","title":"Environment configuration","text":"<p>This page documents the configuration objects used to specify the behavior of the environment. To learn about the environment class itself, see the environment class reference page.</p>"},{"location":"reference/env_config/#sweagent.environment.swe_env.EnvironmentConfig","title":"sweagent.environment.swe_env.EnvironmentConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configure data sources and setup instructions for the environment in which we solve the tasks.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>deployment</code>                 (<code>DeploymentConfig</code>)             </li> <li> <code>repo</code>                 (<code>RepoConfig | None</code>)             </li> <li> <code>post_startup_commands</code>                 (<code>list[str]</code>)             </li> <li> <code>post_startup_command_timeout</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/env_config/#sweagent.environment.swe_env.EnvironmentConfig.deployment","title":"deployment  <code>pydantic-field</code>","text":"<pre><code>deployment: DeploymentConfig\n</code></pre> <p>Deployment options.</p>"},{"location":"reference/env_config/#sweagent.environment.swe_env.EnvironmentConfig.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str = 'main'\n</code></pre>"},{"location":"reference/env_config/#sweagent.environment.swe_env.EnvironmentConfig.post_startup_command_timeout","title":"post_startup_command_timeout  <code>pydantic-field</code>","text":"<pre><code>post_startup_command_timeout: int = 500\n</code></pre> <p>Timeout for the post-startup commands. NOTE: The timeout applies to every command in <code>post_startup_commands</code> separately.</p>"},{"location":"reference/env_config/#sweagent.environment.swe_env.EnvironmentConfig.post_startup_commands","title":"post_startup_commands  <code>pydantic-field</code>","text":"<pre><code>post_startup_commands: list[str] = []\n</code></pre> <p>Execute these commands before starting to run the agent but after all other setup steps. They will be executed in the same shell as the agent. Note: Every command is passed as a string, not a list of arguments.</p>"},{"location":"reference/env_config/#sweagent.environment.swe_env.EnvironmentConfig.repo","title":"repo  <code>pydantic-field</code>","text":"<pre><code>repo: RepoConfig | None = None\n</code></pre> <p>Repository options.</p>"},{"location":"reference/exceptions/","title":"Custom exceptions raised by SWE-agent","text":""},{"location":"reference/exceptions/#sweagent.exceptions","title":"exceptions","text":""},{"location":"reference/exceptions/#sweagent.exceptions.ContentPolicyViolationError","title":"ContentPolicyViolationError","text":"<p>Raised when the model response violates a content policy</p>"},{"location":"reference/exceptions/#sweagent.exceptions.ContextWindowExceededError","title":"ContextWindowExceededError","text":"<p>Raised when the context window of a LM is exceeded</p>"},{"location":"reference/exceptions/#sweagent.exceptions.CostLimitExceededError","title":"CostLimitExceededError","text":"<p>Raised when we exceed a cost limit</p>"},{"location":"reference/exceptions/#sweagent.exceptions.FormatError","title":"FormatError","text":"<p>Raised when the model response cannot properly be parsed into thought and actions.</p>"},{"location":"reference/exceptions/#sweagent.exceptions.FunctionCallingFormatError","title":"FunctionCallingFormatError","text":"<pre><code>FunctionCallingFormatError(message: str, error_code: Literal['missing', 'multiple', 'incorrect_args', 'invalid_json', 'invalid_command', 'missing_arg', 'unexpected_arg'], **extra_info: Any)\n</code></pre> <p>Format error exception used by the function calling parser.</p> Source code in <code>sweagent/exceptions.py</code> <pre><code>def __init__(\n    self,\n    message: str,\n    error_code: Literal[\n        \"missing\", \"multiple\", \"incorrect_args\", \"invalid_json\", \"invalid_command\", \"missing_arg\", \"unexpected_arg\"\n    ],\n    **extra_info: Any,\n):\n    super().__init__(message + f\" [error_code={error_code}]\")\n    self.message = message\n    self.extra_info = {\"error_code\": error_code, **extra_info}\n</code></pre>"},{"location":"reference/exceptions/#sweagent.exceptions.FunctionCallingFormatError.extra_info","title":"extra_info  <code>instance-attribute</code>","text":"<pre><code>extra_info = {'error_code': error_code, None: extra_info}\n</code></pre>"},{"location":"reference/exceptions/#sweagent.exceptions.FunctionCallingFormatError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message = message\n</code></pre>"},{"location":"reference/exceptions/#sweagent.exceptions.InstanceCallLimitExceededError","title":"InstanceCallLimitExceededError","text":"<p>Raised when we exceed the per instance call limit</p>"},{"location":"reference/exceptions/#sweagent.exceptions.InstanceCostLimitExceededError","title":"InstanceCostLimitExceededError","text":"<p>Raised when we exceed the cost limit set for one task instance</p>"},{"location":"reference/exceptions/#sweagent.exceptions.ModelConfigurationError","title":"ModelConfigurationError","text":"<p>Raised when the model configuration is invalid/no further retries should be made.</p>"},{"location":"reference/exceptions/#sweagent.exceptions.TotalCostLimitExceededError","title":"TotalCostLimitExceededError","text":"<p>Raised when we exceed the total cost limit</p>"},{"location":"reference/history_processor_config/","title":"History processor configuration","text":"<p>History processors can filter the history/trajectory to query the model. For example, a very simple history processor would be one that strips away old observations to reduce context when querying the model.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.DefaultHistoryProcessor","title":"sweagent.agent.history_processors.DefaultHistoryProcessor  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>Literal['default']</code>)             </li> </ul>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.DefaultHistoryProcessor.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['default'] = 'default'\n</code></pre> <p>Do not change. Used for (de)serialization.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.LastNObservations","title":"sweagent.agent.history_processors.LastNObservations  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Keep the last n observations or remove tagged observations.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>n</code>                 (<code>int</code>)             </li> <li> <code>polling</code>                 (<code>int</code>)             </li> <li> <code>always_remove_output_for_tags</code>                 (<code>set[str]</code>)             </li> <li> <code>always_keep_output_for_tags</code>                 (<code>set[str]</code>)             </li> <li> <code>type</code>                 (<code>Literal['last_n_observations']</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_n</code>                 \u2192                   <code>n</code> </li> </ul>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.LastNObservations.always_keep_output_for_tags","title":"always_keep_output_for_tags  <code>pydantic-field</code>","text":"<pre><code>always_keep_output_for_tags: set[str] = {'keep_output'}\n</code></pre> <p>Any observation with a <code>tags</code> field containing one of these strings will be kept, even if it is not one of the last n observations.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.LastNObservations.always_remove_output_for_tags","title":"always_remove_output_for_tags  <code>pydantic-field</code>","text":"<pre><code>always_remove_output_for_tags: set[str] = {'remove_output'}\n</code></pre> <p>Any observation with a <code>tags</code> field containing one of these strings will be elided, even if it is one of the last n observations.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.LastNObservations.n","title":"n  <code>pydantic-field</code>","text":"<pre><code>n: int\n</code></pre> <p>Number of observations to keep.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.LastNObservations.polling","title":"polling  <code>pydantic-field</code>","text":"<pre><code>polling: int = 1\n</code></pre> <p>How many steps to keep between updating the number of observations to keep. This is useful for caching, as we want to remove more and more messages, but every time we change the history, we need to cache everything again. Effectively, we will now keep between <code>n</code> and <code>n+polling</code> observations.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.LastNObservations.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['last_n_observations'] = 'last_n_observations'\n</code></pre> <p>Do not change. Used for (de)serialization.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.LastNObservations.validate_n","title":"validate_n  <code>pydantic-validator</code>","text":"<pre><code>validate_n(n: int) -&gt; int\n</code></pre> Source code in <code>sweagent/agent/history_processors.py</code> <pre><code>@field_validator(\"n\")\ndef validate_n(cls, n: int) -&gt; int:\n    if n &lt;= 0:\n        msg = \"n must be a positive integer\"\n        raise ValueError(msg)\n    return n\n</code></pre>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.TagToolCallObservations","title":"sweagent.agent.history_processors.TagToolCallObservations  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Adds tags to history items for specific tool calls.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>Literal['tag_tool_call_observations']</code>)             </li> <li> <code>tags</code>                 (<code>set[str]</code>)             </li> <li> <code>function_names</code>                 (<code>set[str]</code>)             </li> </ul>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.TagToolCallObservations.function_names","title":"function_names  <code>pydantic-field</code>","text":"<pre><code>function_names: set[str]\n</code></pre> <p>Only consider observations made by tools with these names.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.TagToolCallObservations.tags","title":"tags  <code>pydantic-field</code>","text":"<pre><code>tags: set[str] = {'keep_output'}\n</code></pre> <p>Add the following tag to all observations matching the search criteria.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.TagToolCallObservations.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['tag_tool_call_observations'] = 'tag_tool_call_observations'\n</code></pre> <p>Do not change. Used for (de)serialization.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.CacheControlHistoryProcessor","title":"sweagent.agent.history_processors.CacheControlHistoryProcessor  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This history processor adds manual cache control marks to the history. Use this when running with anthropic claude.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>Literal['cache_control']</code>)             </li> <li> <code>last_n_messages</code>                 (<code>int</code>)             </li> <li> <code>last_n_messages_offset</code>                 (<code>int</code>)             </li> <li> <code>tagged_roles</code>                 (<code>list[str]</code>)             </li> </ul>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.CacheControlHistoryProcessor.last_n_messages","title":"last_n_messages  <code>pydantic-field</code>","text":"<pre><code>last_n_messages: int = 2\n</code></pre> <p>Add cache control to the last n user messages (and clear it for anything else). In most cases this should be set to 2 (caching for multi-turn conversations). When resampling and running concurrent instances, you want to set it to 1. If set to &lt;= 0, any set cache control will be removed from all messages.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.CacheControlHistoryProcessor.last_n_messages_offset","title":"last_n_messages_offset  <code>pydantic-field</code>","text":"<pre><code>last_n_messages_offset: int = 0\n</code></pre> <p>E.g., set to 1 to start cache control after the second to last user message. This can be useful in rare cases, when you want to modify the last message after we've got the completion and you want to avoid cache mismatch.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.CacheControlHistoryProcessor.tagged_roles","title":"tagged_roles  <code>pydantic-field</code>","text":"<pre><code>tagged_roles: list[str] = ['user', 'tool']\n</code></pre> <p>Only add cache control to messages with these roles.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.CacheControlHistoryProcessor.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['cache_control'] = 'cache_control'\n</code></pre> <p>Do not change. Used for (de)serialization.</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.RemoveRegex","title":"sweagent.agent.history_processors.RemoveRegex  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This history processor can remove arbitrary content from history items</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>remove</code>                 (<code>list[str]</code>)             </li> <li> <code>keep_last</code>                 (<code>int</code>)             </li> <li> <code>type</code>                 (<code>Literal['remove_regex']</code>)             </li> </ul>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.RemoveRegex.keep_last","title":"keep_last  <code>pydantic-field</code>","text":"<pre><code>keep_last: int = 0\n</code></pre> <p>Keep the last n history items unchanged</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.RemoveRegex.remove","title":"remove  <code>pydantic-field</code>","text":"<pre><code>remove: list[str] = ['&lt;diff&gt;.*&lt;/diff&gt;']\n</code></pre> <p>Regex patterns to remove from history items</p>"},{"location":"reference/history_processor_config/#sweagent.agent.history_processors.RemoveRegex.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['remove_regex'] = 'remove_regex'\n</code></pre> <p>Do not change. Used for (de)serialization.</p>"},{"location":"reference/model_config/","title":"Models","text":"<p>Tutorial</p> <p>Please see the model section in the installation guide for an overview of the different models and how to configure them.</p> <p>This page documents the configuration objects used to specify the behavior of a language model (LM).</p> <p>In most cases, you will want to use the <code>GenericAPIModelConfig</code> object.</p>"},{"location":"reference/model_config/#api-lms","title":"API LMs","text":""},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig","title":"sweagent.agent.models.GenericAPIModelConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This configuration object specifies a LM like GPT4 or similar. The model will be served with the help of the <code>litellm</code> library.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>per_instance_cost_limit</code>                 (<code>float</code>)             </li> <li> <code>total_cost_limit</code>                 (<code>float</code>)             </li> <li> <code>per_instance_call_limit</code>                 (<code>int</code>)             </li> <li> <code>temperature</code>                 (<code>float</code>)             </li> <li> <code>top_p</code>                 (<code>float | None</code>)             </li> <li> <code>api_base</code>                 (<code>str | None</code>)             </li> <li> <code>api_version</code>                 (<code>str | None</code>)             </li> <li> <code>api_key</code>                 (<code>SecretStr | None</code>)             </li> <li> <code>stop</code>                 (<code>list[str]</code>)             </li> <li> <code>completion_kwargs</code>                 (<code>dict[str, Any]</code>)             </li> <li> <code>convert_system_to_user</code>                 (<code>bool</code>)             </li> <li> <code>retry</code>                 (<code>RetryConfig</code>)             </li> <li> <code>delay</code>                 (<code>float</code>)             </li> <li> <code>fallbacks</code>                 (<code>list[dict[str, Any]]</code>)             </li> <li> <code>choose_api_key_by_thread</code>                 (<code>bool</code>)             </li> <li> <code>max_input_tokens</code>                 (<code>int | None</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.api_base","title":"api_base  <code>pydantic-field</code>","text":"<pre><code>api_base: str | None = None\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.api_key","title":"api_key  <code>pydantic-field</code>","text":"<pre><code>api_key: SecretStr | None = None\n</code></pre> <p>API key to the model. We recommend using environment variables to set this instead or putting your environment variables in a <code>.env</code> file. You can concatenate more than one key by separating them with <code>:::</code>, e.g., <code>key1:::key2</code>. If field starts with <code>$</code>, it will be interpreted as an environment variable.</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.api_version","title":"api_version  <code>pydantic-field</code>","text":"<pre><code>api_version: str | None = None\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.choose_api_key_by_thread","title":"choose_api_key_by_thread  <code>pydantic-field</code>","text":"<pre><code>choose_api_key_by_thread: bool = True\n</code></pre> <p>Whether to choose the API key based on the thread name (if multiple are configured). This ensures that with run-batch, we use the same API key within a single-thread so that prompt caching still works.</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.completion_kwargs","title":"completion_kwargs  <code>pydantic-field</code>","text":"<pre><code>completion_kwargs: dict[str, Any] = {}\n</code></pre> <p>Additional kwargs to pass to <code>litellm.completion</code></p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.convert_system_to_user","title":"convert_system_to_user  <code>pydantic-field</code>","text":"<pre><code>convert_system_to_user: bool = False\n</code></pre> <p>Whether to convert system messages to user messages. This is useful for models that do not support system messages like o1.</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.delay","title":"delay  <code>pydantic-field</code>","text":"<pre><code>delay: float = 0.0\n</code></pre> <p>Minimum delay before querying (this can help to avoid overusing the API if sharing it with other people).</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.fallbacks","title":"fallbacks  <code>pydantic-field</code>","text":"<pre><code>fallbacks: list[dict[str, Any]] = []\n</code></pre> <p>List of fallbacks to try if the main model fails See https://docs.litellm.ai/docs/completion/reliable_completions#fallbacks-sdk for more information.</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.id","title":"id  <code>property</code> <code>pydantic-field</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.max_input_tokens","title":"max_input_tokens  <code>pydantic-field</code>","text":"<pre><code>max_input_tokens: int | None = None\n</code></pre> <p>If set, this will override the max input tokens for the model that we usually look up from <code>litellm.model_cost</code>. Use this for local models or if you want to set a custom max input token limit. If this value is exceeded, a <code>ContextWindowExceededError</code> will be raised. Set this to 0 to disable this check.</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of the model.</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.per_instance_call_limit","title":"per_instance_call_limit  <code>pydantic-field</code>","text":"<pre><code>per_instance_call_limit: int = 0\n</code></pre> <p>Per instance call limit.</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.per_instance_cost_limit","title":"per_instance_cost_limit  <code>pydantic-field</code>","text":"<pre><code>per_instance_cost_limit: float = 3.0\n</code></pre> <p>Cost limit for every instance (task).</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.retry","title":"retry  <code>pydantic-field</code>","text":"<pre><code>retry: RetryConfig\n</code></pre> <p>Retry configuration: How often to retry after a failure (e.g., from a rate limit) etc.</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.stop","title":"stop  <code>pydantic-field</code>","text":"<pre><code>stop: list[str] = []\n</code></pre> <p>Custom stop sequences</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.temperature","title":"temperature  <code>pydantic-field</code>","text":"<pre><code>temperature: float = 0.0\n</code></pre> <p>Sampling temperature</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.top_p","title":"top_p  <code>pydantic-field</code>","text":"<pre><code>top_p: float | None = 1.0\n</code></pre> <p>Sampling top-p</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.total_cost_limit","title":"total_cost_limit  <code>pydantic-field</code>","text":"<pre><code>total_cost_limit: float = 0.0\n</code></pre> <p>Total cost limit.</p>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.choose_api_key","title":"choose_api_key","text":"<pre><code>choose_api_key() -&gt; str | None\n</code></pre> <p>Chooses an API key based on the API keys explicitly set in this config. If no API keys are set, returns None (which means that the API key will be taken from the environment variables/.env file).</p> Source code in <code>sweagent/agent/models.py</code> <pre><code>def choose_api_key(self) -&gt; str | None:\n    \"\"\"Chooses an API key based on the API keys explicitly set in this config.\n    If no API keys are set, returns None (which means that the API key will be\n    taken from the environment variables/.env file).\n    \"\"\"\n    api_keys = self.get_api_keys()\n    if not api_keys:\n        return None\n    if not self.choose_api_key_by_thread:\n        return random.choice(api_keys)\n    thread_name = threading.current_thread().name\n    if thread_name not in _THREADS_THAT_USED_API_KEYS:\n        _THREADS_THAT_USED_API_KEYS.append(thread_name)\n    thread_idx = _THREADS_THAT_USED_API_KEYS.index(thread_name)\n    key_idx = thread_idx % len(api_keys)\n    get_logger(\"config\", emoji=\"\ud83d\udd27\").debug(\n        f\"Choosing API key {key_idx} for thread {thread_name} (idx {thread_idx})\"\n    )\n    return api_keys[key_idx]\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.GenericAPIModelConfig.get_api_keys","title":"get_api_keys","text":"<pre><code>get_api_keys() -&gt; list[str]\n</code></pre> <p>Returns a list of API keys that were explicitly set in this config. Does not return API keys that were set via environment variables/.env</p> Source code in <code>sweagent/agent/models.py</code> <pre><code>def get_api_keys(self) -&gt; list[str]:\n    \"\"\"Returns a list of API keys that were explicitly set in this config.\n    Does not return API keys that were set via environment variables/.env\n    \"\"\"\n    if self.api_key is None:\n        return []\n    api_key = self.api_key.get_secret_value()\n    if not api_key:\n        return []\n    if api_key.startswith(\"$\"):\n        env_var_name = api_key[1:]\n        api_key = os.getenv(env_var_name, \"\")\n        if not api_key:\n            get_logger(\"swea-config\", emoji=\"\ud83d\udd27\").warning(f\"Environment variable {env_var_name} not set\")\n            return []\n    return api_key.split(\":::\")\n</code></pre>"},{"location":"reference/model_config/#manual-models-for-testing","title":"Manual models for testing","text":"<p>The following two models allow you to test your environment by prompting you for actions. This can also be very useful to create your first demonstrations.</p>"},{"location":"reference/model_config/#sweagent.agent.models.HumanModel","title":"sweagent.agent.models.HumanModel","text":"<pre><code>HumanModel(config: HumanModelConfig, tools: ToolConfig)\n</code></pre> <p>               Bases: <code>AbstractModel</code></p> <p>Model that allows for human-in-the-loop</p> Source code in <code>sweagent/agent/models.py</code> <pre><code>def __init__(self, config: HumanModelConfig, tools: ToolConfig):\n    \"\"\"Model that allows for human-in-the-loop\"\"\"\n    self.logger = get_logger(\"swea-lm\", emoji=\"\ud83e\udd16\")\n    self.config: HumanModelConfig = config\n    self.stats = InstanceStats()\n\n    # Determine which commands require multi-line input\n    self.multi_line_command_endings = {\n        command.name: command.end_name for command in tools.commands if command.end_name is not None\n    }\n    self._readline_histfile = REPO_ROOT / \".swe-agent-human-history\"\n    self._load_readline_history()\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.HumanModel.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config: HumanModelConfig = config\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.HumanModel.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger('swea-lm', emoji='\ud83e\udd16')\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.HumanModel.multi_line_command_endings","title":"multi_line_command_endings  <code>instance-attribute</code>","text":"<pre><code>multi_line_command_endings = {name: _OnD1MyRfor command in commands if end_name is not None}\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.HumanModel.stats","title":"stats  <code>instance-attribute</code>","text":"<pre><code>stats = InstanceStats()\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.HumanModel.query","title":"query","text":"<pre><code>query(history: History, action_prompt: str = '&gt; ', n: int | None = None, **kwargs) -&gt; dict | list[dict]\n</code></pre> <p>Wrapper to separate action prompt from formatting</p> Source code in <code>sweagent/agent/models.py</code> <pre><code>def query(self, history: History, action_prompt: str = \"&gt; \", n: int | None = None, **kwargs) -&gt; dict | list[dict]:\n    \"\"\"Wrapper to separate action prompt from formatting\"\"\"\n    out = []\n    n_samples = n or 1\n    for _ in range(n_samples):\n        try:\n            out.append(self._query(history, action_prompt))\n        except KeyboardInterrupt:\n            print(\"^C (exit with ^D)\")\n            out.append(self.query(history, action_prompt))\n        except EOFError:\n            print(\"\\nGoodbye!\")\n            out.append({\"message\": \"exit\"})\n    if n is None:\n        return out[0]\n    return out\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.HumanThoughtModel","title":"sweagent.agent.models.HumanThoughtModel","text":"<pre><code>HumanThoughtModel(config: HumanModelConfig, tools: ToolConfig)\n</code></pre> <p>               Bases: <code>HumanModel</code></p> Source code in <code>sweagent/agent/models.py</code> <pre><code>def __init__(self, config: HumanModelConfig, tools: ToolConfig):\n    \"\"\"Model that allows for human-in-the-loop\"\"\"\n    self.logger = get_logger(\"swea-lm\", emoji=\"\ud83e\udd16\")\n    self.config: HumanModelConfig = config\n    self.stats = InstanceStats()\n\n    # Determine which commands require multi-line input\n    self.multi_line_command_endings = {\n        command.name: command.end_name for command in tools.commands if command.end_name is not None\n    }\n    self._readline_histfile = REPO_ROOT / \".swe-agent-human-history\"\n    self._load_readline_history()\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.HumanThoughtModel.query","title":"query","text":"<pre><code>query(history: History, **kwargs) -&gt; dict\n</code></pre> <p>Logic for handling user input (both thought + action) to pass to SWEEnv</p> Source code in <code>sweagent/agent/models.py</code> <pre><code>def query(self, history: History, **kwargs) -&gt; dict:\n    \"\"\"Logic for handling user input (both thought + action) to pass to SWEEnv\"\"\"\n    thought_all = \"\"\n    thought = input(\"Thought (end w/ END_THOUGHT): \")\n    while True:\n        if \"END_THOUGHT\" in thought:\n            thought = thought.split(\"END_THOUGHT\")[0]\n            thought_all += thought\n            break\n        thought_all += thought\n        thought = input(\"... \")\n\n    action = super()._query(history, action_prompt=\"Action: \")\n\n    return {\"message\": f\"{thought_all}\\n```\\n{action}\\n```\"}\n</code></pre>"},{"location":"reference/model_config/#replay-model-for-testing-and-demonstrations","title":"Replay model for testing and demonstrations","text":""},{"location":"reference/model_config/#sweagent.agent.models.ReplayModel","title":"sweagent.agent.models.ReplayModel","text":"<pre><code>ReplayModel(config: ReplayModelConfig, tools: ToolConfig)\n</code></pre> <p>               Bases: <code>AbstractModel</code></p> <p>Model used for replaying a trajectory (i.e., taking all the actions for the <code>.traj</code> file and re-issuing them.</p> Source code in <code>sweagent/agent/models.py</code> <pre><code>def __init__(self, config: ReplayModelConfig, tools: ToolConfig):\n    \"\"\"Model used for replaying a trajectory (i.e., taking all the actions for the `.traj` file\n    and re-issuing them.\n    \"\"\"\n    self.config = config\n    self.stats = InstanceStats()\n\n    if not self.config.replay_path.exists():\n        msg = f\"Replay file {self.config.replay_path} not found\"\n        raise FileNotFoundError(msg)\n\n    self._replays = [\n        list(json.loads(x).values())[0] for x in Path(self.config.replay_path).read_text().splitlines(keepends=True)\n    ]\n    self._replay_idx = 0\n    self._action_idx = 0\n    self.use_function_calling = tools.use_function_calling\n    self.submit_command = tools.submit_command\n    self.logger = get_logger(\"swea-lm\", emoji=\"\ud83e\udd16\")\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.ReplayModel.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = config\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.ReplayModel.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger('swea-lm', emoji='\ud83e\udd16')\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.ReplayModel.stats","title":"stats  <code>instance-attribute</code>","text":"<pre><code>stats = InstanceStats()\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.ReplayModel.submit_command","title":"submit_command  <code>instance-attribute</code>","text":"<pre><code>submit_command = submit_command\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.ReplayModel.use_function_calling","title":"use_function_calling  <code>instance-attribute</code>","text":"<pre><code>use_function_calling = use_function_calling\n</code></pre>"},{"location":"reference/model_config/#sweagent.agent.models.ReplayModel.query","title":"query","text":"<pre><code>query(history: History) -&gt; dict\n</code></pre> <p>Logic for tracking which replay action to pass to SWEEnv</p> Source code in <code>sweagent/agent/models.py</code> <pre><code>def query(self, history: History) -&gt; dict:\n    \"\"\"Logic for tracking which replay action to pass to SWEEnv\"\"\"\n    self.stats.api_calls += 1\n    actions = self._replays[self._replay_idx]\n    try:\n        action = actions[self._action_idx]\n    except IndexError:\n        # log error\n        self.logger.error(\"Reached end of replay trajectory without submitting. Submitting now.\")\n        if self.use_function_calling:\n            action = {\n                \"message\": f\"Calling `{self.submit_command}` to submit.\",\n                \"tool_calls\": [\n                    {\n                        \"type\": \"function\",\n                        \"id\": \"call_submit\",\n                        \"function\": {\n                            \"name\": self.submit_command,\n                            \"arguments\": \"{}\",\n                        },\n                    }\n                ],\n            }\n        else:\n            action = f\"```\\n{self.submit_command}\\n```\"\n\n    self._action_idx += 1\n\n    # Assuming `submit` is always last action of replay trajectory\n    if isinstance(action, str) and action == \"submit\":\n        self._next_replay()\n        return {\"message\": action}\n\n    # Handle both dict and string actions\n    if isinstance(action, dict):\n        return action\n    return {\"message\": action}\n</code></pre>"},{"location":"reference/parsers/","title":"Action parsers","text":""},{"location":"reference/parsers/#sweagent.tools.parsing","title":"sweagent.tools.parsing","text":"<p>Our parsers parse output from the LM into thoughts and actions.</p> <p>For example, our most basic parser is the <code>ThoughtActionParser</code>. It expects the model response to be a discussion followed by a command wrapped in backticks like so:</p> <pre><code>Let's look at the files in the current directory.\n\nAction:\n ```\nls -l\n ```\n</code></pre> <p>To use a specific parser, set the <code>parse_function</code> key in your tool config to the <code>type</code> field of the parser.</p> <pre><code>agent:\n    tools:\n        ...\n        parse_function:\n            type: \"thought_action\"\n</code></pre> <p>Or from the command line: <code>--agent.tools.parse_function.type=thought_action</code></p>"},{"location":"reference/parsers/#sweagent.tools.parsing.ParseFunction","title":"ParseFunction  <code>module-attribute</code>","text":"<pre><code>ParseFunction = ActionParser | ThoughtActionParser | ActionOnlyParser | XMLThoughtActionParser | FunctionCallingParser | EditFormat | Identity | JsonParser\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.AbstractParseFunction","title":"AbstractParseFunction","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for parsing functions. We use get to generate the right parser based on the name of the parser.</p>"},{"location":"reference/parsers/#sweagent.tools.parsing.AbstractParseFunction.error_message","title":"error_message  <code>instance-attribute</code>","text":"<pre><code>error_message: str\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.AbstractParseFunction.format_error_template","title":"format_error_template  <code>property</code>","text":"<pre><code>format_error_template\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.ActionOnlyParser","title":"ActionOnlyParser  <code>pydantic-model</code>","text":"<p>               Bases: <code>AbstractParseFunction</code>, <code>BaseModel</code></p> <p>Expects the model response to be a single command.</p> <p>Fields:</p> <ul> <li> <code>error_message</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['action_only']</code>)             </li> </ul>"},{"location":"reference/parsers/#sweagent.tools.parsing.ActionOnlyParser.error_message","title":"error_message  <code>pydantic-field</code>","text":"<pre><code>error_message: str = 'No message found in model response.'\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.ActionOnlyParser.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['action_only'] = 'action_only'\n</code></pre> <p>Type for (de)serialization. Do not change.</p>"},{"location":"reference/parsers/#sweagent.tools.parsing.ActionParser","title":"ActionParser  <code>pydantic-model</code>","text":"<p>               Bases: <code>AbstractParseFunction</code>, <code>BaseModel</code></p> <p>Expects the model response to be a single command. Example: \"ls -l\"</p> <p>Fields:</p> <ul> <li> <code>error_message</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['action']</code>)             </li> </ul>"},{"location":"reference/parsers/#sweagent.tools.parsing.ActionParser.error_message","title":"error_message  <code>pydantic-field</code>","text":"<pre><code>error_message: str = '    The command you provided was not recognized. Please specify one of the commands (+ any necessary arguments) from the following list in your response. Do not include any other text.\\n\\n    COMMANDS:\\n    {command_docs}\\n    '\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.ActionParser.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['action'] = 'action'\n</code></pre> <p>Type for (de)serialization. Do not change.</p>"},{"location":"reference/parsers/#sweagent.tools.parsing.EditFormat","title":"EditFormat  <code>pydantic-model</code>","text":"<p>               Bases: <code>ThoughtActionParser</code>, <code>BaseModel</code></p> <p>Expects the model response to be a discussion followed by a command wrapped in backticks. Example: We'll replace the contents of the current window with the following: <pre><code>import os\nos.listdir()\n</code></pre></p> <p>Fields:</p> <ul> <li> <code>error_message</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['edit_format']</code>)             </li> </ul>"},{"location":"reference/parsers/#sweagent.tools.parsing.EditFormat.error_message","title":"error_message  <code>pydantic-field</code>","text":"<pre><code>error_message: str\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.EditFormat.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['edit_format'] = 'edit_format'\n</code></pre> <p>Type for (de)serialization. Do not change.</p>"},{"location":"reference/parsers/#sweagent.tools.parsing.FunctionCallingParser","title":"FunctionCallingParser  <code>pydantic-model</code>","text":"<p>               Bases: <code>AbstractParseFunction</code>, <code>BaseModel</code></p> <p>Expects the model response to be a LiteLLM tool call.</p> <p>Fields:</p> <ul> <li> <code>error_message</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['function_calling']</code>)             </li> </ul>"},{"location":"reference/parsers/#sweagent.tools.parsing.FunctionCallingParser.error_message","title":"error_message  <code>pydantic-field</code>","text":"<pre><code>error_message: str\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.FunctionCallingParser.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['function_calling'] = 'function_calling'\n</code></pre> <p>Type for (de)serialization. Do not change.</p>"},{"location":"reference/parsers/#sweagent.tools.parsing.Identity","title":"Identity  <code>pydantic-model</code>","text":"<p>               Bases: <code>AbstractParseFunction</code>, <code>BaseModel</code></p> <p>This parser does not do any parsing. It just returns the model response as both the thought and action.</p> <p>Fields:</p> <ul> <li> <code>error_message</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['identity']</code>)             </li> </ul>"},{"location":"reference/parsers/#sweagent.tools.parsing.Identity.error_message","title":"error_message  <code>pydantic-field</code>","text":"<pre><code>error_message: str = '    It seems like something went wrong with your output. Please try again.\\n    '\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.Identity.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['identity'] = 'identity'\n</code></pre> <p>Type for (de)serialization. Do not change.</p>"},{"location":"reference/parsers/#sweagent.tools.parsing.JsonParser","title":"JsonParser  <code>pydantic-model</code>","text":"<p>               Bases: <code>AbstractParseFunction</code>, <code>BaseModel</code></p> <p>Expects the model response to be a JSON object.</p> <p>Fields:</p> <ul> <li> <code>error_message</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['json']</code>)             </li> </ul>"},{"location":"reference/parsers/#sweagent.tools.parsing.JsonParser.error_message","title":"error_message  <code>pydantic-field</code>","text":"<pre><code>error_message: str\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.JsonParser.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['json'] = 'json'\n</code></pre> <p>Type for (de)serialization. Do not change.</p>"},{"location":"reference/parsers/#sweagent.tools.parsing.ThoughtActionParser","title":"ThoughtActionParser  <code>pydantic-model</code>","text":"<p>               Bases: <code>AbstractParseFunction</code>, <code>BaseModel</code></p> <p>Expects the model response to be a discussion followed by a command wrapped in backticks. Example: Let's look at the files in the current directory. <pre><code>ls -l\n</code></pre></p> <p>Fields:</p> <ul> <li> <code>error_message</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['thought_action']</code>)             </li> </ul>"},{"location":"reference/parsers/#sweagent.tools.parsing.ThoughtActionParser.error_message","title":"error_message  <code>pydantic-field</code>","text":"<pre><code>error_message: str\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.ThoughtActionParser.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['thought_action'] = 'thought_action'\n</code></pre> <p>Type for (de)serialization. Do not change.</p>"},{"location":"reference/parsers/#sweagent.tools.parsing.XMLThoughtActionParser","title":"XMLThoughtActionParser  <code>pydantic-model</code>","text":"<p>               Bases: <code>AbstractParseFunction</code>, <code>BaseModel</code></p> <p>Expects the model response to be a discussion followed by a command wrapped in XML tags. Example: Let's look at the files in the current directory.  ls -l </p> <p>Fields:</p> <ul> <li> <code>error_message</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['xml_thought_action']</code>)             </li> </ul>"},{"location":"reference/parsers/#sweagent.tools.parsing.XMLThoughtActionParser.error_message","title":"error_message  <code>pydantic-field</code>","text":"<pre><code>error_message: str\n</code></pre>"},{"location":"reference/parsers/#sweagent.tools.parsing.XMLThoughtActionParser.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['xml_thought_action'] = 'xml_thought_action'\n</code></pre> <p>Type for (de)serialization. Do not change.</p>"},{"location":"reference/problem_statements/","title":"Specifying problems","text":"<p>We currently support the following input types:</p> <ul> <li>A string of text (<code>TextProblemStatement</code>)</li> <li>A path to a file on the local filesystem (<code>FileProblemStatement</code>)</li> <li>A URL to a GitHub issue (<code>GithubIssue</code>)</li> <li>An empty problem statement (<code>EmptyProblemStatement</code>)</li> </ul> <p>With <code>sweagent run</code>, you can specify the problem statement type with the <code>--problem-statement</code> flag. For example:</p> From text<pre><code>--problem-statement.text=\"This is a problem statement\"\n--problem-statement.type=text\n</code></pre> From a file<pre><code>--problem-statement.path=path/to/file.txt\n--problem-statement.type=text_file\n</code></pre> From a GitHub issue<pre><code>--problem-statement.url=https://github.com/org/repo/issues/123\n--problem-statement.type=github_issue\n</code></pre> <p>See below for more details on the configuration options.</p> <p>All of these classes are defined in <code>sweagent.agent.problem_statement</code>.</p>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.problem_statement_from_simplified_input","title":"problem_statement_from_simplified_input","text":"<pre><code>problem_statement_from_simplified_input(*, input: str, type: Literal['text', 'text_file', 'github_issue']) -&gt; ProblemStatementConfig\n</code></pre> <p>Get a problem statement from an <code>input</code> string and a <code>type</code>.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str</code> <p>Url/path/text</p> required <code>type</code> <code>Literal['text', 'text_file', 'github_issue']</code> <p>The type of problem statement</p> required Source code in <code>sweagent/agent/problem_statement.py</code> <pre><code>def problem_statement_from_simplified_input(\n    *, input: str, type: Literal[\"text\", \"text_file\", \"github_issue\"]\n) -&gt; ProblemStatementConfig:\n    \"\"\"Get a problem statement from an `input` string and a `type`.\n\n    Args:\n        input: Url/path/text\n        type: The type of problem statement\n    \"\"\"\n    if type == \"text\":\n        return TextProblemStatement(text=input)\n    elif type == \"text_file\":\n        return FileProblemStatement(path=Path(input))\n    elif type == \"github_issue\":\n        return GithubIssue(github_url=input)\n    else:\n        msg = f\"Unknown problem statement type: {type}\"\n        raise ValueError(msg)\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.TextProblemStatement","title":"TextProblemStatement  <code>pydantic-model</code>","text":"<p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>text</code>                 (<code>str</code>)             </li> <li> <code>extra_fields</code>                 (<code>dict[str, Any]</code>)             </li> <li> <code>type</code>                 (<code>Literal['text']</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.TextProblemStatement.extra_fields","title":"extra_fields  <code>pydantic-field</code>","text":"<pre><code>extra_fields: dict[str, Any]\n</code></pre> <p>Any additional data to be added to the instance. This data will be available when formatting prompt templates.</p>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.TextProblemStatement.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: str = None\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.TextProblemStatement.text","title":"text  <code>pydantic-field</code>","text":"<pre><code>text: str\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.TextProblemStatement.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['text'] = 'text'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.TextProblemStatement.get_extra_fields","title":"get_extra_fields","text":"<pre><code>get_extra_fields() -&gt; dict[str, Any]\n</code></pre> Source code in <code>sweagent/agent/problem_statement.py</code> <pre><code>def get_extra_fields(self) -&gt; dict[str, Any]:\n    return self.extra_fields\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.TextProblemStatement.get_problem_statement","title":"get_problem_statement","text":"<pre><code>get_problem_statement() -&gt; str\n</code></pre> Source code in <code>sweagent/agent/problem_statement.py</code> <pre><code>def get_problem_statement(self) -&gt; str:\n    return self.text\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.FileProblemStatement","title":"FileProblemStatement  <code>pydantic-model</code>","text":"<p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>path</code>                 (<code>Path</code>)             </li> <li> <code>extra_fields</code>                 (<code>dict[str, Any]</code>)             </li> <li> <code>type</code>                 (<code>Literal['text_file']</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.FileProblemStatement.extra_fields","title":"extra_fields  <code>pydantic-field</code>","text":"<pre><code>extra_fields: dict[str, Any]\n</code></pre> <p>Any additional data to be added to the instance. This data will be available when formatting prompt templates.</p>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.FileProblemStatement.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: str = None\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.FileProblemStatement.path","title":"path  <code>pydantic-field</code>","text":"<pre><code>path: Path\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.FileProblemStatement.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['text_file'] = 'text_file'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.FileProblemStatement.get_extra_fields","title":"get_extra_fields","text":"<pre><code>get_extra_fields() -&gt; dict[str, Any]\n</code></pre> Source code in <code>sweagent/agent/problem_statement.py</code> <pre><code>def get_extra_fields(self) -&gt; dict[str, Any]:\n    return self.extra_fields\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.FileProblemStatement.get_problem_statement","title":"get_problem_statement","text":"<pre><code>get_problem_statement() -&gt; str\n</code></pre> Source code in <code>sweagent/agent/problem_statement.py</code> <pre><code>def get_problem_statement(self) -&gt; str:\n    return self.path.read_text()\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.GithubIssue","title":"GithubIssue  <code>pydantic-model</code>","text":"<p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>github_url</code>                 (<code>str</code>)             </li> <li> <code>extra_fields</code>                 (<code>dict[str, Any]</code>)             </li> <li> <code>type</code>                 (<code>Literal['github']</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.GithubIssue.extra_fields","title":"extra_fields  <code>pydantic-field</code>","text":"<pre><code>extra_fields: dict[str, Any]\n</code></pre> <p>Any additional data to be added to the instance. This data will be available when formatting prompt templates.</p>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.GithubIssue.github_url","title":"github_url  <code>pydantic-field</code>","text":"<pre><code>github_url: str\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.GithubIssue.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: str = None\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.GithubIssue.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['github'] = 'github'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.GithubIssue.get_extra_fields","title":"get_extra_fields","text":"<pre><code>get_extra_fields() -&gt; dict[str, Any]\n</code></pre> Source code in <code>sweagent/agent/problem_statement.py</code> <pre><code>def get_extra_fields(self) -&gt; dict[str, Any]:\n    return self.extra_fields\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.GithubIssue.get_problem_statement","title":"get_problem_statement","text":"<pre><code>get_problem_statement() -&gt; str\n</code></pre> Source code in <code>sweagent/agent/problem_statement.py</code> <pre><code>def get_problem_statement(self) -&gt; str:\n    owner, repo, issue_number = _parse_gh_issue_url(self.github_url)\n    return _get_problem_statement_from_github_issue(owner, repo, issue_number, token=os.getenv(\"GITHUB_TOKEN\"))\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.EmptyProblemStatement","title":"EmptyProblemStatement  <code>pydantic-model</code>","text":"<p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['empty']</code>)             </li> </ul>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.EmptyProblemStatement.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.EmptyProblemStatement.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['empty'] = 'empty'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.EmptyProblemStatement.get_extra_fields","title":"get_extra_fields","text":"<pre><code>get_extra_fields() -&gt; dict[str, Any]\n</code></pre> Source code in <code>sweagent/agent/problem_statement.py</code> <pre><code>def get_extra_fields(self) -&gt; dict[str, Any]:\n    return {}\n</code></pre>"},{"location":"reference/problem_statements/#sweagent.agent.problem_statement.EmptyProblemStatement.get_problem_statement","title":"get_problem_statement","text":"<pre><code>get_problem_statement() -&gt; str\n</code></pre> Source code in <code>sweagent/agent/problem_statement.py</code> <pre><code>def get_problem_statement(self) -&gt; str:\n    return \"\"\n</code></pre>"},{"location":"reference/repo/","title":"Configuring repositories","text":"<p>We currently support the following repository types:</p> <ul> <li>A pre-existing repository (<code>PreExistingRepoConfig</code>)</li> <li>A local repository (<code>LocalRepoConfig</code>)</li> <li>A GitHub repository (<code>GithubRepoConfig</code>)</li> </ul> <p>With <code>sweagent run</code>, you can specify the repository type with the <code>--env.repo</code> flag. For example:</p> From a pre-existing repository<pre><code>--env.repo.repo_name=\"testbed\" # (1)!\n--env.repo.type=preexisting\n</code></pre> <ol> <li>Folder name at the root of the deployment</li> </ol> From a local repository<pre><code>--env.repo.path=/path/to/repo\n--env.repo.type=local\n</code></pre> <p>All of these classes are defined in <code>sweagent.environment.repo</code>.</p>"},{"location":"reference/repo/#sweagent.environment.repo.PreExistingRepoConfig","title":"PreExistingRepoConfig  <code>pydantic-model</code>","text":"<p>Use this to specify a repository that already exists on the deployment. This is important because we need to cd to the repo before running the agent.</p> <p>Note: The repository must be at the root of the deployment.</p> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>repo_name</code>                 (<code>str</code>)             </li> <li> <code>base_commit</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['preexisting']</code>)             </li> </ul>"},{"location":"reference/repo/#sweagent.environment.repo.PreExistingRepoConfig.base_commit","title":"base_commit  <code>pydantic-field</code>","text":"<pre><code>base_commit: str = 'HEAD'\n</code></pre> <p>The commit to reset the repository to. The default is HEAD, i.e., the latest commit. You can also set this to a branch name (e.g., <code>dev</code>), a tag (e.g., <code>v0.1.0</code>), or a commit hash (e.g., <code>a4464baca1f</code>). SWE-agent will then start from this commit when trying to solve the problem.</p>"},{"location":"reference/repo/#sweagent.environment.repo.PreExistingRepoConfig.repo_name","title":"repo_name  <code>pydantic-field</code>","text":"<pre><code>repo_name: str\n</code></pre> <p>The repo name (the repository must be located at the root of the deployment).</p>"},{"location":"reference/repo/#sweagent.environment.repo.PreExistingRepoConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['preexisting'] = 'preexisting'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/repo/#sweagent.environment.repo.PreExistingRepoConfig.copy","title":"copy","text":"<pre><code>copy(deployment: AbstractDeployment)\n</code></pre> <p>Does nothing.</p> Source code in <code>sweagent/environment/repo.py</code> <pre><code>def copy(self, deployment: AbstractDeployment):\n    \"\"\"Does nothing.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/repo/#sweagent.environment.repo.LocalRepoConfig","title":"LocalRepoConfig  <code>pydantic-model</code>","text":"<p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>path</code>                 (<code>Path</code>)             </li> <li> <code>base_commit</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>Literal['local']</code>)             </li> <li> <code>repo_name</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/repo/#sweagent.environment.repo.LocalRepoConfig.base_commit","title":"base_commit  <code>pydantic-field</code>","text":"<pre><code>base_commit: str = 'HEAD'\n</code></pre> <p>The commit to reset the repository to. The default is HEAD, i.e., the latest commit. You can also set this to a branch name (e.g., <code>dev</code>), a tag (e.g., <code>v0.1.0</code>), or a commit hash (e.g., <code>a4464baca1f</code>). SWE-agent will then start from this commit when trying to solve the problem.</p>"},{"location":"reference/repo/#sweagent.environment.repo.LocalRepoConfig.path","title":"path  <code>pydantic-field</code>","text":"<pre><code>path: Path\n</code></pre>"},{"location":"reference/repo/#sweagent.environment.repo.LocalRepoConfig.repo_name","title":"repo_name  <code>property</code> <code>pydantic-field</code>","text":"<pre><code>repo_name: str\n</code></pre> <p>Set automatically based on the repository name. Cannot be set.</p>"},{"location":"reference/repo/#sweagent.environment.repo.LocalRepoConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['local'] = 'local'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/repo/#sweagent.environment.repo.LocalRepoConfig.check_valid_repo","title":"check_valid_repo","text":"<pre><code>check_valid_repo() -&gt; Self\n</code></pre> Source code in <code>sweagent/environment/repo.py</code> <pre><code>def check_valid_repo(self) -&gt; Self:\n    try:\n        repo = GitRepo(self.path, search_parent_directories=True)\n    except InvalidGitRepositoryError as e:\n        msg = f\"Could not find git repository at {self.path=}.\"\n        raise ValueError(msg) from e\n    if repo.is_dirty() and \"PYTEST_CURRENT_TEST\" not in os.environ:\n        msg = f\"Local git repository {self.path} is dirty. Please commit or stash changes.\"\n        raise ValueError(msg)\n    return self\n</code></pre>"},{"location":"reference/repo/#sweagent.environment.repo.LocalRepoConfig.copy","title":"copy","text":"<pre><code>copy(deployment: AbstractDeployment)\n</code></pre> Source code in <code>sweagent/environment/repo.py</code> <pre><code>def copy(self, deployment: AbstractDeployment):\n    self.check_valid_repo()\n    asyncio.run(\n        deployment.runtime.upload(UploadRequest(source_path=str(self.path), target_path=f\"/{self.repo_name}\"))\n    )\n    r = asyncio.run(deployment.runtime.execute(Command(command=f\"chown -R root:root {self.repo_name}\", shell=True)))\n    if r.exit_code != 0:\n        msg = f\"Failed to change permissions on copied repository (exit code: {r.exit_code}, stdout: {r.stdout}, stderr: {r.stderr})\"\n        raise RuntimeError(msg)\n</code></pre>"},{"location":"reference/repo/#sweagent.environment.repo.GithubRepoConfig","title":"GithubRepoConfig  <code>pydantic-model</code>","text":"<p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>github_url</code>                 (<code>str</code>)             </li> <li> <code>base_commit</code>                 (<code>str</code>)             </li> <li> <code>clone_timeout</code>                 (<code>float</code>)             </li> <li> <code>type</code>                 (<code>Literal['github']</code>)             </li> <li> <code>repo_name</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/repo/#sweagent.environment.repo.GithubRepoConfig.base_commit","title":"base_commit  <code>pydantic-field</code>","text":"<pre><code>base_commit: str = 'HEAD'\n</code></pre> <p>The commit to reset the repository to. The default is HEAD, i.e., the latest commit. You can also set this to a branch name (e.g., <code>dev</code>), a tag (e.g., <code>v0.1.0</code>), or a commit hash (e.g., <code>a4464baca1f</code>). SWE-agent will then start from this commit when trying to solve the problem.</p>"},{"location":"reference/repo/#sweagent.environment.repo.GithubRepoConfig.clone_timeout","title":"clone_timeout  <code>pydantic-field</code>","text":"<pre><code>clone_timeout: float = 500\n</code></pre> <p>Timeout for git clone operation.</p>"},{"location":"reference/repo/#sweagent.environment.repo.GithubRepoConfig.github_url","title":"github_url  <code>pydantic-field</code>","text":"<pre><code>github_url: str\n</code></pre>"},{"location":"reference/repo/#sweagent.environment.repo.GithubRepoConfig.repo_name","title":"repo_name  <code>property</code> <code>pydantic-field</code>","text":"<pre><code>repo_name: str\n</code></pre>"},{"location":"reference/repo/#sweagent.environment.repo.GithubRepoConfig.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: Literal['github'] = 'github'\n</code></pre> <p>Discriminator for (de)serialization/CLI. Do not change.</p>"},{"location":"reference/repo/#sweagent.environment.repo.GithubRepoConfig.copy","title":"copy","text":"<pre><code>copy(deployment: AbstractDeployment)\n</code></pre> <p>Clones the repository to the sandbox.</p> Source code in <code>sweagent/environment/repo.py</code> <pre><code>def copy(self, deployment: AbstractDeployment):\n    \"\"\"Clones the repository to the sandbox.\"\"\"\n    base_commit = self.base_commit\n    github_token = os.getenv(\"GITHUB_TOKEN\", \"\")\n    url = self._get_url_with_token(github_token)\n    asyncio.run(\n        deployment.runtime.execute(\n            Command(\n                command=\" &amp;&amp; \".join(\n                    (\n                        f\"mkdir {self.repo_name}\",\n                        f\"cd {self.repo_name}\",\n                        \"git init\",\n                        f\"git remote add origin {url}\",\n                        f\"git fetch --depth 1 origin {base_commit}\",\n                        \"git checkout FETCH_HEAD\",\n                        \"cd ..\",\n                    )\n                ),\n                timeout=self.clone_timeout,\n                shell=True,\n                check=True,\n            )\n        ),\n    )\n</code></pre>"},{"location":"reference/repo/#sweagent.environment.repo.repo_from_simplified_input","title":"repo_from_simplified_input","text":"<pre><code>repo_from_simplified_input(*, input: str, base_commit: str = 'HEAD', type: Literal['local', 'github', 'preexisting', 'auto'] = 'auto') -&gt; RepoConfig\n</code></pre> <p>Get repo config from a simplified input.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str</code> <p>Local path or GitHub URL</p> required <code>type</code> <code>Literal['local', 'github', 'preexisting', 'auto']</code> <p>The type of repo. Set to \"auto\" to automatically detect the type (does not work for preexisting repos).</p> <code>'auto'</code> Source code in <code>sweagent/environment/repo.py</code> <pre><code>def repo_from_simplified_input(\n    *, input: str, base_commit: str = \"HEAD\", type: Literal[\"local\", \"github\", \"preexisting\", \"auto\"] = \"auto\"\n) -&gt; RepoConfig:\n    \"\"\"Get repo config from a simplified input.\n\n    Args:\n        input: Local path or GitHub URL\n        type: The type of repo. Set to \"auto\" to automatically detect the type\n            (does not work for preexisting repos).\n    \"\"\"\n    if type == \"local\":\n        return LocalRepoConfig(path=Path(input), base_commit=base_commit)\n    if type == \"github\":\n        return GithubRepoConfig(github_url=input, base_commit=base_commit)\n    if type == \"preexisting\":\n        return PreExistingRepoConfig(repo_name=input, base_commit=base_commit)\n    if type == \"auto\":\n        if input.startswith(\"https://github.com/\"):\n            return GithubRepoConfig(github_url=input, base_commit=base_commit)\n        else:\n            return LocalRepoConfig(path=Path(input), base_commit=base_commit)\n    msg = f\"Unknown repo type: {type}\"\n    raise ValueError(msg)\n</code></pre>"},{"location":"reference/run_batch_config/","title":"Run batch","text":""},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig","title":"sweagent.run.run_batch.RunBatchConfig","text":"<p>               Bases: <code>BaseSettings</code></p>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.agent","title":"agent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>agent: AgentConfig = Field(description='Agent options.')\n</code></pre>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.env_var_path","title":"env_var_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>env_var_path: Path | None = None\n</code></pre> <p>Path to a .env file to load environment variables from.</p>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.instances","title":"instances  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>instances: BatchInstanceSourceConfig = Field(description='Instances to run.')\n</code></pre>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.num_workers","title":"num_workers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_workers: int = Field(default=1)\n</code></pre> <p>Number of parallel workers to use.</p>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.output_dir","title":"output_dir  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_dir: Path = Field(default=Path('DEFAULT'), description='Output directory.')\n</code></pre>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.progress_bar","title":"progress_bar  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>progress_bar: bool = True\n</code></pre> <p>Whether to show a progress bar. Progress bar is never shown for human models. Progress bar is always shown for multi-worker runs.</p>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.raise_exceptions","title":"raise_exceptions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>raise_exceptions: bool = False\n</code></pre> <p>Raise exceptions instead of skipping instances.</p>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.random_delay_multiplier","title":"random_delay_multiplier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>random_delay_multiplier: float = 0.3\n</code></pre> <p>We will wait for a random amount of time between 0 and <code>random_delay_multiplier</code> times the number of workers at the start of each instance. This is to avoid any potential race conditions.</p>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.redo_existing","title":"redo_existing  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>redo_existing: bool = False\n</code></pre> <p>Do not skip instances that already have a trajectory.</p>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.suffix","title":"suffix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>suffix: str = ''\n</code></pre> <p>Suffix to add to the output directory. Only used if <code>output_dir</code> is <code>DEFAULT</code>.</p>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.evaluate_and_redo_existing","title":"evaluate_and_redo_existing","text":"<pre><code>evaluate_and_redo_existing() -&gt; Self\n</code></pre> Source code in <code>sweagent/run/run_batch.py</code> <pre><code>@model_validator(mode=\"after\")\ndef evaluate_and_redo_existing(self) -&gt; Self:\n    if not isinstance(self.instances, SWEBenchInstances):\n        return self\n    if self.instances.evaluate and self.redo_existing:\n        msg = (\n            \"Cannot evaluate and redo existing at the same time. This would cause invalid results, because \"\n            \"after the first merge_preds gives you a preds.json, this file would be submitted to SB-CLI, causing\"\n            \"evaluation of old instances, which could then not be overwritten by the new ones.\"\n        )\n        raise ValueError(msg)\n    return self\n</code></pre>"},{"location":"reference/run_batch_config/#sweagent.run.run_batch.RunBatchConfig.set_default_output_dir","title":"set_default_output_dir","text":"<pre><code>set_default_output_dir() -&gt; None\n</code></pre> Source code in <code>sweagent/run/run_batch.py</code> <pre><code>def set_default_output_dir(self) -&gt; None:\n    # Needs to be called explicitly, because self._config_files will be setup\n    # post-init.\n    if self.output_dir == Path(\"DEFAULT\"):\n        user_id = getpass.getuser()\n        source_id = self.instances.id\n        try:\n            model_id = self.agent.model.id  # type: ignore[attr-defined]\n        except AttributeError:\n            model_id = \"unknown\"\n        config_file = getattr(self, \"_config_files\", [\"no_config\"])[0]\n        if config_file != \"no_config\":\n            config_file = Path(config_file).stem\n        suffix = f\"__{self.suffix}\" if self.suffix else \"\"\n        self.output_dir = Path.cwd() / \"trajectories\" / user_id / f\"{config_file}__{model_id}___{source_id}{suffix}\"\n</code></pre>"},{"location":"reference/run_single_config/","title":"Run single","text":""},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleConfig","title":"sweagent.run.run_single.RunSingleConfig","text":"<p>               Bases: <code>BaseSettings</code></p>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleConfig.actions","title":"actions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>actions: RunSingleActionConfig = Field(default_factory=RunSingleActionConfig)\n</code></pre>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleConfig.agent","title":"agent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>agent: AgentConfig = Field(description='Agent options.')\n</code></pre>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleConfig.env","title":"env  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>env: EnvironmentConfig = Field(default_factory=EnvironmentConfig, description='Environment options.')\n</code></pre>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleConfig.env_var_path","title":"env_var_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>env_var_path: Path | None = None\n</code></pre> <p>Path to a .env file to load environment variables from.</p>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleConfig.output_dir","title":"output_dir  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_dir: Path = Field(default=Path('DEFAULT'), description='Output directory.')\n</code></pre>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleConfig.problem_statement","title":"problem_statement  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>problem_statement: ProblemStatementConfig = Field(default_factory=EmptyProblemStatement, description='Problem statement options.')\n</code></pre>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleConfig.set_default_output_dir","title":"set_default_output_dir","text":"<pre><code>set_default_output_dir() -&gt; None\n</code></pre> Source code in <code>sweagent/run/run_single.py</code> <pre><code>def set_default_output_dir(self) -&gt; None:\n    # Needs to be called explicitly, because self._config_files will be setup\n    # post-init.\n    if self.output_dir == Path(\"DEFAULT\"):\n        user_id = getpass.getuser()\n        problem_id = self.problem_statement.id\n        try:\n            model_id = self.agent.model.id  # type: ignore[attr-defined]\n        except AttributeError:\n            model_id = \"unknown_model\"\n        config_file = getattr(self, \"_config_files\", [\"no_config\"])[0]\n        if isinstance(config_file, Path):\n            config_file = config_file.stem\n        self.output_dir = Path.cwd() / \"trajectories\" / user_id / f\"{config_file}__{model_id}___{problem_id}\"\n</code></pre>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleActionConfig","title":"sweagent.run.run_single.RunSingleActionConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Run real-life actions (opening PRs, etc.) if we can solve the issue.</p> <p>Fields:</p> <ul> <li> <code>open_pr</code>                 (<code>bool</code>)             </li> <li> <code>pr_config</code>                 (<code>OpenPRConfig</code>)             </li> <li> <code>apply_patch_locally</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleActionConfig.apply_patch_locally","title":"apply_patch_locally  <code>pydantic-field</code>","text":"<pre><code>apply_patch_locally: bool = False\n</code></pre>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleActionConfig.open_pr","title":"open_pr  <code>pydantic-field</code>","text":"<pre><code>open_pr: bool = False\n</code></pre>"},{"location":"reference/run_single_config/#sweagent.run.run_single.RunSingleActionConfig.pr_config","title":"pr_config  <code>pydantic-field</code>","text":"<pre><code>pr_config: OpenPRConfig\n</code></pre>"},{"location":"reference/template_config/","title":"Template configuration","text":""},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig","title":"sweagent.agent.agents.TemplateConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This configuration is used to define almost all message templates that are formatted by the agent and sent to the LM.</p> <p>Fields:</p> <ul> <li> <code>system_template</code>                 (<code>str</code>)             </li> <li> <code>instance_template</code>                 (<code>str</code>)             </li> <li> <code>next_step_template</code>                 (<code>str</code>)             </li> <li> <code>next_step_truncated_observation_template</code>                 (<code>str</code>)             </li> <li> <code>max_observation_length</code>                 (<code>int</code>)             </li> <li> <code>next_step_no_output_template</code>                 (<code>str</code>)             </li> <li> <code>strategy_template</code>                 (<code>str | None</code>)             </li> <li> <code>demonstration_template</code>                 (<code>str | None</code>)             </li> <li> <code>demonstrations</code>                 (<code>list[Path]</code>)             </li> <li> <code>put_demos_in_history</code>                 (<code>bool</code>)             </li> <li> <code>shell_check_error_template</code>                 (<code>str</code>)             </li> <li> <code>command_cancelled_timeout_template</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_template_jinja_syntax</code> </li> <li> <code>warn_models_in_history</code> </li> </ul>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.command_cancelled_timeout_template","title":"command_cancelled_timeout_template  <code>pydantic-field</code>","text":"<pre><code>command_cancelled_timeout_template: str = \"The command '{{command}}' was cancelled because it took more than {{timeout}} seconds. Please try a different command that completes more quickly.\"\n</code></pre> <p>Message template for when the agent's command was cancelled because it took too long. Available variables: <code>timeout</code>, <code>command</code></p>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.demonstration_template","title":"demonstration_template  <code>pydantic-field</code>","text":"<pre><code>demonstration_template: str | None = None\n</code></pre>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.demonstrations","title":"demonstrations  <code>pydantic-field</code>","text":"<pre><code>demonstrations: list[Path]\n</code></pre> <p>Paths to demonstrations. If path is not absolute, it is assumed to be relative to the SWE_AGENT_CONFIG_ROOT (if set) or the SWE-agent repository root</p>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.instance_template","title":"instance_template  <code>pydantic-field</code>","text":"<pre><code>instance_template: str = ''\n</code></pre>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.max_observation_length","title":"max_observation_length  <code>pydantic-field</code>","text":"<pre><code>max_observation_length: int = 100000\n</code></pre> <p>Truncate observation to this length if it exceeds it.</p>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.next_step_no_output_template","title":"next_step_no_output_template  <code>pydantic-field</code>","text":"<pre><code>next_step_no_output_template: str = None\n</code></pre> <p>Template for the next step when the last output was empty. Defaults to next_step_template.</p>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.next_step_template","title":"next_step_template  <code>pydantic-field</code>","text":"<pre><code>next_step_template: str = 'Observation: {{observation}}'\n</code></pre>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.next_step_truncated_observation_template","title":"next_step_truncated_observation_template  <code>pydantic-field</code>","text":"<pre><code>next_step_truncated_observation_template: str = 'Observation: {{observation}}&lt;response clipped&gt;&lt;NOTE&gt;Observations should not exceeded {{max_observation_length}} characters. {{elided_chars}} characters were elided. Please try a different command that produces less output or use head/tail/grep/redirect the output to a file. Do not use interactive pagers.&lt;/NOTE&gt;'\n</code></pre> <p>Message template for when the agent's observation was truncated. Available variables: <code>observation</code>, <code>max_observation_length</code>, <code>elided_chars</code></p>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.put_demos_in_history","title":"put_demos_in_history  <code>pydantic-field</code>","text":"<pre><code>put_demos_in_history: bool = False\n</code></pre> <p>If True, add demonstration to history instead of as a single message</p>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.shell_check_error_template","title":"shell_check_error_template  <code>pydantic-field</code>","text":"<pre><code>shell_check_error_template: str = 'Your bash command contained syntax errors and was NOT executed. Please fix the syntax errors and try again. This can be the result of not adhering to the syntax for multi-line commands. Here is the output of `bash -n`:\\n{{bash_stdout}}\\n{{bash_stderr}}'\n</code></pre> <p>Message template for when the agent's bash command contains syntax errors. Available variables: <code>bash_stdout</code>, <code>bash_stderr</code></p>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.strategy_template","title":"strategy_template  <code>pydantic-field</code>","text":"<pre><code>strategy_template: str | None = None\n</code></pre>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.system_template","title":"system_template  <code>pydantic-field</code>","text":"<pre><code>system_template: str = ''\n</code></pre>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.validate_template_jinja_syntax","title":"validate_template_jinja_syntax  <code>pydantic-validator</code>","text":"<pre><code>validate_template_jinja_syntax() -&gt; Self\n</code></pre> Source code in <code>sweagent/agent/agents.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_template_jinja_syntax(self) -&gt; Self:\n    template_fields = [field for field in self.model_fields.keys() if field.endswith(\"_template\")]\n    for field in template_fields:\n        value = getattr(self, field)\n        _warn_probably_wrong_jinja_syntax(value)\n    return self\n</code></pre>"},{"location":"reference/template_config/#sweagent.agent.agents.TemplateConfig.warn_models_in_history","title":"warn_models_in_history  <code>pydantic-validator</code>","text":"<pre><code>warn_models_in_history() -&gt; Self\n</code></pre> Source code in <code>sweagent/agent/agents.py</code> <pre><code>@model_validator(mode=\"after\")\ndef warn_models_in_history(self) -&gt; Self:\n    if self.put_demos_in_history and self.demonstration_template is not None:\n        logger = get_logger(\"swea-config\", emoji=\"\ud83d\udd27\")\n        logger.warning(\"demonstration_template is ignored when put_demos_in_history is True\")\n    return self\n</code></pre>"},{"location":"reference/tools_config/","title":"Tool configuration","text":"<p>This shows how to configure tools for SWE-agent.</p> <p>Tool configuration</p> <p>This is the page for configuring tools for SWE-agent, not for setting up the tools that are being used for the agent. For the latter, see tool bundles.</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig","title":"sweagent.tools.tools.ToolConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>filter</code>                 (<code>ToolFilterConfig</code>)             </li> <li> <code>bundles</code>                 (<code>list[Bundle]</code>)             </li> <li> <code>env_variables</code>                 (<code>dict[str, Any]</code>)             </li> <li> <code>registry_variables</code>                 (<code>dict[str, Any]</code>)             </li> <li> <code>submit_command</code>                 (<code>str</code>)             </li> <li> <code>parse_function</code>                 (<code>ParseFunction</code>)             </li> <li> <code>enable_bash_tool</code>                 (<code>bool</code>)             </li> <li> <code>format_error_template</code>                 (<code>str</code>)             </li> <li> <code>command_docs</code>                 (<code>str</code>)             </li> <li> <code>multi_line_command_endings</code>                 (<code>dict[str, str]</code>)             </li> <li> <code>submit_command_end_name</code>                 (<code>str | None</code>)             </li> <li> <code>reset_commands</code>                 (<code>list[str | list[str]]</code>)             </li> <li> <code>execution_timeout</code>                 (<code>int</code>)             </li> <li> <code>install_timeout</code>                 (<code>int</code>)             </li> <li> <code>total_execution_timeout</code>                 (<code>int</code>)             </li> <li> <code>max_consecutive_execution_timeouts</code>                 (<code>int</code>)             </li> <li> <code>use_function_calling</code>                 (<code>bool</code>)             </li> <li> <code>state_commands</code>                 (<code>list[str]</code>)             </li> <li> <code>commands</code>                 (<code>list[Command]</code>)             </li> <li> <code>tools</code>                 (<code>list[dict]</code>)             </li> </ul>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.bundles","title":"bundles  <code>pydantic-field</code>","text":"<pre><code>bundles: list[Bundle]\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.command_docs","title":"command_docs  <code>pydantic-field</code>","text":"<pre><code>command_docs: str = None\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.commands","title":"commands  <code>cached</code> <code>property</code> <code>pydantic-field</code>","text":"<pre><code>commands: list[Command]\n</code></pre> <p>Read command files and return parsed command objects</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.enable_bash_tool","title":"enable_bash_tool  <code>pydantic-field</code>","text":"<pre><code>enable_bash_tool: bool = True\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.env_variables","title":"env_variables  <code>pydantic-field</code>","text":"<pre><code>env_variables: dict[str, Any] = {}\n</code></pre> <p>Shorthand to set environment variables for the tools, effectively equivalent to adding <code>export VARNAME=value</code> to the <code>reset_commands</code>.</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.execution_timeout","title":"execution_timeout  <code>pydantic-field</code>","text":"<pre><code>execution_timeout: int = 30\n</code></pre> <p>Timeout for executing commands in the environment</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.filter","title":"filter  <code>pydantic-field</code>","text":"<pre><code>filter: ToolFilterConfig\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.format_error_template","title":"format_error_template  <code>pydantic-field</code>","text":"<pre><code>format_error_template: str = None\n</code></pre> <p>Defaults to format_error_template in ParseFunction</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.install_timeout","title":"install_timeout  <code>pydantic-field</code>","text":"<pre><code>install_timeout: int = 300\n</code></pre> <p>Timeout used for each of the installation commands</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.max_consecutive_execution_timeouts","title":"max_consecutive_execution_timeouts  <code>pydantic-field</code>","text":"<pre><code>max_consecutive_execution_timeouts: int = 3\n</code></pre> <p>Maximum number of consecutive execution timeouts before the agent exits.</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.multi_line_command_endings","title":"multi_line_command_endings  <code>pydantic-field</code>","text":"<pre><code>multi_line_command_endings: dict[str, str] = {}\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.parse_function","title":"parse_function  <code>pydantic-field</code>","text":"<pre><code>parse_function: ParseFunction\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.registry_variables","title":"registry_variables  <code>pydantic-field</code>","text":"<pre><code>registry_variables: dict[str, Any] = {}\n</code></pre> <p>Populate the registry with these variables. Will be written out as json in the registry file.</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.reset_commands","title":"reset_commands  <code>pydantic-field</code>","text":"<pre><code>reset_commands: list[str | list[str]] = []\n</code></pre> <p>Commands to reset the environment. They will also be called when we start the environment. Unlike <code>install_commands</code>, these commands are part of the environment state.</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.state_commands","title":"state_commands  <code>cached</code> <code>property</code> <code>pydantic-field</code>","text":"<pre><code>state_commands: list[str]\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.submit_command","title":"submit_command  <code>pydantic-field</code>","text":"<pre><code>submit_command: str = 'submit'\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.submit_command_end_name","title":"submit_command_end_name  <code>pydantic-field</code>","text":"<pre><code>submit_command_end_name: str | None = None\n</code></pre> <p>Commands to install dependencies and tools. These commands are executed in a subprocess and are not part of the environment state.</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.tools","title":"tools  <code>cached</code> <code>property</code> <code>pydantic-field</code>","text":"<pre><code>tools: list[dict]\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.total_execution_timeout","title":"total_execution_timeout  <code>pydantic-field</code>","text":"<pre><code>total_execution_timeout: int = 1800\n</code></pre> <p>Timeout for executing all commands in the environment. Note: Does not interrupt running commands, but will stop the agent for the next step.</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolConfig.use_function_calling","title":"use_function_calling  <code>cached</code> <code>property</code> <code>pydantic-field</code>","text":"<pre><code>use_function_calling: bool\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolFilterConfig","title":"sweagent.tools.tools.ToolFilterConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>blocklist_error_template</code>                 (<code>str</code>)             </li> <li> <code>blocklist</code>                 (<code>list[str]</code>)             </li> <li> <code>blocklist_standalone</code>                 (<code>list[str]</code>)             </li> <li> <code>block_unless_regex</code>                 (<code>dict[str, str]</code>)             </li> </ul>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolFilterConfig.block_unless_regex","title":"block_unless_regex  <code>pydantic-field</code>","text":"<pre><code>block_unless_regex: dict[str, str] = {'radare2': '\\\\b(?:radare2)\\\\b.*\\\\s+-c\\\\s+.*', 'r2': '\\\\b(?:radare2)\\\\b.*\\\\s+-c\\\\s+.*'}\n</code></pre> <p>Block any command that matches one of these names unless it also matches the regex</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolFilterConfig.blocklist","title":"blocklist  <code>pydantic-field</code>","text":"<pre><code>blocklist: list[str] = ['vim', 'vi', 'emacs', 'nano', 'nohup', 'gdb', 'less', 'tail -f', 'python -m venv', 'make']\n</code></pre> <p>Block any command that starts with one of these</p>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolFilterConfig.blocklist_error_template","title":"blocklist_error_template  <code>pydantic-field</code>","text":"<pre><code>blocklist_error_template: str = \"Operation '{{action}}' is not supported by this environment.\"\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.tools.ToolFilterConfig.blocklist_standalone","title":"blocklist_standalone  <code>pydantic-field</code>","text":"<pre><code>blocklist_standalone: list[str] = ['python', 'python3', 'ipython', 'bash', 'sh', '/bin/bash', '/bin/sh', 'nohup', 'vi', 'vim', 'emacs', 'nano', 'su']\n</code></pre> <p>Block any command that matches one of these exactly</p>"},{"location":"reference/tools_config/#sweagent.tools.bundle.Bundle","title":"sweagent.tools.bundle.Bundle  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fields:</p> <ul> <li> <code>path</code>                 (<code>Path</code>)             </li> <li> <code>hidden_tools</code>                 (<code>list[str]</code>)             </li> <li> <code>_config</code>                 (<code>BundleConfig</code>)             </li> <li> <code>state_command</code>                 (<code>str | None</code>)             </li> <li> <code>config</code>                 (<code>BundleConfig</code>)             </li> <li> <code>commands</code>                 (<code>list[Command]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_tools</code> </li> </ul>"},{"location":"reference/tools_config/#sweagent.tools.bundle.Bundle.commands","title":"commands  <code>property</code> <code>pydantic-field</code>","text":"<pre><code>commands: list[Command]\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.bundle.Bundle.config","title":"config  <code>property</code> <code>pydantic-field</code>","text":"<pre><code>config: BundleConfig\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.bundle.Bundle.hidden_tools","title":"hidden_tools  <code>pydantic-field</code>","text":"<pre><code>hidden_tools: list[str]\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.bundle.Bundle.path","title":"path  <code>pydantic-field</code>","text":"<pre><code>path: Path\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.bundle.Bundle.state_command","title":"state_command  <code>property</code> <code>pydantic-field</code>","text":"<pre><code>state_command: str | None\n</code></pre>"},{"location":"reference/tools_config/#sweagent.tools.bundle.Bundle.validate_tools","title":"validate_tools  <code>pydantic-validator</code>","text":"<pre><code>validate_tools()\n</code></pre> Source code in <code>sweagent/tools/bundle.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_tools(self):\n    self.path = _convert_path_to_abspath(self.path)\n    if not self.path.exists():\n        msg = f\"Bundle path '{self.path}' does not exist.\"\n        raise ValueError(msg)\n\n    config_path = self.path / \"config.yaml\"\n    if not config_path.exists():\n        msg = f\"Bundle config file '{config_path}' does not exist.\"\n        raise ValueError(msg)\n\n    config_data = yaml.safe_load(config_path.read_text())\n    self._config = BundleConfig(**config_data)\n\n    invalid_hidden_tools = set(self.hidden_tools) - set(self._config.tools.keys())\n    if invalid_hidden_tools:\n        msg = f\"Hidden tools {invalid_hidden_tools} do not exist in available tools\"\n        raise ValueError(msg)\n    return self\n</code></pre>"},{"location":"usage/","title":"User guides","text":"<p>This part of the documentation covers more details about configuring and developing SWE-agent. Just want to run it? See getting started instead!</p> <ul> <li> <p> Background &amp; goals</p> <p>Learn more about the project goals and academic research.</p> <p> Learn more</p> </li> <li> <p> Command line interface</p> <p>Learn about all the different subcommands of <code>sweagent</code>.</p> <p> Learn more</p> </li> <li> <p> Configuration</p> <p>How to configure SWE-agent.</p> <p> Configuration</p> </li> </ul>"},{"location":"usage/batch_mode/","title":"Batch mode","text":"<p>Running on many issues at once</p> <p>You have used <code>sweagent run</code>. To become a real power user, we'll convert you to <code>sweagent run-batch</code> and you can run on a hundred issues at once.</p> <ul> <li>Please make sure you're familiar with the command line basics.</li> <li>The default examples will be executing code in a Docker sandbox, so make sure you have docker installed (docker troubleshooting).   If you cannot run docker, skim through the examples below and adapt accordingly.</li> </ul>"},{"location":"usage/batch_mode/#a-first-example-swe-bench","title":"A first example: SWE-bench","text":"<p>So you've decided to run SWE-agent on a lot of issues in parallel. Great, the <code>run-batch</code> command is exactly here for that. Let's run on three SWE-bench issues which will be downloaded automatically.</p> <pre><code>sweagent run-batch \\\n    --config config/default.yaml \\\n    --agent.model.name gpt-4o \\\n    --agent.model.per_instance_cost_limit 2.00 \\\n    --instances.type swe_bench \\\n    --instances.subset lite \\\n    --instances.split dev  \\\n    --instances.slice :3 \\\n    --instances.shuffle=True\n</code></pre> <p>Let's look at the options:</p> <ol> <li><code>--instances.type swe_bench</code>: There's a couple of built-in ways to configure instances. This option selects the SWE-bench dataset.</li> <li><code>--instances.subset lite</code>: There's a few datasets provided by the SWE-bench project. Lite is a subset of GitHub issues with a few heuristic filters that makes them more likely to be solvable.</li> <li><code>--instances.split dev</code>: Most datasets have a <code>dev</code> and a <code>test</code> split.</li> <li><code>--instances.slice :3</code>: The <code>--slice</code> option allows you to select a subset of instances from the dataset. It works just the way to pythons <code>list[...]</code> slicing, so you can specify <code>:10</code> to take the first 10 instances, <code>10:20</code> to take the next 10, <code>-10:</code> to take the last 10, or <code>10:20:2</code> to take every second instance in that range.</li> <li> <p><code>--instances.shuffle=True</code>: Shuffle all instances before slicing. This is a deterministic operation, so the same command will always return the same instances in the same order.</p> </li> <li> <p>There's some things that you should recognize: All of the <code>--agent</code> options are available and you can still specify <code>--config</code> files.</p> </li> <li>However, the <code>--problem_statement</code>, <code>--repo</code>, and <code>--env</code> options obviously need to change, because you now want to populate these settings automatically from a source.</li> </ol> <p>This is where the new option comes in: <code>--instances</code>, specifying the instance source together with a few options.</p> <p>Tooltips</p> <p>Click on the  icon in the right margin of the code snippet to see more information about the line.</p> <p>The output should remind you a lot like the output of the hello world tutorial, except for the progress bar at the bottom. Kind of slow, isn't it?</p> <p>All command line options</p> <ul> <li>See <code>RunBatchConfig</code> for an overview of all options.</li> <li>SWE-bench config: <code>SWEBenchInstances</code>.</li> </ul> <p>Evaluating on SWE-bench</p> <p>If you are using <code>sb-cli</code>, you can automatically evaluate on SWE-bench by adding the <code>--evaluate=True</code> flag. This will already submit submissions to <code>sb-cli</code> while you are running, so that you should receive results within a minute of finishing your run.</p>"},{"location":"usage/batch_mode/#running-in-parallel","title":"Running in parallel","text":"<p>Let's speed things up and run on 5 instances at once. Only a single line to change:</p> <pre><code>sweagent run-batch \\\n    --config config/default.yaml \\\n    --agent.model.name gpt-4o \\\n    --num_workers 3 \\\n    --agent.model.per_instance_cost_limit 2.00 \\\n    --instances.type swe_bench \\\n    --instances.subset lite \\\n    --instances.split dev  \\\n    --instances.slice :3 \\\n    --instances.shuffle=True\n</code></pre> <p>You'll see output that looks like this (only with 3 workers instead of 30):</p> SWE-Agent running on 30 SWE-bench instances <p>All command line options</p> <p>See <code>RunBatchConfig</code> for an overview of all options.</p>"},{"location":"usage/batch_mode/#loading-instances-from-a-file","title":"Loading instances from a file","text":"<pre><code>sweagent run-batch \\\n    --config config/default.yaml \\\n    --agent.model.name gpt-4o \\\n    --instances.type file \\\n    --instances.path instances.yaml \\\n    --instances.slice :3 \\\n    --instances.shuffle=True\n</code></pre> <p><code>--instances.path</code> supports <code>.jsonl</code>, <code>.json</code>, and <code>.yaml</code> files.</p> <p>Here'the simplest example of what such a file can look like</p> instances.yaml<pre><code>- image_name: \"python:3.11\"  # (1)!\n  problem_statement: \"A simple test problem\"\n  id: \"simple_test_problem\"\n- image_name: \"python:3.11\"\n  problem_statement: \"Another test problem\"\n  id: \"simple_test_problem_2\"\n</code></pre> <ol> <li>Must be available locally or on dockerhub.</li> </ol> <p>More options</p> <ul> <li>There's a few more fields that you can populate. See <code>SimpleBatchInstances</code> for more information.</li> <li>For all command line options with this instance type, see <code>InstancesFromFile</code>.</li> </ul>"},{"location":"usage/batch_mode/#huggingface-instances","title":"Huggingface instances","text":"<p>If you upload your dataset to Huggingface in a similar style as the example we just saw, you can load it like this:</p> <pre><code>sweagent run-batch \\\n    ...\n    --instances.type huggingface \\\n    --instances.dataset_name \"your_username/your_dataset\" \\\n    --instances.split \"dev\" \\\n    --instances.slice :3 \\\n    --instances.shuffle=True\n</code></pre> <p>All instance options</p> <p>See <code>InstancesFromHuggingFace</code>.</p>"},{"location":"usage/batch_mode/#expert-instances","title":"Expert instances","text":"<p>If this is not enough for your use case, you can also specify a full set of <code>Environment</code>, <code>ProblemStatement</code>, and <code>Repository</code> config objects:</p> <pre><code>sweagent run-batch \\\n    ...\n    --instances.type expert_file \\\n    --instances.path instances.yaml\n</code></pre> <p>where <code>instances.yaml</code> could look like this:</p> instances.yaml<pre><code>- env:\n    deployment:\n      type: docker\n      image: python:3.11\n    repo:\n        type: github\n        github_url: \"https://github.com/swe-agent/test-repo\"\n  problem_statement:\n    type: text\n    text: \"A simple test problem\"\n    id: \"simple_test_problem\"\n- env:\n    deployment:\n      type: docker\n      image: python:3.11\n  problem_statement:\n    type: text\n    text: \"A simple test problem 2\"\n    id: \"simple_test_problem_2\"\n</code></pre> <p>All instance options</p> <p>See <code>ExpertInstances</code>.</p>"},{"location":"usage/batch_mode/#output-files-and-next-steps","title":"Output files and next steps","text":""},{"location":"usage/cl_tutorial/","title":"Command line basics","text":"<p>Command line basics</p> <p>This tutorial walks you through running SWE-agent from the command line.</p> <ul> <li>Please read our hello world tutorial before proceeding.</li> <li>This tutorial focuses on using SWE-agent as a tool to solve individual issues.   Benchmarking SWE-agent is covered separately.   Finally, we have a different tutorial for using SWE-agent for coding challenges.</li> </ul>"},{"location":"usage/cl_tutorial/#a-few-examples","title":"A few examples","text":"<p>Before we start with a more structured explanation of the command line options, here are a few examples that you might find immediately useful:</p> Fix a github issue<pre><code>python run.py \\\n  --agent.model.name=gpt4 \\\n  --agent.model.per_instance_cost_limit=2.00 \\\n  --env.repo.github_url=https://github.com/SWE-agent/test-repo \\\n  --problem_statement.github_url=https://github.com/SWE-agent/test-repo/issues/1\n</code></pre> Work on a github repo with a custom problem statement<pre><code>python run.py \\\n  ...\n  --env.repo.github_url=https://github.com/SWE-agent/test-repo \\\n  --problem_statement.text=\"Hey, can you fix all the bugs?\"\n</code></pre> Fix a bug in a local repository using a custom docker image<pre><code>git clone https://github.com/SWE-agent/test-repo.git\npython run.py \\\n  --agent.model.name=claude-3.5 \\\n  --env.repo.path=test-repo \\\n  --problem_statement.path=test-repo/problem_statements/1.md \\\n  --env.deployment.image=python:3.12\n</code></pre> <ol> <li>Make sure to add anthropic keys (or keys for your model provider) to the environment for this one!</li> <li><code>--env.deployment.image</code> points to the dockerhub image of the same name</li> </ol> <p>For the next example, we will use a cloud-based execution environment instead of using local docker containers. For this, you first need to set up a modal account, install the necessary extra dependencies <code>pip install 'swe-rex[modal]'</code>, then run:</p> Deployment on modal (cloud-based execution)<pre><code>python run.py \\\n  ...\n  --env.deployment.type=modal \\\n  --env.deployment.image=python:3.12\n</code></pre> <p>All options</p> <p>Run <code>python run.py --help</code> to see all available options for <code>run.py</code>. This tutorial will only cover a subset of options.</p>"},{"location":"usage/cl_tutorial/#configuration-files","title":"Configuration files","text":"<p>All configuration options can be specified either in one or more <code>.yaml</code> files, or as command line arguments. For example, our first command can be written as</p> Command lineConfiguration file <pre><code>python run.py --config my_run.yaml\n</code></pre> my_run.yaml<pre><code>agent:\n  model:\n    name: gpt4\n    per_instance_cost_limit: 2.00\nenv:\n  repo:\n    github_url: https://github.com/SWE-agent/test-repo\nproblem_statement:\n  github_url: https://github.com/SWE-agent/test-repo/issues/1\n</code></pre> <p>But we can also split it up into multiple files and additional command line options:</p> Command line<code>agent.yaml</code><code>env.yaml</code> <pre><code>python run.py --config agent.yaml --config env.yaml \\\n    --problem_statement.text=\"Hey, can you fix all the bugs?\"\n</code></pre> agent.yaml<pre><code>agent:\n  model:\n    name: gpt4\n    per_instance_cost_limit: 2.00\n</code></pre> env.yaml<pre><code>env:\n  repo:\n    github_url: https://github.com/SWE-agent/test-repo\n</code></pre> <p>The default config file is <code>config/default.yaml</code>. Let's take a look at it:</p> Example: default config <code>default.yaml</code> <pre><code>agent:\n  templates:\n    system_template: |-\n      SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\n\n      The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time.\n      In addition to typical bash commands, you can also use specific commands to help you navigate and edit files.\n      To call a command, you need to invoke it with a function call/tool call.\n\n      Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.\n\n      For example, if you are looking at this file:\n\n      def fct():\n          print(\"Hello world\")\n\n      and you want to edit the file to read:\n\n      def fct():\n          print(\"Hello\")\n          print(\"world\")\n\n      you search string should be `Hello world` and your replace string should be `\"Hello\"\\n    print(\"world\")`\n      (note the extra spaces before the print statement!).\n\n      You could also get the same result by search for `    print(\"Hello world\")` and replace with `    print(\"Hello\")\\n    print(\"world\")`.\n\n      RESPONSE FORMAT:\n      Your shell prompt is formatted as follows:\n      (Open file: &lt;path&gt;)\n      (Current directory: &lt;cwd&gt;)\n      bash-$\n\n      First, you should _always_ include a general thought about what you're going to do next.\n      Then, for every response, you must include exactly _ONE_ tool call/function call.\n\n      Remember, you should always include a _SINGLE_ tool call/function call and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.\n      If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first tool call, and then after receiving a response you'll be able to issue the second .\n      Note that the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.\n    instance_template: |-\n      We're currently solving the following issue within our repository. Here's the issue text:\n      ISSUE:\n      {{problem_statement}}\n\n      INSTRUCTIONS:\n      Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.\n      Remember, YOU SHOULD ALWAYS INCLUDE EXACTLY ONE TOOL CALL/FUNCTION CALL PER RESPONSE.\n      When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\n      Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with the python command.\n\n      NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\n      IMPORTANT TIPS:\n      1. Always start by trying to replicate the bug that the issues discusses.\n        If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n        Then start trying to fix it.\n        When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n\n        If the bug reproduction script does not print anything when it successfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at the end of the file,\n        so that you can be sure that the script indeed ran fine all the way through.\n\n      2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n      3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.\n\n      4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doesn't work, use the linux 'find' command.\n\n      5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current open file.\n\n      6. When editing files, it is easy to accidentally to write code with incorrect indentation or make other mistakes. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n\n      7. It may be necessary to install the repository from source before you can run code. Please think about how to install the environment from the repository directory if you need to do so.\n\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    next_step_template: |-\n      {{observation}}\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    next_step_no_output_template: |-\n      Your command ran successfully and did not produce any output.\n      (Open file: {{open_file}})\n      (Current directory: {{working_dir}})\n      bash-$\n    demonstration_template: |\n      Here is a demonstration of how to correctly accomplish this task.\n      It is included to show you how to correctly use the interface.\n      You do not need to follow exactly what is done in the demonstration.\n      --- DEMONSTRATION ---\n      {{demonstration}}\n      --- END OF DEMONSTRATION ---\n    demonstrations:\n    - trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__function_calling_replace_from_source/marshmallow-code__marshmallow-1867.traj\n    put_demos_in_history: true\n  tools:\n    env_variables:\n      WINDOW: 100\n      OVERLAP: 2\n    bundles:\n      - path: tools/registry\n      - path: tools/defaults\n      - path: tools/search\n      - path: tools/edit_replace\n      - path: tools/submit\n    enable_bash_tool: true\n    parse_function:\n      type: function_calling\n  history_processors:\n    - type: last_n_observations\n      n: 5\n</code></pre> <p>As you can see, this is where all the templates are defined!</p> <p>This file is also loaded when no other <code>--config</code> options are specified. So to make sure that we get the default templates in the above examples with <code>--config</code>, we should have added</p> <pre><code>--config config/default.yaml\n</code></pre> <p>in addition to all the other <code>--config</code> options for the two examples above.</p>"},{"location":"usage/cl_tutorial/#problem-statements-and-union-types","title":"Problem statements and union types","text":"<p>Operating in batch mode: Running on SWE-bench and other benchmark sets</p> <p>If you want to run SWE-agent in batch mode on SWE-bench or another whole evaluation set, see batch mode. This tutorial focuses on using SWE-agent on individual issues.</p> <p>We've already seen a few examples of how to specify the problem to solve, namely</p> <pre><code>--problem_statement.data_path /path/to/problem.md\n--problem_statement.repo_path /path/to/repo\n--problem_statement.text=\"...\"\n</code></pre> <p>Each of these types of problems can have specific configuration options.</p> <p>To understand how this works, we'll need to understand union types. Running <code>sweagent run</code> builds up a configuration object that essentially looks like this:</p> <pre><code>agent: AgentConfig\nenv: EnvironmentConfig\nproblem_statement: TextProblemStatement | GithubIssue | FileProblemStatement  # (1)!\n</code></pre> <ol> <li>This is a union type, meaning that the problem statement can be one of the three types.</li> </ol> <p>Each of these configuration objects has its own set of options:</p> <ul> <li><code>GithubIssue</code></li> <li><code>TextProblemStatement</code></li> <li><code>FileProblemStatement</code></li> </ul> <p>So how do we know which configuration object to initialize? It's simple: Each of these types has a different set of required options (e.g., <code>github_url</code> is required for <code>GithubIssue</code>, but not for <code>TextProblemStatement</code>). SWE-agent will automatically select the correct configuration object based on the command line options you provide.</p> <p>However, you can also explicitly specify the type of problem statement you want to use by adding a <code>--problem_statement.type</code> option.</p> <p>Union type errors</p> <p>If you ever ran a SWE-agent command and got a very long error message about various configuration options not working, it is because for union types. If everything works correctly, we try to initialize every option until we find the one that works based on your inputs (for example stopping at <code>TextProblemStatement</code> if you provided a <code>--problem_statement.text</code>). However, if none of them work, we throw an error which then tells you why we cannot initialize any of the types (so it will tell you that <code>github_url</code> is required for <code>GithubIssue</code>, even though you might not even have tried to work on a GitHub issue).</p> <p>Example union type errors   Example union type errors <p>This is the output of running</p> <pre><code>sweagent run --problem_statement.path=\"test\" --problem_statement.github_url=\"asdf\"\n</code></pre> <p><pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Validation error                                                                                                  \u2502\n\u2502                                                                                                                   \u2502\n\u2502 The following errors are raised by Pydantic, trying to instantiate the configuration based on                     \u2502\n\u2502 the merged configuration dictionary (see above).                                                                  \u2502\n\u2502                                                                                                                   \u2502\n\u2502 Every new indented block corresponds to a different error from Pydantic.                                          \u2502\n\u2502 The first line of each block is the attribute that failed validation, the following lines are the error messages. \u2502\n\u2502                                                                                                                   \u2502\n\u2502 If you see many lines of errors, there are probably different ways to instantiate the same object (a union type). \u2502\n\u2502 For example, there are different deployments with different options each. Pydantic is then trying                 \u2502\n\u2502 one after the other and reporting the failures for each of them.                                                  \u2502\n\u2502                                                                                                                   \u2502\n\u2502 8 validation errors for RunSingleConfig                                                                           \u2502\n\u2502 agent.model                                                                                                       \u2502\n\u2502   Field required }, input_type=dict]                                                                              \u2502\n\u2502     For further information visit https://errors.pydantic.dev/2.9/v/missing                                       \u2502\n\u2502 problem_statement.TextProblemStatement.text                                                                       \u2502\n\u2502   Field required                                                                                                  \u2502\n\u2502     For further information visit https://errors.pydantic.dev/2.9/v/missing                                       \u2502\n\u2502 problem_statement.TextProblemStatement.path                                                                       \u2502\n\u2502   Extra inputs are not permitted                                                                                  \u2502\n\u2502     For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden                               \u2502\n\u2502 problem_statement.TextProblemStatement.github_url                                                                 \u2502\n\u2502   Extra inputs are not permitted                                                                                  \u2502\n\u2502     For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden                               \u2502\n\u2502 problem_statement.GithubIssue.path                                                                                \u2502\n\u2502   Extra inputs are not permitted                                                                                  \u2502\n\u2502     For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden                               \u2502\n\u2502 problem_statement.EmptyProblemStatement.path                                                                      \u2502\n\u2502   Extra inputs are not permitted                                                                                  \u2502\n\u2502     For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden                               \u2502\n\u2502 problem_statement.EmptyProblemStatement.github_url                                                                \u2502\n\u2502   Extra inputs are not permitted                                                                                  \u2502\n\u2502     For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden                               \u2502\n\u2502 problem_statement.FileProblemStatement.github_url                                                                 \u2502\n\u2502   Extra inputs are not permitted                                                                                  \u2502\n\u2502     For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> </p> <p>If you want to read more about how this works, check out the pydantic docs.</p>"},{"location":"usage/cl_tutorial/#specifying-the-repository","title":"Specifying the repository","text":"<p>The repository can be specified in a few different ways:</p> <pre><code>--env.repo.github_url=https://github.com/SWE-agent/test-repo\n--env.repo.path=/path/to/repo\n</code></pre> <p>Again, those are union types. See here for all the options:</p> <ul> <li><code>GithubRepoConfig</code>: Pull a repository from GitHub.</li> <li><code>LocalRepoConfig</code>: Copies a repository from your local filesystem to the docker container.</li> <li><code>PreExistingRepoConfig</code>: If you want to use a repository that already exists on the docker container.</li> </ul>"},{"location":"usage/cl_tutorial/#configuring-the-environment","title":"Configuring the environment","text":"<p>We mainly recommend you to build a docker image with all the dependencies you need and then use that with <code>--env.deployment.image</code>. In addition, you can also execute additional commands before starting the agent with <code>env.post_startup_commands</code>, which takes a list of commands, e.g.,</p> <pre><code>sweagent run \\\n    --agent.model.name=claude-3-5-sonnet-20241022 \\\n    --env.post_startup_commands='[\"pip install flake8\"]' \\\n    ...\n</code></pre> <p>Note the list syntax that is passed as a string using single ticks <code>'</code>. This is particularly important for <code>zsh</code> where <code>[</code>, <code>]</code> have special meaning.</p> <p>Here's an example of a custom docker environment (it's also available in the repo as <code>docker/tiny_test.Dockerfile</code>):</p> tiny_test.Dockerfile<pre><code>FROM python:3.11.10-bullseye  # (1)!\n\nARG DEBIAN_FRONTEND=noninteractive  # (2)!\nENV TZ=Etc/UTC  # (3)!\n\nWORKDIR /\n\n# SWE-ReX will always attempt to install its server into your docker container\n# however, this takes a couple of seconds. If we already provide it in the image,\n# this is much faster.\nRUN pip install pipx\nRUN pipx install swe-rex  # (4)!\nRUN pipx ensurepath  # (5)!\n\nRUN pip install flake8  # (6)!\n\nSHELL [\"/bin/bash\", \"-c\"]\n# This is where pipx installs things\nENV PATH=\"$PATH:/root/.local/bin/\"  # (7)!\n</code></pre> <p>Click on the  icon in the right margin of the code snippet to see more information about the lines.</p> <ol> <li>This is the base image.</li> <li>This is to avoid any interactive prompts from the package manager.</li> <li>Again, this avoids interactive prompts</li> <li>SWE-ReX is our execution backend. We start a small server within the container, which receives    commands from the agent and executes them.</li> <li>This ensures that the path where pipx installs things is in the <code>$PATH</code> variable.</li> <li>This is to install flake8, which is used by some of our edit tools.</li> <li>Unfortunately, step 5 sometimes still doesn't properly add the SWE-ReX server to the <code>$PATH</code> variable.    So we do it here again.</li> </ol>"},{"location":"usage/cl_tutorial/#taking-actions","title":"Taking actions","text":"<ul> <li>You can use <code>--actions.apply_patch_locally</code> to have SWE-agent apply successful solution attempts to local files.</li> <li>Alternatively, when running on a GitHub issue, you can have the agent automatically open a PR if the issue has been solved by supplying the <code>--actions.open_pr</code> flag.   Please use this feature responsibly (on your own repositories or after careful consideration).</li> </ul> <p>All action options</p> <p>See <code>RunSingleActionConfig</code> for all action options.</p> <p>Alternatively, you can always retrieve the patch that was generated by SWE-agent. Watch out for the following message in the log:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83c\udf89 Submission successful \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 SWE-agent has produced a patch that it believes will solve the issue you submitted! \u2502\n\u2502 Use the code snippet below to inspect or apply it!                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>And follow the instructions below it:</p> <pre><code> # The patch has been saved to your local filesystem at:\n PATCH_FILE_PATH='/Users/.../patches/05917d.patch'\n # Inspect it:\n cat \"${PATCH_FILE_PATH}\"\n # Apply it to a local repository:\n cd &lt;your local repo root&gt;\n git apply \"${PATCH_FILE_PATH}\"\n</code></pre> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"usage/cli/","title":"SWE-agent command line interface","text":"<p>All functionality of SWE-agent is available via the command line interface via the <code>sweagent</code> command.</p> <p>You can run <code>sweagent --help</code> to see all subcommands.</p> <p>Here's a quick overview:</p> <ul> <li><code>sweagent run</code>: Run SWE-agent on a single issue (tutorial).</li> <li><code>sweagent run-batch</code>: Run SWE-agent on a batch of issues (tutorial).</li> <li><code>sweagent run-replay</code>: Replay a trajectory file or a demo file. This means that you take all actions from the trajectory and execute them again in the environment. Useful for debugging your tools or for building new demonstrations.</li> <li><code>sweagent inspect</code> or <code>sweagent i</code>: Open the command line inspector (more information).</li> <li><code>sweagent inspector</code> or <code>sweagent I</code>: Open the web-based inspector (more information).</li> <li><code>sweagent merge-preds</code>: Merge multiple prediction files into a single file.</li> <li><code>sweagent traj-to-demo</code>: Convert a trajectory file to an easy to edit demo file (more information on demonstrations).</li> </ul>"},{"location":"usage/coding_challenges/","title":"Using SWE-agent for coding challenges","text":"<p>Overview</p> <p>It is easy to use SWE-agent to do more than just software engineering. For example, you can tell SWE-agent to work on leetcode or humaneval-style problems.</p> <p>Required reading: Please first skim hello world and command line basics to get familiar with the basics of SWE-agent.</p> <p>Let's start with a new problem statement. For this, put the problem you want to solve in a markdown file <code>problem.md</code>, for example:</p> Example leetcode challenge  This is the first missing positive challenge.  <pre><code>Given an unsorted integer array nums.\nReturn the smallest positive integer that is not present in nums.\n\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.\n\n## Example 1:\n\n&gt; Input: nums = [1,2,0]\n&gt; Output: 3\n&gt; Explanation: The numbers in the range [1,2] are all in the array.\n\n## Example 2:\n\n&gt; Input: nums = [3,4,-1,1]\n&gt; Output: 2\n&gt; Explanation: 1 is in the array but 2 is missing.\n\n## Example 3:\n\n&gt; Input: nums = [7,8,9,11,12]\n&gt; Output: 1\n&gt; Explanation: The smallest positive integer 1 is missing.\n\n## Constraints:\n\n1 &lt;= nums.length &lt;= 105\n-231 &lt;= nums[i] &lt;= 231 - 1\n</code></pre> <p>Second, we need to specify a repository wherein SWE-agent will work. Here, we can simply create an empty folder (outside of the SWE-agent repository), and add a <code>main.py</code> file</p> <pre><code>mkdir empty\ngit init\ntouch main.py\necho \"*.pyc\" &gt; .gitignore  # to avoid binary files in patches\n</code></pre> <p>and potentially populate it with the problem stub</p> <pre><code>from typing import List\n\n\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -&gt; int:\n</code></pre> <p>Tip</p> <p>If some imports (like <code>List</code>) are missing in the problem stub (like they oftentimes do in leetcode) , SWE-agent will figure out how to add them. However, it might take an additional step, so it's best to directly specify them.</p> <p>Make sure to commit all changes to the repository:</p> <pre><code>git add . &amp;&amp; git commit -m \"Add problem stub\"\n</code></pre> <p>Now, we can let SWE-agent solve the problem:</p> <pre><code>sweagent run \\\n    --config config/coding_challenge.yaml \\\n    --problem_statement.path=problem.md \\\n    --env.repo.path=/path/to/empty \\\n    --agent.model.name=gpt4 \\\n    --agent.model.per_instance_cost_limit 3.0 \\\n    --actions.apply_patch_locally=True\n</code></pre> Output <pre><code>2024-07-12 17:57:39,876 INFO \ud83d\udcd9 Arguments: actions:\n  apply_patch_locally: false\n  open_pr: false\n  push_gh_repo_url: ''\n  skip_if_commits_reference_issue: true\nagent:\n  config:\n    _commands:\n    - arguments:\n        line_number:\n          description: the line number to move the window to (if not provided, the\n            window will start at the top of the file)\n          required: false\n          type: integer\n        path:\n          description: the path to the file to open\n          required: true\n          type: string\n      code: 'open() {    if [ -z \"$1\" ]    then        echo \"Usage: open &lt;file&gt;\"        return    fi    #\n        Check if the second argument is provided    if [ -n \"$2\" ]; then        #\n        Check if the provided argument is a valid number        if ! [[ $2 =~ ^[0-9]+$\n        ]]; then            echo \"Usage: open &lt;file&gt; [&lt;line_number&gt;]\"            echo\n        \"Error: &lt;line_number&gt; must be a number\"            return  # Exit if the line\n        number is not valid        fi        local max_line=$(awk ''END {print NR}''\n        $1)        if [ $2 -gt $max_line ]; then            echo \"Warning: &lt;line_number&gt;\n        ($2) is greater than the number of lines in the file ($max_line)\"            echo\n        \"Warning: Setting &lt;line_number&gt; to $max_line\"            local line_number=$(jq\n        -n \"$max_line\")  # Set line number to max if greater than max        elif\n        [ $2 -lt 1 ]; then            echo \"Warning: &lt;line_number&gt; ($2) is less than\n        1\"            echo \"Warning: Setting &lt;line_number&gt; to 1\"            local\n        line_number=$(jq -n \"1\")  # Set line number to 1 if less than 1        else            local\n        OFFSET=$(jq -n \"$WINDOW/6\" | jq ''floor'')            local line_number=$(jq\n        -n \"[$2 + $WINDOW/2 - $OFFSET, 1] | max | floor\")        fi    else        local\n        line_number=$(jq -n \"$WINDOW/2\")  # Set default line number if not provided    fi    if\n        [ -f \"$1\" ]; then        export CURRENT_FILE=$(realpath $1)        export\n        CURRENT_LINE=$line_number        _constrain_line        _print    elif [ -d\n        \"$1\" ]; then        echo \"Error: $1 is a directory. You can only open files.\n        Use cd or ls to navigate directories.\"    else        echo \"File $1 not found\"    fi}'\n      docstring: opens the file at the given path in the editor. If line_number is\n        provided, the window will be move to include that line\n      end_name: null\n      name: open\n      signature: open &lt;path&gt; [&lt;line_number&gt;]\n    - arguments:\n        line_number:\n          description: the line number to move the window to\n          required: true\n          type: integer\n      code: 'goto() {    if [ $# -gt 1 ]; then        echo \"goto allows only one line\n        number at a time.\"        return    fi    if [ -z \"$CURRENT_FILE\" ]    then        echo\n        \"No file open. Use the open command first.\"        return    fi    if [ -z\n        \"$1\" ]    then        echo \"Usage: goto &lt;line&gt;\"        return    fi    if\n        ! [[ $1 =~ ^[0-9]+$ ]]    then        echo \"Usage: goto &lt;line&gt;\"        echo\n        \"Error: &lt;line&gt; must be a number\"        return    fi    local max_line=$(awk\n        ''END {print NR}'' $CURRENT_FILE)    if [ $1 -gt $max_line ]    then        echo\n        \"Error: &lt;line&gt; must be less than or equal to $max_line\"        return    fi    local\n        OFFSET=$(jq -n \"$WINDOW/6\" | jq ''floor'')    export CURRENT_LINE=$(jq -n\n        \"[$1 + $WINDOW/2 - $OFFSET, 1] | max | floor\")    _constrain_line    _print}'\n      docstring: moves the window to show &lt;line_number&gt;\n      end_name: null\n      name: goto\n      signature: goto &lt;line_number&gt;\n    - arguments: null\n      code: scroll_down() {    if [ -z \"$CURRENT_FILE\" ]    then        echo \"No file\n        open. Use the open command first.\"        return    fi    export CURRENT_LINE=$(jq\n        -n \"$CURRENT_LINE + $WINDOW - $OVERLAP\")    _constrain_line    _print    _scroll_warning_message}\n      docstring: moves the window down {WINDOW} lines\n      end_name: null\n      name: scroll_down\n      signature: scroll_down\n    - arguments: null\n      code: scroll_up() {    if [ -z \"$CURRENT_FILE\" ]    then        echo \"No file\n        open. Use the open command first.\"        return    fi    export CURRENT_LINE=$(jq\n        -n \"$CURRENT_LINE - $WINDOW + $OVERLAP\")    _constrain_line    _print    _scroll_warning_message}\n      docstring: moves the window down {WINDOW} lines\n      end_name: null\n      name: scroll_up\n      signature: scroll_up\n    - arguments:\n        filename:\n          description: the name of the file to create\n          required: true\n          type: string\n      code: \"create() {    if [ -z \\\"$1\\\" ]; then        echo \\\"Usage: create &lt;filename&gt;\\\"\\\n        \\        return    fi    # Check if the file already exists    if [ -e \\\"\\\n        $1\\\" ]; then        echo \\\"Error: File '$1' already exists.\\\"\\t\\topen \\\"$1\\\"\\\n        \\        return    fi    # Create the file an empty new line    printf \\\"\\\\\\\n        n\\\" &gt; \\\"$1\\\"    # Use the existing open command to open the created file \\\n        \\   open \\\"$1\\\"}\"\n      docstring: creates and opens a new file with the given name\n      end_name: null\n      name: create\n      signature: create &lt;filename&gt;\n    - arguments: null\n      code: 'submit() {    cd $ROOT    # Check if the patch file exists and is non-empty    if\n        [ -s \"/root/test.patch\" ]; then        # Apply the patch in reverse        git\n        apply -R &lt; \"/root/test.patch\"    fi    git add -A    git diff --cached &gt; model.patch    echo\n        \"&lt;&lt;SUBMISSION||\"    cat model.patch    echo \"||SUBMISSION&gt;&gt;\"}'\n      docstring: submits your current code and terminates the session\n      end_name: null\n      name: submit\n      signature: submit\n    - arguments:\n        dir:\n          description: the directory to search in (if not provided, searches in the\n            current directory)\n          required: false\n          type: string\n        search_term:\n          description: the term to search for\n          required: true\n          type: string\n      code: 'search_dir() {    if [ $# -eq 1 ]; then        local search_term=\"$1\"        local\n        dir=\"./\"    elif [ $# -eq 2 ]; then        local search_term=\"$1\"        if\n        [ -d \"$2\" ]; then            local dir=\"$2\"        else            echo \"Directory\n        $2 not found\"            return        fi    else        echo \"Usage: search_dir\n        &lt;search_term&gt; [&lt;dir&gt;]\"        return    fi    dir=$(realpath \"$dir\")    local\n        matches=$(find \"$dir\" -type f ! -path ''*/.*'' -exec grep -nIH -- \"$search_term\"\n        {} + | cut -d: -f1 | sort | uniq -c)    # if no matches, return    if [ -z\n        \"$matches\" ]; then        echo \"No matches found for \\\"$search_term\\\" in $dir\"        return    fi    #\n        Calculate total number of matches    local num_matches=$(echo \"$matches\" |\n        awk ''{sum+=$1} END {print sum}'')    # calculate total number of files matched    local\n        num_files=$(echo \"$matches\" | wc -l | awk ''{$1=$1; print $0}'')    # if num_files\n        is &gt; 100, print an error    if [ $num_files -gt 100 ]; then        echo \"More\n        than $num_files files matched for \\\"$search_term\\\" in $dir. Please narrow\n        your search.\"        return    fi    echo \"Found $num_matches matches for\n        \\\"$search_term\\\" in $dir:\"    echo \"$matches\" | awk ''{$2=$2; gsub(/^\\.+\\/+/,\n        \"./\", $2); print $2 \" (\"$1\" matches)\"}''    echo \"End of matches for \\\"$search_term\\\"\n        in $dir\"}'\n      docstring: searches for search_term in all files in dir. If dir is not provided,\n        searches in the current directory\n      end_name: null\n      name: search_dir\n      signature: search_dir &lt;search_term&gt; [&lt;dir&gt;]\n    - arguments:\n        file:\n          description: the file to search in (if not provided, searches in the current\n            open file)\n          required: false\n          type: string\n        search_term:\n          description: the term to search for\n          required: true\n          type: string\n      code: 'search_file() {    # Check if the first argument is provided    if [\n        -z \"$1\" ]; then        echo \"Usage: search_file &lt;search_term&gt; [&lt;file&gt;]\"        return    fi    #\n        Check if the second argument is provided    if [ -n \"$2\" ]; then        #\n        Check if the provided argument is a valid file        if [ -f \"$2\" ]; then            local\n        file=\"$2\"  # Set file if valid        else            echo \"Usage: search_file\n        &lt;search_term&gt; [&lt;file&gt;]\"            echo \"Error: File name $2 not found. Please\n        provide a valid file name.\"            return  # Exit if the file is not valid        fi    else        #\n        Check if a file is open        if [ -z \"$CURRENT_FILE\" ]; then            echo\n        \"No file open. Use the open command first.\"            return  # Exit if no\n        file is open        fi        local file=\"$CURRENT_FILE\"  # Set file to the\n        current open file    fi    local search_term=\"$1\"    file=$(realpath \"$file\")    #\n        Use grep to directly get the desired formatted output    local matches=$(grep\n        -nH -- \"$search_term\" \"$file\")    # Check if no matches were found    if [\n        -z \"$matches\" ]; then        echo \"No matches found for \\\"$search_term\\\" in\n        $file\"        return    fi    # Calculate total number of matches    local\n        num_matches=$(echo \"$matches\" | wc -l | awk ''{$1=$1; print $0}'')    # calculate\n        total number of lines matched    local num_lines=$(echo \"$matches\" | cut -d:\n        -f1 | sort | uniq | wc -l | awk ''{$1=$1; print $0}'')    # if num_lines is\n        &gt; 100, print an error    if [ $num_lines -gt 100 ]; then        echo \"More\n        than $num_lines lines matched for \\\"$search_term\\\" in $file. Please narrow\n        your search.\"        return    fi    # Print the total number of matches and\n        the matches themselves    echo \"Found $num_matches matches for \\\"$search_term\\\"\n        in $file:\"    echo \"$matches\" | cut -d: -f1-2 | sort -u -t: -k2,2n | while\n        IFS=: read -r filename line_number; do        echo \"Line $line_number:$(sed\n        -n \"${line_number}p\" \"$file\")\"    done    echo \"End of matches for \\\"$search_term\\\"\n        in $file\"}'\n      docstring: searches for search_term in file. If file is not provided, searches\n        in the current open file\n      end_name: null\n      name: search_file\n      signature: search_file &lt;search_term&gt; [&lt;file&gt;]\n    - arguments:\n        dir:\n          description: the directory to search in (if not provided, searches in the\n            current directory)\n          required: false\n          type: string\n        file_name:\n          description: the name of the file to search for\n          required: true\n          type: string\n      code: 'find_file() {    if [ $# -eq 1 ]; then        local file_name=\"$1\"        local\n        dir=\"./\"    elif [ $# -eq 2 ]; then        local file_name=\"$1\"        if\n        [ -d \"$2\" ]; then            local dir=\"$2\"        else            echo \"Directory\n        $2 not found\"            return        fi    else        echo \"Usage: find_file\n        &lt;file_name&gt; [&lt;dir&gt;]\"        return    fi    dir=$(realpath \"$dir\")    local\n        matches=$(find \"$dir\" -type f -name \"$file_name\")    # if no matches, return    if\n        [ -z \"$matches\" ]; then        echo \"No matches found for \\\"$file_name\\\" in\n        $dir\"        return    fi    # Calculate total number of matches    local\n        num_matches=$(echo \"$matches\" | wc -l | awk ''{$1=$1; print $0}'')    echo\n        \"Found $num_matches matches for \\\"$file_name\\\" in $dir:\"    echo \"$matches\"\n        | awk ''{print $0}''}'\n      docstring: finds all files with the given name in dir. If dir is not provided,\n        searches in the current directory\n      end_name: null\n      name: find_file\n      signature: find_file &lt;file_name&gt; [&lt;dir&gt;]\n    - arguments:\n        end_line:\n          description: the line number to end the edit at (inclusive)\n          required: true\n          type: integer\n        replacement_text:\n          description: the text to replace the current selection with\n          required: true\n          type: string\n        start_line:\n          description: the line number to start the edit at\n          required: true\n          type: integer\n      code: 'edit() {    if [ -z \"$CURRENT_FILE\" ]    then        echo ''No file open.\n        Use the `open` command first.''        return    fi    local start_line=\"$(echo\n        $1: | cut -d: -f1)\"    local end_line=\"$(echo $1: | cut -d: -f2)\"    if [\n        -z \"$start_line\" ] || [ -z \"$end_line\" ]    then        echo \"Usage: edit\n        &lt;start_line&gt;:&lt;end_line&gt;\"        return    fi    local re=''^[0-9]+$''    if\n        ! [[ $start_line =~ $re ]]; then        echo \"Usage: edit &lt;start_line&gt;:&lt;end_line&gt;\"        echo\n        \"Error: start_line must be a number\"        return    fi    if ! [[ $end_line\n        =~ $re ]]; then        echo \"Usage: edit &lt;start_line&gt;:&lt;end_line&gt;\"        echo\n        \"Error: end_line must be a number\"        return    fi    local linter_cmd=\"flake8\n        --isolated --select=F821,F822,F831,E111,E112,E113,E999,E902\"    local linter_before_edit=$($linter_cmd\n        \"$CURRENT_FILE\" 2&gt;&amp;1)    # Bash array starts at 0, so let''s adjust    local\n        start_line=$((start_line - 1))    local end_line=$((end_line))    local line_count=0    local\n        replacement=()    while IFS= read -r line    do        replacement+=(\"$line\")        ((line_count++))    done    #\n        Create a backup of the current file    cp \"$CURRENT_FILE\" \"/root/$(basename\n        \"$CURRENT_FILE\")_backup\"    # Read the file line by line into an array    mapfile\n        -t lines &lt; \"$CURRENT_FILE\"    local new_lines=(\"${lines[@]:0:$start_line}\"\n        \"${replacement[@]}\" \"${lines[@]:$((end_line))}\")    # Write the new stuff\n        directly back into the original file    printf \"%s\\n\" \"${new_lines[@]}\" &gt;|\n        \"$CURRENT_FILE\"    # Run linter    if [[ $CURRENT_FILE == *.py ]]; then        _lint_output=$($linter_cmd\n        \"$CURRENT_FILE\" 2&gt;&amp;1)        lint_output=$(_split_string \"$_lint_output\" \"$linter_before_edit\"\n        \"$((start_line+1))\" \"$end_line\" \"$line_count\")    else        # do nothing        lint_output=\"\"    fi    #\n        if there is no output, then the file is good    if [ -z \"$lint_output\" ];\n        then        export CURRENT_LINE=$start_line        _constrain_line        _print        echo\n        \"File updated. Please review the changes and make sure they are correct (correct\n        indentation, no duplicate lines, etc). Edit the file again if necessary.\"    else        echo\n        \"Your proposed edit has introduced new syntax error(s). Please read this error\n        message carefully and then retry editing the file.\"        echo \"\"        echo\n        \"ERRORS:\"        echo \"$lint_output\"        echo \"\"        # Save original\n        values        original_current_line=$CURRENT_LINE        original_window=$WINDOW        #\n        Update values        export CURRENT_LINE=$(( (line_count / 2) + start_line\n        )) # Set to \"center\" of edit        export WINDOW=$((line_count + 10)) # Show\n        +/- 5 lines around edit        echo \"This is how your edit would have looked\n        if applied\"        echo \"-------------------------------------------------\"        _constrain_line        _print        echo\n        \"-------------------------------------------------\"        echo \"\"        #\n        Restoring CURRENT_FILE to original contents.        cp \"/root/$(basename \"$CURRENT_FILE\")_backup\"\n        \"$CURRENT_FILE\"        export CURRENT_LINE=$(( ((end_line - start_line + 1)\n        / 2) + start_line ))        export WINDOW=$((end_line - start_line + 10))        echo\n        \"This is the original code before your edit\"        echo \"-------------------------------------------------\"        _constrain_line        _print        echo\n        \"-------------------------------------------------\"        # Restore original\n        values        export CURRENT_LINE=$original_current_line        export WINDOW=$original_window        echo\n        \"Your changes have NOT been applied. Please fix your edit command and try\n        again.\"        echo \"You either need to 1) Specify the correct start/end line\n        arguments or 2) Correct your edit code.\"        echo \"DO NOT re-run the same\n        failed edit command. Running it again will lead to the same error.\"    fi    #\n        Remove backup file    rm -f \"/root/$(basename \"$CURRENT_FILE\")_backup\"}'\n      docstring: replaces lines &lt;start_line&gt; through &lt;end_line&gt; (inclusive) with the\n        given text in the open file. The replacement text is terminated by a line\n        with only end_of_edit on it. All of the &lt;replacement text&gt; will be entered,\n        so make sure your indentation is formatted properly. Python files will be\n        checked for syntax errors after the edit. If the system detects a syntax error,\n        the edit will not be executed. Simply try to edit the file again, but make\n        sure to read the error message and modify the edit command you issue accordingly.\n        Issuing the same command a second time will just lead to the same error message\n        again.\n      end_name: end_of_edit\n      name: edit\n      signature: |-\n        edit &lt;start_line&gt;:&lt;end_line&gt;\n        &lt;replacement_text&gt;\n        end_of_edit\n    _subroutines: {}\n    blocklist:\n    - vim\n    - vi\n    - emacs\n    - nano\n    - nohup\n    - git\n    blocklist_error_template: Interactive operation '{name}' is not supported by this\n      environment\n    blocklist_standalone:\n    - python\n    - python3\n    - ipython\n    - bash\n    - sh\n    - exit\n    - /bin/bash\n    - /bin/sh\n    - nohup\n    - vi\n    - vim\n    - emacs\n    - nano\n    command_docs: |+\n      open:\n        docstring: opens the file at the given path in the editor. If line_number is provided, the window will be move to include that line\n        signature: open &lt;path&gt; [&lt;line_number&gt;]\n        arguments:\n          - path (string) [required]: the path to the file to open\n          - line_number (integer) [optional]: the line number to move the window to (if not provided, the window will start at the top of the file)\n\n      goto:\n        docstring: moves the window to show &lt;line_number&gt;\n        signature: goto &lt;line_number&gt;\n        arguments:\n          - line_number (integer) [required]: the line number to move the window to\n\n      scroll_down:\n        docstring: moves the window down 100 lines\n        signature: scroll_down\n\n      scroll_up:\n        docstring: moves the window down 100 lines\n        signature: scroll_up\n\n      create:\n        docstring: creates and opens a new file with the given name\n        signature: create &lt;filename&gt;\n        arguments:\n          - filename (string) [required]: the name of the file to create\n\n      submit:\n        docstring: submits your current code and terminates the session\n        signature: submit\n\n      search_dir:\n        docstring: searches for search_term in all files in dir. If dir is not provided, searches in the current directory\n        signature: search_dir &lt;search_term&gt; [&lt;dir&gt;]\n        arguments:\n          - search_term (string) [required]: the term to search for\n          - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\n\n      search_file:\n        docstring: searches for search_term in file. If file is not provided, searches in the current open file\n        signature: search_file &lt;search_term&gt; [&lt;file&gt;]\n        arguments:\n          - search_term (string) [required]: the term to search for\n          - file (string) [optional]: the file to search in (if not provided, searches in the current open file)\n\n      find_file:\n        docstring: finds all files with the given name in dir. If dir is not provided, searches in the current directory\n        signature: find_file &lt;file_name&gt; [&lt;dir&gt;]\n        arguments:\n          - file_name (string) [required]: the name of the file to search for\n          - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\n\n      edit:\n        docstring: replaces lines &lt;start_line&gt; through &lt;end_line&gt; (inclusive) with the given text in the open file. The replacement text is terminated by a line with only end_of_edit on it. All of the &lt;replacement text&gt; will be entered, so make sure your indentation is formatted properly. Python files will be checked for syntax errors after the edit. If the system detects a syntax error, the edit will not be executed. Simply try to edit the file again, but make sure to read the error message and modify the edit command you issue accordingly. Issuing the same command a second time will just lead to the same error message again.\n        signature: edit &lt;start_line&gt;:&lt;end_line&gt;\n      &lt;replacement_text&gt;\n      end_of_edit\n        arguments:\n          - start_line (integer) [required]: the line number to start the edit at\n          - end_line (integer) [required]: the line number to end the edit at (inclusive)\n          - replacement_text (string) [required]: the text to replace the current selection with\n\n    command_files:\n    - /Users/fuchur/Documents/24/git_sync/SWE-agent/config/commands/defaults.sh\n    - /Users/fuchur/Documents/24/git_sync/SWE-agent/config/commands/search.sh\n    - /Users/fuchur/Documents/24/git_sync/SWE-agent/config/commands/edit_linting.sh\n    - /Users/fuchur/Documents/24/git_sync/SWE-agent/config/commands/_split_string.py\n    demonstration_template: |\n      Here is a demonstration of how to correctly accomplish this task.\n      It is included to show you how to correctly use the interface.\n      You do not need to follow exactly what is done in the demonstration.\n      --- DEMONSTRATION ---\n      {demonstration}\n      --- END OF DEMONSTRATION ---\n    demonstrations:\n    - /Users/fuchur/Documents/24/git_sync/SWE-agent/trajectories/demonstrations/human_thought__swe-bench-HumanEvalFix-python__lcb__t-0.00__p-0.95__c-4.00__install-0/humanevalfix-python-0.traj\n    env_variables:\n      CURRENT_FILE: ''\n      CURRENT_LINE: '0'\n      OVERLAP: '2'\n      SEARCH_FILES: ()\n      SEARCH_INDEX: '0'\n      SEARCH_RESULTS: ()\n      WINDOW: '100'\n    format_error_template: |\n      Your output was not formatted correctly. You must always include one discussion and one command as part of your response. Make sure you do not have multiple discussion/command tags.\n      Please make sure your output precisely matches the following format:\n      DISCUSSION\n      Discuss here with yourself about what your planning and what you're going to do in this step.\n\n      ```\n      command(s) that you're going to run\n      ```\n    history_processor: {}\n    history_processor_args: {}\n    instance_template: |-\n      We're currently attempting to solve the following problem:\n      ISSUE:\n      {issue}\n\n      INSTRUCTIONS:\n      Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.\n      Remember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command.\n      When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\n      Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python &lt;script_name&gt;.py`.\n\n      NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\n      IMPORTANT TIPS:\n      1. Write your solution in main.py. Always test your code thoroughly before submitting, and if any of the tests fail, try to fix the code before continuing.\n\n      2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n      3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.\n\n      4. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.\n\n      5. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n\n      (Open file: {open_file})\n      (Current directory: {working_dir})\n      bash-$\n    next_step_no_output_template: |-\n      Your command ran successfully and did not produce any output.\n      (Open file: {open_file})\n      (Current directory: {working_dir})\n      bash-$\n    next_step_template: |-\n      {observation}\n      (Open file: {open_file})\n      (Current directory: {working_dir})\n      bash-$\n    parse_command: {}\n    parse_function: {}\n    put_demos_in_history: false\n    state_command:\n      arguments: null\n      code: |\n        state() {\n          local working_dir=\"$PWD\";\n          if [ -z $CURRENT_FILE ]; then\n              echo '{\"open_file\": \"n/a\", \"working_dir\": \"'$working_dir'\"}';\n          else\n              echo '{\"open_file\": \"'$(realpath $CURRENT_FILE)'\", \"working_dir\": \"'$working_dir'\"}';\n          fi\n        };\n      docstring: null\n      end_name: null\n      name: state\n      signature: null\n    strategy_template: null\n    submit_command: submit\n    subroutine_types: []\n    system_template: |-\n      SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\n\n      The special interface consists of a file editor that shows you {WINDOW} lines of a file at a time.\n      In addition to typical bash commands, you can also use the following commands to help you navigate and edit files.\n\n      COMMANDS:\n      {command_docs}\n\n      Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.\n      If you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not indented correctly will fail and require fixing before it can be run.\n\n      RESPONSE FORMAT:\n      Your shell prompt is formatted as follows:\n      (Open file: &lt;path&gt;) &lt;cwd&gt; $\n\n      You need to format your output using two fields; discussion and command.\n      Your output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:\n      DISCUSSION\n      First I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.\n      ```\n      ls -a\n      ```\n\n      You should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.\n      If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command.\n      You're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.\n      However, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.\n    util_functions:\n    - arguments: null\n      code: '_print() {    local total_lines=$(awk ''END {print NR}'' $CURRENT_FILE)    echo\n        \"[File: $(realpath $CURRENT_FILE) ($total_lines lines total)]\"    lines_above=$(jq\n        -n \"$CURRENT_LINE - $WINDOW/2\" | jq ''[0, .] | max | floor'')    lines_below=$(jq\n        -n \"$total_lines - $CURRENT_LINE - $WINDOW/2\" | jq ''[0, .] | max | round'')    if\n        [ $lines_above -gt 0 ]; then        echo \"($lines_above more lines above)\"    fi    cat\n        $CURRENT_FILE | grep -n $ | head -n $(jq -n \"[$CURRENT_LINE + $WINDOW/2, $WINDOW/2]\n        | max | floor\") | tail -n $(jq -n \"$WINDOW\")    if [ $lines_below -gt 0 ];\n        then        echo \"($lines_below more lines below)\"    fi}'\n      docstring: null\n      end_name: null\n      name: _print\n      signature: _print\n    - arguments: null\n      code: _constrain_line() {    if [ -z \"$CURRENT_FILE\" ]    then        echo \"No\n        file open. Use the open command first.\"        return    fi    local max_line=$(awk\n        'END {print NR}' $CURRENT_FILE)    local half_window=$(jq -n \"$WINDOW/2\" |\n        jq 'floor')    export CURRENT_LINE=$(jq -n \"[$CURRENT_LINE, $max_line - $half_window]\n        | min\")    export CURRENT_LINE=$(jq -n \"[$CURRENT_LINE, $half_window] | max\")}\n      docstring: null\n      end_name: null\n      name: _constrain_line\n      signature: _constrain_line\n    - arguments: null\n      code: '_scroll_warning_message() {    # Warn the agent if we scroll too many\n        times    # Message will be shown if scroll is called more than WARN_AFTER_SCROLLING_TIMES\n        (default 3) times    # Initialize variable if it''s not set    export SCROLL_COUNT=${SCROLL_COUNT:-0}    #\n        Reset if the last command wasn''t about scrolling    if [ \"$LAST_ACTION\" !=\n        \"scroll_up\" ] &amp;&amp; [ \"$LAST_ACTION\" != \"scroll_down\" ]; then        export SCROLL_COUNT=0    fi    #\n        Increment because we''re definitely scrolling now    export SCROLL_COUNT=$((SCROLL_COUNT\n        + 1))    if [ $SCROLL_COUNT -ge ${WARN_AFTER_SCROLLING_TIMES:-3} ]; then        echo\n        \"\"        echo \"WARNING: Scrolling many times in a row is very inefficient.\"        echo\n        \"If you know what you are looking for, use \\`search_file &lt;pattern&gt;\\` instead.\"        echo\n        \"\"    fi}'\n      docstring: null\n      end_name: null\n      name: _scroll_warning_message\n      signature: _scroll_warning_message\n  config_file: config/coding_challenge.yaml\n  model:\n    host_url: localhost:11434\n    model_name: azure:gpt4\n    per_instance_cost_limit: 3.0\n    replay_path: null\n    temperature: 0.0\n    top_p: 0.95\n    total_cost_limit: 0.0\nenvironment:\n  base_commit: null\n  cache_task_images: false\n  container_name: null\n  data_path: ../empty/problem.md\n  environment_setup: null\n  image_name: sweagent/swe-agent:latest\n  install_environment: true\n  no_mirror: false\n  repo_path: ../empty\n  split: dev\n  timeout: null\n  verbose: true\ninstance_filter: .*\nprint_config: true\nraise_exceptions: false\nskip_existing: false\nsuffix: ''\n\n2024-07-12 17:57:39,938 WARNING The --model CLI argument is ignored when using the Azure GPT endpoint. The model is determined by the AZURE_OPENAI_DEPLOYMENT key/environment variable (this might change in the future).\n2024-07-12 17:57:40,021 INFO \ud83d\udcbd Loaded dataset from ../empty/problem.md\n2024-07-12 17:57:40,059 INFO Found image sweagent/swe-agent:latest with tags: ['sweagent/swe-agent:latest'], created: 2024-07-01T19:58:23.043599678Z for linux arm64.\n2024-07-12 17:57:40,060 DEBUG Starting container with command: docker run -i --rm --name sweagent-swe-agent-latest-0abb363825 sweagent/swe-agent:latest /bin/bash -l\n2024-07-12 17:57:41,130 INFO \ud83c\udf31 Environment Initialized\n2024-07-12 17:57:41,433 DEBUG Environment initialization took 1.49 seconds\n2024-07-12 17:57:41,517 WARNING **************************************************\n2024-07-12 17:57:41,517 WARNING Found existing args.yaml with different arguments!\n2024-07-12 17:57:41,518 WARNING **************************************************\n2024-07-12 17:57:41,539 INFO \u25b6\ufe0f  Beginning task 0\n2024-07-12 17:57:41,673 DEBUG Copying /Users/fuchur/Documents/24/git_sync/empty to container at /__Users__fuchur__Documents__24__git_sync__empty with command: docker cp /Users/fuchur/Documents/24/git_sync/empty eaeb81eeabf519b6f46f8daf8729b52c1c3846091c707c400d4083c948905888:/__Users__fuchur__Documents__24__git_sync__empty\n2024-07-12 17:57:42,876 WARNING install_environment is set to True, but the data path is a GitHub URL without an environment config file (environment_config key/flag). Skipping conda environment installation.\n2024-07-12 17:57:44,017 INFO Initializing agent settings for container eaeb81eeabf519b6f46f8daf8729b52c1c3846091c707c400d4083c948905888\n2024-07-12 17:57:44,667 INFO Resetting model stats\n2024-07-12 17:57:44,668 INFO SYSTEM (primary)\nSETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\n\nThe special interface consists of a file editor that shows you 100 lines of a file at a time.\nIn addition to typical bash commands, you can also use the following commands to help you navigate and edit files.\n\nCOMMANDS:\nopen:\n  docstring: opens the file at the given path in the editor. If line_number is provided, the window will be move to include that line\n  signature: open &lt;path&gt; [&lt;line_number&gt;]\n  arguments:\n    - path (string) [required]: the path to the file to open\n    - line_number (integer) [optional]: the line number to move the window to (if not provided, the window will start at the top of the file)\n\ngoto:\n  docstring: moves the window to show &lt;line_number&gt;\n  signature: goto &lt;line_number&gt;\n  arguments:\n    - line_number (integer) [required]: the line number to move the window to\n\nscroll_down:\n  docstring: moves the window down 100 lines\n  signature: scroll_down\n\nscroll_up:\n  docstring: moves the window down 100 lines\n  signature: scroll_up\n\ncreate:\n  docstring: creates and opens a new file with the given name\n  signature: create &lt;filename&gt;\n  arguments:\n    - filename (string) [required]: the name of the file to create\n\nsubmit:\n  docstring: submits your current code and terminates the session\n  signature: submit\n\nsearch_dir:\n  docstring: searches for search_term in all files in dir. If dir is not provided, searches in the current directory\n  signature: search_dir &lt;search_term&gt; [&lt;dir&gt;]\n  arguments:\n    - search_term (string) [required]: the term to search for\n    - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\n\nsearch_file:\n  docstring: searches for search_term in file. If file is not provided, searches in the current open file\n  signature: search_file &lt;search_term&gt; [&lt;file&gt;]\n  arguments:\n    - search_term (string) [required]: the term to search for\n    - file (string) [optional]: the file to search in (if not provided, searches in the current open file)\n\nfind_file:\n  docstring: finds all files with the given name in dir. If dir is not provided, searches in the current directory\n  signature: find_file &lt;file_name&gt; [&lt;dir&gt;]\n  arguments:\n    - file_name (string) [required]: the name of the file to search for\n    - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\n\nedit:\n  docstring: replaces lines &lt;start_line&gt; through &lt;end_line&gt; (inclusive) with the given text in the open file. The replacement text is terminated by a line with only end_of_edit on it. All of the &lt;replacement text&gt; will be entered, so make sure your indentation is formatted properly. Python files will be checked for syntax errors after the edit. If the system detects a syntax error, the edit will not be executed. Simply try to edit the file again, but make sure to read the error message and modify the edit command you issue accordingly. Issuing the same command a second time will just lead to the same error message again.\n  signature: edit &lt;start_line&gt;:&lt;end_line&gt;\n&lt;replacement_text&gt;\nend_of_edit\n  arguments:\n    - start_line (integer) [required]: the line number to start the edit at\n    - end_line (integer) [required]: the line number to end the edit at (inclusive)\n    - replacement_text (string) [required]: the text to replace the current selection with\n\n\n\nPlease note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.\nIf you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not indented correctly will fail and require fixing before it can be run.\n\nRESPONSE FORMAT:\nYour shell prompt is formatted as follows:\n(Open file: &lt;path&gt;) &lt;cwd&gt; $\n\nYou need to format your output using two fields; discussion and command.\nYour output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:\nDISCUSSION\nFirst I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.\n    ```\n    ls -a\n    ```\n\nYou should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.\nIf you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command.\nYou're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.\nHowever, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.\n2024-07-12 17:57:44,679 INFO DEMONSTRATION: /Users/fuchur/Documents/24/git_sync/SWE-agent/trajectories/demonstrations/human_thought__swe-bench-HumanEvalFix-python__lcb__t-0.00__p-0.95__c-4.00__install-0/humanevalfix-python-0.traj\n2024-07-12 17:57:44,680 INFO Trajectory will be saved to trajectories/fuchur/azure-gpt4__problem__coding_challenge__t-0.00__p-0.95__c-3.00__install-1/26d111.traj\n2024-07-12 17:57:44,747 INFO \ud83e\udd16 MODEL INPUT\nWe're currently attempting to solve the following problem:\nISSUE:\nGiven an unsorted integer array nums.\nReturn the smallest positive integer that is not present in nums.\n\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.\n\n## Example 1:\n\n&gt; Input: nums = [1,2,0]\n&gt; Output: 3\n&gt; Explanation: The numbers in the range [1,2] are all in the array.\n\n## Example 2:\n\n&gt; Input: nums = [3,4,-1,1]\n&gt; Output: 2\n&gt; Explanation: 1 is in the array but 2 is missing.\n\n## Example 3:\n\n&gt; Input: nums = [7,8,9,11,12]\n&gt; Output: 1\n&gt; Explanation: The smallest positive integer 1 is missing.\n\n## Constraints:\n\n1 &lt;= nums.length &lt;= 105\n-231 &lt;= nums[i] &lt;= 231 - 1\n\n\n\n\nINSTRUCTIONS:\nNow, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.\nRemember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command.\nWhen you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\nNote however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python &lt;script_name&gt;.py`.\n\nNOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\nIMPORTANT TIPS:\n1. Write your solution in main.py. Always test your code thoroughly before submitting, and if any of the tests fail, try to fix the code before continuing.\n\n2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.\n\n4. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.\n\n5. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n\n(Open file: n/a)\n(Current directory: /__Users__fuchur__Documents__24__git_sync__empty)\nbash-$\n2024-07-12 17:57:48,042 INFO input_tokens=3,705, output_tokens=48, instance_cost=0.04, cost=0.04\n2024-07-12 17:57:48,044 INFO total_tokens_sent=3,705, total_tokens_received=48, total_cost=0.04, total_api_calls=1\n2024-07-12 17:57:48,045 INFO \ud83d\udcad THOUGHT (primary)\nTo start addressing the issue, I need to access the main.py file where I will implement the solution for the given problem. First, I'll check if the main.py file exists in the current directory.\n\n2024-07-12 17:57:48,046 INFO \ud83c\udfac ACTION (primary)\nls -a\n\n2024-07-12 17:57:48,217 INFO \ud83e\udd16 MODEL INPUT\n.\n..\n.git\nmain.py\nproblem.md\n(Open file: n/a)\n(Current directory: /__Users__fuchur__Documents__24__git_sync__empty)\nbash-$\n2024-07-12 17:57:50,839 INFO input_tokens=3,800, output_tokens=36, instance_cost=0.08, cost=0.04\n2024-07-12 17:57:50,842 INFO total_tokens_sent=7,505, total_tokens_received=84, total_cost=0.08, total_api_calls=2\n2024-07-12 17:57:50,847 INFO \ud83d\udcad THOUGHT (primary)\nThe main.py file is present in the current directory. I will open this file to inspect its contents and then proceed to implement the required function.\n\n2024-07-12 17:57:50,856 INFO \ud83c\udfac ACTION (primary)\nopen main.py\n\n2024-07-12 17:57:51,196 INFO \ud83e\udd16 MODEL INPUT\n[File: /__Users__fuchur__Documents__24__git_sync__empty/main.py (5 lines total)]\n1:from typing import List\n2:\n3:\n4:class Solution:\n5:    def firstMissingPositive(self, nums: List[int]) -&gt; int:\n(Open file: /__Users__fuchur__Documents__24__git_sync__empty/main.py)\n(Current directory: /__Users__fuchur__Documents__24__git_sync__empty)\nbash-$\n2024-07-12 17:58:08,893 INFO input_tokens=3,947, output_tokens=334, instance_cost=0.13, cost=0.05\n2024-07-12 17:58:08,895 INFO total_tokens_sent=11,452, total_tokens_received=418, total_cost=0.13, total_api_calls=3\n2024-07-12 17:58:08,895 INFO \ud83d\udcad THOUGHT (primary)\nThe `firstMissingPositive` function is declared but not implemented. I will now edit the file to implement the function that finds the smallest positive integer not present in the array, adhering to the constraints of O(n) time complexity and O(1) space complexity.\n\n2024-07-12 17:58:08,896 INFO \ud83c\udfac ACTION (primary)\nedit 5:5\n        # Implementation of the function to find the smallest missing positive integer\n        def firstMissingPositive(self, nums: List[int]) -&gt; int:\n            n = len(nums)\n            # Mark numbers (num &lt; 0) and (num &gt; n) with a special marker number (n+1)\n            # We can ignore those because if missing number is in the range (1, n+1)\n            # it must be in the array\n            for i in range(n):\n                if nums[i] &lt;= 0 or nums[i] &gt; n:\n                    nums[i] = n + 1\n\n            # Use index as a hash key and number sign as a presence detector\n            # For example, if nums[1] is negative that means that number `1` is present in the array\n            for i in range(n):\n                num = abs(nums[i])\n                if num &lt;= n:\n                    nums[num - 1] = -abs(nums[num - 1])\n\n            # Now the index of the first positive number is equal to the smallest missing positive number\n            for i in range(n):\n                if nums[i] &gt; 0:\n                    return i + 1\n\n            # If no positive numbers were found, the smallest missing positive is n+1\n            return n + 1\nend_of_edit\n\n2024-07-12 17:58:09,404 INFO \ud83e\udd16 MODEL INPUT\n[File: /__Users__fuchur__Documents__24__git_sync__empty/main.py (28 lines total)]\n1:from typing import List\n2:\n3:\n4:class Solution:\n5:        # Implementation of the function to find the smallest missing positive integer\n6:        def firstMissingPositive(self, nums: List[int]) -&gt; int:\n7:            n = len(nums)\n8:            # Mark numbers (num &lt; 0) and (num &gt; n) with a special marker number (n+1)\n9:            # We can ignore those because if missing number is in the range (1, n+1)\n10:            # it must be in the array\n11:            for i in range(n):\n12:                if nums[i] &lt;= 0 or nums[i] &gt; n:\n13:                    nums[i] = n + 1\n14:\n15:            # Use index as a hash key and number sign as a presence detector\n16:            # For example, if nums[1] is negative that means that number `1` is present in the array\n17:            for i in range(n):\n18:                num = abs(nums[i])\n19:                if num &lt;= n:\n20:                    nums[num - 1] = -abs(nums[num - 1])\n21:\n22:            # Now the index of the first positive number is equal to the smallest missing positive number\n23:            for i in range(n):\n24:                if nums[i] &gt; 0:\n25:                    return i + 1\n26:\n27:            # If no positive numbers were found, the smallest missing positive is n+1\n28:            return n + 1\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n(Open file: /__Users__fuchur__Documents__24__git_sync__empty/main.py)\n(Current directory: /__Users__fuchur__Documents__24__git_sync__empty)\nbash-$\n2024-07-12 17:58:20,954 INFO input_tokens=4,720, output_tokens=206, instance_cost=0.18, cost=0.05\n2024-07-12 17:58:20,958 INFO total_tokens_sent=16,172, total_tokens_received=624, total_cost=0.18, total_api_calls=4\n2024-07-12 17:58:20,962 INFO \ud83d\udcad THOUGHT (primary)\nThe implementation of the `firstMissingPositive` function has been successfully added to the `main.py` file. To ensure that the function works correctly, I will now write a script to test the function with the example inputs provided in the issue description.\n\n2024-07-12 17:58:20,973 INFO \ud83c\udfac ACTION (primary)\nedit 29:35\n# Adding test cases to verify the implementation of firstMissingPositive\nif __name__ == \"__main__\":\n    sol = Solution()\n    # Test case 1\n    assert sol.firstMissingPositive([1, 2, 0]) == 3, \"Test case 1 failed\"\n    # Test case 2\n    assert sol.firstMissingPositive([3, 4, -1, 1]) == 2, \"Test case 2 failed\"\n    # Test case 3\n    assert sol.firstMissingPositive([7, 8, 9, 11, 12]) == 1, \"Test case 3 failed\"\n    print(\"All test cases passed successfully.\")\nend_of_edit\n\n2024-07-12 17:58:21,472 INFO \ud83e\udd16 MODEL INPUT\n[File: /__Users__fuchur__Documents__24__git_sync__empty/main.py (38 lines total)]\n1:from typing import List\n2:\n3:\n4:class Solution:\n5:        # Implementation of the function to find the smallest missing positive integer\n6:        def firstMissingPositive(self, nums: List[int]) -&gt; int:\n7:            n = len(nums)\n8:            # Mark numbers (num &lt; 0) and (num &gt; n) with a special marker number (n+1)\n9:            # We can ignore those because if missing number is in the range (1, n+1)\n10:            # it must be in the array\n11:            for i in range(n):\n12:                if nums[i] &lt;= 0 or nums[i] &gt; n:\n13:                    nums[i] = n + 1\n14:\n15:            # Use index as a hash key and number sign as a presence detector\n16:            # For example, if nums[1] is negative that means that number `1` is present in the array\n17:            for i in range(n):\n18:                num = abs(nums[i])\n19:                if num &lt;= n:\n20:                    nums[num - 1] = -abs(nums[num - 1])\n21:\n22:            # Now the index of the first positive number is equal to the smallest missing positive number\n23:            for i in range(n):\n24:                if nums[i] &gt; 0:\n25:                    return i + 1\n26:\n27:            # If no positive numbers were found, the smallest missing positive is n+1\n28:            return n + 1\n29:# Adding test cases to verify the implementation of firstMissingPositive\n30:if __name__ == \"__main__\":\n31:    sol = Solution()\n32:    # Test case 1\n33:    assert sol.firstMissingPositive([1, 2, 0]) == 3, \"Test case 1 failed\"\n34:    # Test case 2\n35:    assert sol.firstMissingPositive([3, 4, -1, 1]) == 2, \"Test case 2 failed\"\n36:    # Test case 3\n37:    assert sol.firstMissingPositive([7, 8, 9, 11, 12]) == 1, \"Test case 3 failed\"\n38:    print(\"All test cases passed successfully.\")\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n(Open file: /__Users__fuchur__Documents__24__git_sync__empty/main.py)\n(Current directory: /__Users__fuchur__Documents__24__git_sync__empty)\nbash-$\n2024-07-12 17:58:24,886 INFO input_tokens=5,527, output_tokens=42, instance_cost=0.24, cost=0.06\n2024-07-12 17:58:24,891 INFO total_tokens_sent=21,699, total_tokens_received=666, total_cost=0.24, total_api_calls=5\n2024-07-12 17:58:24,894 INFO \ud83d\udcad THOUGHT (primary)\nThe test cases have been added to the `main.py` file. Now, I will run the script to ensure that all test cases pass and the implementation meets the requirements.\n\n2024-07-12 17:58:24,896 INFO \ud83c\udfac ACTION (primary)\npython main.py\n\n2024-07-12 17:58:25,084 INFO \ud83e\udd16 MODEL INPUT\nAll test cases passed successfully.\n(Open file: /__Users__fuchur__Documents__24__git_sync__empty/main.py)\n(Current directory: /__Users__fuchur__Documents__24__git_sync__empty)\nbash-$\n2024-07-12 17:58:28,523 INFO input_tokens=5,628, output_tokens=38, instance_cost=0.29, cost=0.06\n2024-07-12 17:58:28,524 INFO total_tokens_sent=27,327, total_tokens_received=704, total_cost=0.29, total_api_calls=6\n2024-07-12 17:58:28,524 INFO \ud83d\udcad THOUGHT (primary)\nThe test cases have successfully passed, indicating that the implementation of the `firstMissingPositive` function is correct. I will now submit the changes to the code base.\n\n2024-07-12 17:58:28,525 INFO \ud83c\udfac ACTION (primary)\nsubmit\n\n2024-07-12 17:58:28,666 INFO Found submission:\ndiff --git a/main.py b/main.py\nindex 1e7f08f..beabaa7 100644\n--- a/main.py\n+++ b/main.py\n@@ -2,4 +2,37 @@ from typing import List\n\n\n class Solution:\n-    def firstMissingPositive(self, nums: List[int]) -&gt; int:\n+        # Implementation of the function to find the smallest missing positive integer\n+        def firstMissingPositive(self, nums: List[int]) -&gt; int:\n+            n = len(nums)\n+            # Mark numbers (num &lt; 0) and (num &gt; n) with a special marker number (n+1)\n+            # We can ignore those because if missing number is in the range (1, n+1)\n+            # it must be in the array\n+            for i in range(n):\n+                if nums[i] &lt;= 0 or nums[i] &gt; n:\n+                    nums[i] = n + 1\n+\n+            # Use index as a hash key and number sign as a presence detector\n+            # For example, if nums[1] is negative that means that number `1` is present in the array\n+            for i in range(n):\n+                num = abs(nums[i])\n+                if num &lt;= n:\n+                    nums[num - 1] = -abs(nums[num - 1])\n+\n+            # Now the index of the first positive number is equal to the smallest missing positive number\n+            for i in range(n):\n+                if nums[i] &gt; 0:\n+                    return i + 1\n+\n+            # If no positive numbers were found, the smallest missing positive is n+1\n+            return n + 1\n+# Adding test cases to verify the implementation of firstMissingPositive\n+if __name__ == \"__main__\":\n+    sol = Solution()\n+    # Test case 1\n+    assert sol.firstMissingPositive([1, 2, 0]) == 3, \"Test case 1 failed\"\n+    # Test case 2\n+    assert sol.firstMissingPositive([3, 4, -1, 1]) == 2, \"Test case 2 failed\"\n+    # Test case 3\n+    assert sol.firstMissingPositive([7, 8, 9, 11, 12]) == 1, \"Test case 3 failed\"\n+    print(\"All test cases passed successfully.\")\n\n2024-07-12 17:58:28,684 INFO Trajectory saved to trajectories/fuchur/azure-gpt4__problem__coding_challenge__t-0.00__p-0.95__c-3.00__install-1/26d111.traj\n2024-07-12 17:58:28,685 INFO Saved predictions to trajectories/fuchur/azure-gpt4__problem__coding_challenge__t-0.00__p-0.95__c-3.00__install-1/all_preds.jsonl\n</code></pre> <p>SWE-agent will typically conclude with a message like</p> <pre><code>INFO     Trajectory saved to trajectories/fuchur/azure-gpt4__problem__coding_challenge__t-0.00__p-0.95__c-3.00__install-1/26d111.traj\nINFO     Saved predictions to\n         trajectories/fuchur/azure-gpt4__problem__coding_challenge__t-0.00__p-0.95__c-3.00__install-1/all_preds.jsonl\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83c\udf89 Submission successful \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 SWE-agent has produced a patch that it believes will solve the issue you submitted! \u2502\n\u2502 Use the code snippet below to inspect or apply it!                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n # The patch has been saved to your local filesystem at:\n PATCH_FILE_PATH='/Users/fuchur/Documents/24/git_sync/SWE-agent/trajectories/fuchur/azure-gpt4__problem__coding_challenge__t-0.00__p-0\n 5__c-3.00__install-1/patches/26d111.patch'\n # Inspect it:\n cat \"${PATCH_FILE_PATH}\"\n # Apply it to a local repository:\n cd &lt;your local repo root&gt;\n git apply \"${PATCH_FILE_PATH}\"\n</code></pre> <p>This informs you of the location of the trajectory and of the patch file that contains the solution.</p> <p>In our case, this looks like this:</p> Patch (solution) <pre><code>diff --git a/main.py b/main.py\nindex 1e7f08f..beabaa7 100644\n--- a/main.py\n+++ b/main.py\n@@ -2,4 +2,37 @@ from typing import List\n\n\n class Solution:\n-    def firstMissingPositive(self, nums: List[int]) -&gt; int:\n+        # Implementation of the function to find the smallest missing positive integer\n+        def firstMissingPositive(self, nums: List[int]) -&gt; int:\n+            n = len(nums)\n+            # Mark numbers (num &lt; 0) and (num &gt; n) with a special marker number (n+1)\n+            # We can ignore those because if missing number is in the range (1, n+1)\n+            # it must be in the array\n+            for i in range(n):\n+                if nums[i] &lt;= 0 or nums[i] &gt; n:\n+                    nums[i] = n + 1\n+\n+            # Use index as a hash key and number sign as a presence detector\n+            # For example, if nums[1] is negative that means that number `1` is present in the array\n+            for i in range(n):\n+                num = abs(nums[i])\n+                if num &lt;= n:\n+                    nums[num - 1] = -abs(nums[num - 1])\n+\n+            # Now the index of the first positive number is equal to the smallest missing positive number\n+            for i in range(n):\n+                if nums[i] &gt; 0:\n+                    return i + 1\n+\n+            # If no positive numbers were found, the smallest missing positive is n+1\n+            return n + 1\n+# Adding test cases to verify the implementation of firstMissingPositive\n+if __name__ == \"__main__\":\n+    sol = Solution()\n+    # Test case 1\n+    assert sol.firstMissingPositive([1, 2, 0]) == 3, \"Test case 1 failed\"\n+    # Test case 2\n+    assert sol.firstMissingPositive([3, 4, -1, 1]) == 2, \"Test case 2 failed\"\n+    # Test case 3\n+    assert sol.firstMissingPositive([7, 8, 9, 11, 12]) == 1, \"Test case 3 failed\"\n+    print(\"All test cases passed successfully.\")\n</code></pre> <p>Because of the <code>--apply_patch_locally</code> flag, the patch has also already been applied to the repository, so you can also retrieve the final solution from there.</p>"},{"location":"usage/coding_challenges/#improving-swe-agent-for-coding-challenges","title":"Improving SWE-agent for coding challenges","text":"<p>By default, the demonstration trajectory the agent uses while solving a coding challenge is one in which it needs to solve a small bug in a short piece of code (from the HumanEvalFix dataset). Since that process is not too similar to solving a coding challenge, performance would probably substantially improve if the agent was given a demonstration trajectory in which it has to solve an actual programming challenge. To learn how to do that, read this.</p>"},{"location":"usage/hello_world/","title":"Hello world","text":"<p>Fix a github issue with SWE-agent</p> <p>In this tutorial, we will fix a github issue with SWE-agent using the command line interface.</p> <ul> <li>Make sure you have installed SWE-agent and have a language model set up.</li> <li>We will be executing code in a Docker sandbox, so make sure you have docker installed (docker troubleshooting).   If you cannot run docker, skim this tutorial and see how you can run SWE-agent with cloud-based execution in the command line basics tutorial.</li> </ul> <p>After installing SWE-agent, you have the <code>sweagent</code> command available. Run <code>sweagent --help</code> to see the list of subcommands. The most important ones are</p> <ul> <li><code>sweagent run</code>: Run SWE-agent on a single problem statement. This is covered on this page and for slightly more advanced examples in the command line basics tutorial.</li> <li><code>sweagent run-batch</code>: Run SWE-agent on a list of problem statements. This is what you would use for benchmarking, or when   working with a larger set of historic issues. Covered in the batch mode tutorial.</li> </ul> <p>In this tutorial, we will focus on the <code>run</code> subcommand.</p> <p>Let's start with an absolutely trivial example and solve an issue about a simple syntax error (<code>swe-agent/test-repo #1</code>)</p> <pre><code>sweagent run \\\n  --agent.model.name=claude-3-5-sonnet-20241022 \\\n  --agent.model.per_instance_cost_limit=2.00 \\\n  --env.repo.github_url=https://github.com/SWE-agent/test-repo \\\n  --problem_statement.github_url=https://github.com/SWE-agent/test-repo/issues/1\n</code></pre> <p>The example above uses the <code>Claude 3.5 Sonnet</code> model from Anthropic. Alternatively, you can for example use <code>GPT-4o</code> (from OpenAI) by setting <code>--angent.model.name=gpt-4o</code>. In order to use it, you need to add your keys to the environment:</p> <pre><code>export ANTHROPIC_API_KEY=&lt;your key&gt;\nexport OPENAI_API_KEY=&lt;your key&gt;\n</code></pre> <p>alternatively, you can create a <code>.env</code> file in your working directory and put your keys in there like so:</p> <pre><code>ANTHROPIC_API_KEY=&lt;your key&gt;\nOPENAI_API_KEY=&lt;your key&gt;\n</code></pre> <p>We should support all models that you can think of.</p> <p>Models and keys</p> <p>Read more about configuring models and API keys.</p> Output <pre><code> INFO      This is SWE-agent version 0.7.0 (53c0e1a51aacd6ddfd3eb377a694e150e9b471ff) with SWE-ReX 1.0.1 (deaf1b702fc534a0164eeb4018f7779910a4910c).\n\ud83d\udd27 INFO     Loading default config from /Users/fuchur/Documents/24/git_sync/SWE-agent/config/default.yaml, because no other config file is specified. Specify --no_config_file to\n            disable this.\n\ud83d\udd27 WARNING  demonstration_template is ignored when put_demos_in_history is True\n\ud83d\udd27 INFO     Setting problem statement based on github issue url\n\ud83d\udd27 INFO     Loaded environment variables from /Users/fuchur/Documents/24/git_sync/SWE-agent/.env\n\ud83d\udd27 WARNING  demonstration_template is ignored when put_demos_in_history is True\n\ud83c\udfc3 INFO     Starting environment\n\ud83e\udd96 DEBUG    Found free port 60661\n\ud83e\udd96 INFO     Starting container python3.11-0bc626f0-e72a-4faa-9b49-0323d0f1ab87 with image python:3.11 serving on port 60661\n\ud83e\udd96 DEBUG    Command: \"docker run --rm -p 60661:8000 --name python3.11-0bc626f0-e72a-4faa-9b49-0323d0f1ab87 python:3.11 /bin/sh -c 'swerex-remote --auth-token\n            3f979423-c1fb-40f9-8a44-35256ee60f0a || (python3 -m pip install pipx &amp;&amp; python3 -m pipx ensurepath &amp;&amp; pipx run swe-rex --auth-token\n            3f979423-c1fb-40f9-8a44-35256ee60f0a)'\"\n\ud83e\udd96 INFO     Starting runtime at 60661\n\ud83e\udd96 INFO     Runtime started in 10.21s\n\ud83c\udf31 INFO     Environment Initialized\n\ud83c\udf31 DEBUG    Resetting repository SWE-agent__test-repo to commit HEAD\n\ud83c\udfc3 INFO     Running agent\n\ud83e\udd20 INFO     Trajectory will be saved to\n            /Users/fuchur/Documents/24/git_sync/SWE-agent/trajectories/fuchur/default__claude-3-5-sonnet-20241022__t-0.00__p-1.00__c-2.00___SWE-agent__test-repo-i1/SWE-agent__test-\n            repo-i1/SWE-agent__test-repo-i1.traj\n\ud83e\udd96 DEBUG    Uploading file from /Users/fuchur/Documents/24/git_sync/SWE-agent/tools/registry to /root/tools/registry\n\ud83e\udd96 DEBUG    Created zip file at /var/folders/g3/1y2_hl1j16scls01cxqm76s80000gn/T/tmpswoslekq/zipped_transfer.zip\n\ud83e\udd96 DEBUG    Uploading file from /Users/fuchur/Documents/24/git_sync/SWE-agent/tools/defaults to /root/tools/defaults\n\ud83e\udd96 DEBUG    Created zip file at /var/folders/g3/1y2_hl1j16scls01cxqm76s80000gn/T/tmpf385jdxb/zipped_transfer.zip\n\ud83e\udd96 DEBUG    Uploading file from /Users/fuchur/Documents/24/git_sync/SWE-agent/tools/search to /root/tools/search\n\ud83e\udd96 DEBUG    Created zip file at /var/folders/g3/1y2_hl1j16scls01cxqm76s80000gn/T/tmppjat9qec/zipped_transfer.zip\n\ud83e\udd96 DEBUG    Uploading file from /Users/fuchur/Documents/24/git_sync/SWE-agent/tools/edit_replace to /root/tools/edit_replace\n\ud83e\udd96 DEBUG    Created zip file at /var/folders/g3/1y2_hl1j16scls01cxqm76s80000gn/T/tmpiwzg_8ex/zipped_transfer.zip\n\ud83e\udd96 DEBUG    Uploading file from /Users/fuchur/Documents/24/git_sync/SWE-agent/tools/submit to /root/tools/submit\n\ud83e\udd96 DEBUG    Created zip file at /var/folders/g3/1y2_hl1j16scls01cxqm76s80000gn/T/tmpdruv408v/zipped_transfer.zip\n\ud83e\uddf0 INFO     Resetting tools\n\ud83e\udd20 INFO     SYSTEM (main)\n            SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\n\n            The special interface consists of a file editor that shows you 100 lines of a file at a time.\n            In addition to typical bash commands, you can also use specific commands to help you navigate and edit files.\n            To call a command, you need to invoke it with a function call/tool call.\n\n            Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.\n\n            For example, if you are looking at this file:\n\n            def fct():\n                print(\"Hello world\")\n\n            and you want to edit the file to read:\n\n            def fct():\n                print(\"Hello\")\n                print(\"world\")\n\n            you search string should be `Hello world` and your replace string should be `\"Hello\"\\n    print(\"world\")`\n            (note the extra spaces before the print statement!).\n\n            You could also get the same result by search for `    print(\"Hello world\")` and replace with `    print(\"Hello\")\\n    print(\"world\")`.\n\n            RESPONSE FORMAT:\n            Your shell prompt is formatted as follows:\n            (Open file: &lt;path&gt;)\n            (Current directory: &lt;cwd&gt;)\n            bash-$\n\n            First, you should _always_ include a general thought about what you're going to do next.\n            Then, for every response, you must include exactly _ONE_ tool call/function call.\n\n            Remember, you should always include a _SINGLE_ tool call/function call and then wait for a response from the shell before continuing with more discussion and commands.\n            Everything you include in the DISCUSSION section will be saved for future reference.\n            If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first tool call, and then after receiving a response you'll be\n            able to issue the second .\n            Note that the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.\n\ud83e\udd20 INFO     DEMONSTRATION:\n            /Users/fuchur/Documents/24/git_sync/SWE-agent/trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__function_calling_replace__install-1/marshmallow-co\n            de__marshmallow-1867.traj\n\ud83e\uddf0 DEBUG    Retrieved state from environment: {'open_file': 'n/a', 'working_dir': '/SWE-agent__test-repo'}\n\ud83e\udd20 INFO     \ud83e\udd16 MODEL INPUT\n            We're currently solving the following issue within our repository. Here's the issue text:\n            ISSUE:\n            SyntaxError: invalid syntax\n            I'm running `missing_colon.py` as follows:\n\n            ```python\n            division(23, 0)\n            ```\n\n            but I get the following error:\n\n            ```\n              File \"/Users/fuchur/Documents/24/git_sync/swe-agent-test-repo/tests/./missing_colon.py\", line 4\n                def division(a: float, b: float) -&gt; float\n                                                         ^\n            SyntaxError: invalid syntax\n            ```\n\n\n            INSTRUCTIONS:\n            Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the\n            special interface to help you. Edit all the files you need to and run any checks or tests that you want.\n            Remember, YOU SHOULD ALWAYS INCLUDE EXACTLY ONE TOOL CALL/FUNCTION CALL PER RESPONSE.\n            When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\n            Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a\n            python script and then run it with the python command.\n\n            NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\n            GENERAL IMPORTANT TIPS:\n\n            1. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n            2. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command\n            multiple times. Instead, use the goto 583 command. It's much quicker.\n\n            3. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a\n            search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doesn't work,\n            use the linux 'find' command.\n\n            4. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file\n            might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current open file.\n\n            5. When editing files, it is easy to accidentally to write code with incorrect indentation or make other mistakes. Always check the code after you issue an edit to make\n            sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n\n            6. When editing files, first explain the code you want to edit and why it is causing the problem. Then explain the edit you want to make and how it fixes the problem.\n            Explain how the edit does not break existing functionality.\n\n            7. Do not try to install any packages with `pip`, `conda`, or any other way. This will usually not work. If the environment is not set up correctly, try to fix the\n            issue without executing python code or running any tests that require the package installed.\n\n            STRATEGY:\n\n            1. Always start by trying to replicate the bug that the issues discusses.\n              If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n              Then start trying to fix it.\n\n              If the bug reproduction script does not print anything when it successfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at\n            the end of the file,\n              so that you can be sure that the script indeed ran fine all the way through.\n\n            2. Locate relevant code using the find and search commands. `open` the file you want to edit.\n\n            3. Use the `edit` command to perform edits.\n\n            4. When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n\n            5. Create additional tests to verify the fix in a style similar to the existing reproduction script. In particular, make sure to test edge cases.\n               If you find any issues, go back to the file you edited and perform further edits.\n\n            (Open file: n/a)\n            (Current directory: /SWE-agent__test-repo)\n            bash-$\n\ud83e\udd20 INFO     ========================= STEP 1 =========================\n\ud83e\udd16 DEBUG    input_tokens=7,862, output_tokens=36, instance_cost=0.04, cost=0.04\n\ud83e\udd16 DEBUG    total_tokens_sent=7,862, total_tokens_received=36, total_cost=0.04, total_api_calls=1\n\ud83e\udd20 INFO     \ud83d\udcad THOUGHT\n            Let's start by finding the `missing_colon.py` file that's mentioned in the issue. Based on the error message, it should be in the `tests` directory.\n\n            \ud83c\udfac ACTION\n            find_file missing_colon.py tests\n\ud83e\uddf0 DEBUG    Retrieved state from environment: {'open_file': 'n/a', 'working_dir': '/SWE-agent__test-repo'}\n\ud83e\udd20 INFO     \ud83e\udd16 MODEL INPUT\n            Found 1 matches for \"missing_colon.py\" in /SWE-agent__test-repo/tests:\n            /SWE-agent__test-repo/tests/missing_colon.py\n            (Open file: n/a)\n            (Current directory: /SWE-agent__test-repo)\n            bash-$\n\ud83e\udd20 INFO     ========================= STEP 2 =========================\n\ud83e\udd16 DEBUG    input_tokens=7,971, output_tokens=11, instance_cost=0.07, cost=0.04\n\ud83e\udd16 DEBUG    total_tokens_sent=15,833, total_tokens_received=47, total_cost=0.07, total_api_calls=2\n\ud83e\udd20 INFO     \ud83d\udcad THOUGHT\n            Now let's open the file to see its contents:\n\n            \ud83c\udfac ACTION\n            open \"tests/missing_colon.py\"\n\ud83e\uddf0 DEBUG    Retrieved state from environment: {'open_file': '/SWE-agent__test-repo/tests/missing_colon.py', 'working_dir': '/SWE-agent__test-repo'}\n\ud83e\udd20 INFO     \ud83e\udd16 MODEL INPUT\n            [File: tests/missing_colon.py (10 lines total)]\n            1:#!/usr/bin/env python3\n            2:\n            3:\n            4:def division(a: float, b: float) -&gt; float\n            5:    return a/b\n            6:\n            7:\n            8:if __name__ == \"__main__\":\n            9:    print(division(123, 15))\n            10:\n            (Open file: /SWE-agent__test-repo/tests/missing_colon.py)\n            (Current directory: /SWE-agent__test-repo)\n            bash-$\n\ud83e\udd20 INFO     ========================= STEP 3 =========================\n\ud83e\udd16 DEBUG    input_tokens=8,103, output_tokens=48, instance_cost=0.11, cost=0.04\n\ud83e\udd16 DEBUG    total_tokens_sent=23,936, total_tokens_received=95, total_cost=0.11, total_api_calls=3\n\ud83e\udd20 INFO     \ud83d\udcad THOUGHT\n            I can see the problem. The function definition on line 4 is missing a colon (`:`) after the return type annotation. In Python, all function definitions must end with a\n            colon. Let's fix this by adding the missing colon.\n\n            \ud83c\udfac ACTION\n            edit 'def division(a: float, b: float) -&gt; float' 'def division(a: float, b: float) -&gt; float:'\n\ud83e\uddf0 DEBUG    Retrieved state from environment: {'open_file': '/SWE-agent__test-repo/tests/missing_colon.py', 'working_dir': '/SWE-agent__test-repo'}\n\ud83e\udd20 INFO     \ud83e\udd16 MODEL INPUT\n            Text replaced. Please review the changes and make sure they are correct:\n\n            1. The edited file is correctly indented\n            2. The edited file does not contain duplicate lines\n            3. The edit does not break existing functionality\n\n            Edit the file again if necessary.\n            [File: /SWE-agent__test-repo/tests/missing_colon.py (10 lines total)]\n            1:#!/usr/bin/env python3\n            2:\n            3:\n            4:def division(a: float, b: float) -&gt; float:\n            5:    return a/b\n            6:\n            7:\n            8:if __name__ == \"__main__\":\n            9:    print(division(123, 15))\n            10:\n            (Open file: /SWE-agent__test-repo/tests/missing_colon.py)\n            (Current directory: /SWE-agent__test-repo)\n            bash-$\n\ud83e\udd20 INFO     ========================= STEP 4 =========================\n\ud83e\udd16 DEBUG    input_tokens=8,356, output_tokens=39, instance_cost=0.15, cost=0.04\n\ud83e\udd16 DEBUG    total_tokens_sent=32,292, total_tokens_received=134, total_cost=0.15, total_api_calls=4\n\ud83e\udd20 INFO     \ud83d\udcad THOUGHT\n            The changes look good. The colon has been added after the return type annotation, and the indentation is correct. Let's test the file by running it with Python to make\n            sure it works now:\n\n            \ud83c\udfac ACTION\n            python tests/missing_colon.py\n\ud83e\uddf0 DEBUG    Retrieved state from environment: {'open_file': '/SWE-agent__test-repo/tests/missing_colon.py', 'working_dir': '/SWE-agent__test-repo'}\n\ud83e\udd20 INFO     \ud83e\udd16 MODEL INPUT\n            8.2\n            (Open file: /SWE-agent__test-repo/tests/missing_colon.py)\n            (Current directory: /SWE-agent__test-repo)\n            bash-$\n\ud83e\udd20 INFO     ========================= STEP 5 =========================\n\ud83e\udd16 DEBUG    input_tokens=8,444, output_tokens=37, instance_cost=0.19, cost=0.04\n\ud83e\udd16 DEBUG    total_tokens_sent=40,736, total_tokens_received=171, total_cost=0.19, total_api_calls=5\n\ud83e\udd20 INFO     \ud83d\udcad THOUGHT\n            The file now runs successfully and produces the expected output (123/15 = 8.2). Let's also test the division with zero case that was mentioned in the issue description:\n\n            \ud83c\udfac ACTION\n            create test_division.py\n\ud83e\uddf0 DEBUG    Retrieved state from environment: {'open_file': '/SWE-agent__test-repo/test_division.py', 'working_dir': '/SWE-agent__test-repo'}\n\ud83e\udd20 INFO     \ud83e\udd16 MODEL INPUT\n            [File: test_division.py (1 lines total)]\n            1:\n            (Open file: /SWE-agent__test-repo/test_division.py)\n            (Current directory: /SWE-agent__test-repo)\n            bash-$\n\ud83e\udd20 INFO     ========================= STEP 6 =========================\n\ud83e\udd16 DEBUG    input_tokens=8,535, output_tokens=14, instance_cost=0.23, cost=0.04\n\ud83e\udd16 DEBUG    total_tokens_sent=49,271, total_tokens_received=185, total_cost=0.23, total_api_calls=6\n\ud83e\udd20 INFO     \ud83d\udcad THOUGHT\n            Let's create a test script that imports and tests the division function:\n\n            \ud83c\udfac ACTION\n            insert 'from tests.missing_colon import division\n\n            try:\n                result = division(23, 0)\n                print(\"This should not be printed - division by zero should raise an error\")\n            except ZeroDivisionError:\n                print(\"Test passed: Division by zero correctly raises ZeroDivisionError\")\n\n            # Test normal case\n            result = division(10, 2)\n            print(f\"10/2 = {result}\")'\n\ud83e\uddf0 DEBUG    Retrieved state from environment: {'open_file': '/SWE-agent__test-repo/test_division.py', 'working_dir': '/SWE-agent__test-repo'}\n\ud83e\udd20 INFO     \ud83e\udd16 MODEL INPUT\n            [File: /SWE-agent__test-repo/test_division.py (12 lines total)]\n            1:\n            2:from tests.missing_colon import division\n            3:\n            4:try:\n            5:    result = division(23, 0)\n            6:    print(\"This should not be printed - division by zero should raise an error\")\n            7:except ZeroDivisionError:\n            8:    print(\"Test passed: Division by zero correctly raises ZeroDivisionError\")\n            9:\n            10:# Test normal case\n            11:result = division(10, 2)\n            12:print(f\"10/2 = {result}\")\n            (Open file: /SWE-agent__test-repo/test_division.py)\n            (Current directory: /SWE-agent__test-repo)\n            bash-$\n\ud83e\udd20 INFO     ========================= STEP 7 =========================\n\ud83e\udd16 DEBUG    input_tokens=8,754, output_tokens=16, instance_cost=0.27, cost=0.04\n\ud83e\udd16 DEBUG    total_tokens_sent=58,025, total_tokens_received=201, total_cost=0.27, total_api_calls=7\n\ud83e\udd20 INFO     \ud83d\udcad THOUGHT\n            Let's run the test script to verify both normal division and division by zero:\n\n            \ud83c\udfac ACTION\n            python test_division.py\n\ud83e\uddf0 DEBUG    Retrieved state from environment: {'open_file': '/SWE-agent__test-repo/test_division.py', 'working_dir': '/SWE-agent__test-repo'}\n\ud83e\udd20 INFO     \ud83e\udd16 MODEL INPUT\n            Test passed: Division by zero correctly raises ZeroDivisionError\n            10/2 = 5.0\n            (Open file: /SWE-agent__test-repo/test_division.py)\n            (Current directory: /SWE-agent__test-repo)\n            bash-$\n\ud83e\udd20 INFO     ========================= STEP 8 =========================\n\ud83e\udd16 DEBUG    input_tokens=8,731, output_tokens=57, instance_cost=0.31, cost=0.04\n\ud83e\udd16 DEBUG    total_tokens_sent=66,756, total_tokens_received=258, total_cost=0.31, total_api_calls=8\n\ud83e\udd20 INFO     \ud83d\udcad THOUGHT\n            The tests pass successfully. The function now works as expected:\n            1. It handles normal division correctly\n            2. It properly raises a ZeroDivisionError when dividing by zero\n            3. The syntax error is fixed\n\n            Let's clean up our test file since we don't need it anymore:\n\n            \ud83c\udfac ACTION\n            rm test_division.py\n\ud83e\uddf0 DEBUG    Retrieved state from environment: {'open_file': '/SWE-agent__test-repo/test_division.py', 'working_dir': '/SWE-agent__test-repo'}\n\ud83e\udd20 INFO     \ud83e\udd16 MODEL INPUT\n            Your command ran successfully and did not produce any output.\n            (Open file: /SWE-agent__test-repo/test_division.py)\n            (Current directory: /SWE-agent__test-repo)\n            bash-$\n\ud83e\udd20 INFO     ========================= STEP 9 =========================\n\ud83e\udd16 DEBUG    input_tokens=8,679, output_tokens=7, instance_cost=0.35, cost=0.04\n\ud83e\udd16 DEBUG    total_tokens_sent=75,435, total_tokens_received=265, total_cost=0.35, total_api_calls=9\n\ud83e\udd20 INFO     \ud83d\udcad THOUGHT\n            Now we can submit our changes:\n\n            \ud83c\udfac ACTION\n            submit\n\ud83e\uddf0 DEBUG    Retrieved state from environment: {'open_file': '/SWE-agent__test-repo/test_division.py', 'working_dir': '/SWE-agent__test-repo'}\n\ud83e\udd20 INFO     Found submission:\n            diff --git a/tests/missing_colon.py b/tests/missing_colon.py\n            index 20edef5..5857437 100755\n            --- a/tests/missing_colon.py\n            +++ b/tests/missing_colon.py\n            @@ -1,7 +1,7 @@\n             #!/usr/bin/env python3\n\n\n            -def division(a: float, b: float) -&gt; float\n            +def division(a: float, b: float) -&gt; float:\n                 return a/b\n\n\n\n\ud83e\udd20 INFO     \ud83e\udd16 MODEL INPUT\n\n            diff --git a/tests/missing_colon.py b/tests/missing_colon.py\n            index 20edef5..5857437 100755\n            --- a/tests/missing_colon.py\n            +++ b/tests/missing_colon.py\n            @@ -1,7 +1,7 @@\n             #!/usr/bin/env python3\n\n\n            -def division(a: float, b: float) -&gt; float\n            +def division(a: float, b: float) -&gt; float:\n                 return a/b\n\n\n\n            (Open file: /SWE-agent__test-repo/test_division.py)\n            (Current directory: /SWE-agent__test-repo)\n            bash-$\n\ud83e\udd20 INFO     Trajectory saved to\n            /Users/fuchur/Documents/24/git_sync/SWE-agent/trajectories/fuchur/default__claude-3-5-sonnet-20241022__t-0.00__p-1.00__c-2.00___SWE-agent__test-repo-i1/SWE-agent__test-\n            repo-i1/SWE-agent__test-repo-i1.traj\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83c\udf89 Submission successful \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 SWE-agent has produced a patch that it believes will solve the issue you submitted! \u2502\n\u2502 Use the code snippet below to inspect or apply it!                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n # The patch has been saved to your local filesystem at:\n PATCH_FILE_PATH='/Users/fuchur/Documents/24/git_sync/SWE-agent/trajectories/fuchur/default__claude-3-5-sonnet-20241022__t-0.00__p-1.00__c-2.00___SWE-agent__test-repo-i1/SWE-agent\n test-repo-i1.patch'\n # Inspect it:\n cat \"${PATCH_FILE_PATH}\"\n # Apply it to a local repository:\n cd &lt;your local repo root&gt;\n git apply \"${PATCH_FILE_PATH}\"\n\n\ud83c\udfc3 INFO     Done\n\ud83c\udf31 INFO     Beginning environment shutdown...\n\ud83e\udd96 DEBUG    Ensuring deployment is stopped because object is deleted\n</code></pre> <p>As you can see, the command line options are hierarchical. At the top level, there are three important sections:</p> <ul> <li><code>problem_statement</code>: What problem are you trying to solve?</li> <li><code>agent</code>: How do you want to solve the problem? This includes setting up the LM with <code>--agent.model</code>.</li> <li><code>env</code>: What is the environment in which the problem statement should be solved?   This includes setting the repository/folder with the source files with <code>--env.repo</code>, as well as docker images and other dependencies.   This will also control where the code is executed (in a local container or in the cloud).</li> </ul> <p>Watching the output, you can notice several stages:</p> <ol> <li>Setting up the deployment: SWE-agent lets LMs execute actions in sandboxed environments. It can run these environments    in docker containers (default), on modal, AWS fargate, or directly on your computer (not recommended).    When the deployment starts, you will notice a \"starting runtime\" message that takes a few seconds. The runtime is    what is executing the commands within your deployment.    Deployments are managed by a package called <code>SWE-ReX</code>.</li> <li>Setting up tools: The tools that you specified are copied and installed within the environment.</li> <li>System and instance prompts: The initial instructions are shown to the LM. They are fully configurable.</li> <li>Main loop: The LM starts to suggest and execute actions.</li> <li>Submission: The LM calls <code>submit</code> and we extract the patch (i.e., the changes to the source code that solve the problem).</li> </ol> <p>The complete details of the run are saved as a \"trajectory\" file). They can also be turned into new demonstrations together with other log and output files.</p> <p>Wetted your appetite? Head over to the command line basics tutorial to learn more about the options.</p>"},{"location":"usage/inspector/","title":"Inspecting trajectories","text":"<p>Inspecting trajectories</p> <ul> <li>Trajectories are the main output of SWE-agent. They are the best way to understand what SWE-agent does, especially when running on many problem instances.</li> <li>We provide two tools for visualizing the <code>.traj</code> files from the <code>trajectories</code> folder more easily.</li> <li>Use <code>swe-agent inspect</code> (or <code>sweagent i</code>) to open the command line inspector.</li> <li>Use <code>swe-agent inspector</code> (or <code>sweagent I</code>) to open the web inspector.</li> <li>Please complete the hello world tutorial before proceeding.</li> </ul> <p>You should see a folder called <code>trajectories</code> in your working directory. Let's go to one of the experiment directories:</p> <pre><code>cd trajectories/$USER/&lt;some directory&gt;  # (1)!\n</code></pre> <ol> <li>Don't have a folder here? Make sure to run SWE-agent at least once.</li> </ol>"},{"location":"usage/inspector/#command-line-inspector","title":"Command line inspector","text":"<p>Run the inspector in the directory containing your <code>.traj</code> files:</p> <pre><code>sweagent inspect\n# or\nsweagent i\n</code></pre> <p>You will be put into a pager that lets you navigate between trajectories. Here's how to navigate (this is similar to vim keybindings):</p> <ul> <li>Use <code>q</code> to quit</li> <li>Switching between trajectories:<ul> <li><code>H</code> and <code>L</code> go to the previous/next trajectory</li> <li><code>t</code> brings up a list of all trajectories. Use type-ahead search to find a specific trajectory (once your search string results in a single match, the trajectory will be opened). Press <code>&lt;TAB&gt;</code> to cycle through the list of matches.</li> </ul> </li> <li>Use <code>h</code> and <code>l</code> to navigate between the steps in the trjaectory</li> <li>Use <code>j</code> and <code>k</code> to scroll down/up</li> <li>By default we only show reduced information. You can press <code>v</code> to toggle the view.</li> <li>Press <code>o</code> to open the logs</li> <li>Sometimes you see that you can press <code>e</code> to open a file in your <code>$EDITOR</code>. For this to work, the <code>EDITOR</code> environment variable must be set (e.g., to <code>nano</code> or <code>vim</code>).</li> </ul>"},{"location":"usage/inspector/#web-based-inspector","title":"Web-based inspector","text":"<p>Run the inspector in this directory (this is where your <code>*.traj</code> files are):</p> <p><pre><code>sweagent inspector\n# or\nsweagent I\n</code></pre> The inspector will then be launched in the browser:</p> <p> </p> <p>Additional flags</p> <ul> <li><code>--directory</code>: Directory of trajectories to inspect (Defaults to current directory)</li> <li><code>--port</code>: Port to host web app (Defaults to <code>8000</code>).</li> </ul>"},{"location":"usage/inspector/#benchmark-results","title":"Benchmark results","text":"<p>If you are running SWE-agent on a benchmark (see batch mode), you will see evaluation results as \u2705 or \u274c. Otherwise, you will see \u2753.</p> <p>Tip</p> <ul> <li>If you do not see evaluation results, make sure that the SWE-bench output   is called <code>results.json</code> and is in the same directory as the trajectories.</li> <li>To see gold patches, point <code>--data_path</code> to the SWE-bench dataset.</li> </ul> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"usage/leetcode_example/","title":"Leetcode example","text":"<p>Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.</p> <p>You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.</p>"},{"location":"usage/leetcode_example/#example-1","title":"Example 1:","text":"<p>Input: nums = [1,2,0] Output: 3 Explanation: The numbers in the range [1,2] are all in the array.</p>"},{"location":"usage/leetcode_example/#example-2","title":"Example 2:","text":"<p>Input: nums = [3,4,-1,1] Output: 2 Explanation: 1 is in the array but 2 is missing.</p>"},{"location":"usage/leetcode_example/#example-3","title":"Example 3:","text":"<p>Input: nums = [7,8,9,11,12] Output: 1 Explanation: The smallest positive integer 1 is missing.</p>"},{"location":"usage/leetcode_example/#constraints","title":"Constraints:","text":"<p>1 &lt;= nums.length &lt;= 105 -231 &lt;= nums[i] &lt;= 231 - 1</p>"},{"location":"usage/trajectories/","title":"Output files","text":"<p>The <code>trajectories/</code> folder is the default location that experiment results (for example invocations of <code>sweagent run</code>) will be written to.</p>"},{"location":"usage/trajectories/#trajectories","title":"Trajectories","text":"<p>The main output file is <code>&lt;instance_id&gt;.traj</code>, which is a <code>.json</code> formatted file containing the (thought, action, observation) turns generated by SWE-agent towards solving <code>&lt;instance_id&gt;</code>.</p> <p>Under the <code>trajectory</code> key, you can see information for every step of the agent. It looks something like this:</p> <pre><code>{\n  \"action\": \"ls -F\\n\",\n  \"observation\": \"AUTHORS.rst\\nCHANGELOG.rst\\nCODE_OF_CONDUCT.md...\",\n  \"response\": \"We are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py`...\",\n  \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/reproduce.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n  \"thought\": \"We are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py`...\"\n},\n</code></pre> <p>Here's a full example:</p> Example trajectory  Note: This trajectory is from SWE-agent v0.7.0. It might look different in newer versions.  <pre><code>{\n    \"environment\": \"swe_main\",\n    \"trajectory\": [\n        {\n            \"action\": \"ls -F\\n\",\n            \"observation\": \"AUTHORS.rst\\nCHANGELOG.rst\\nCODE_OF_CONDUCT.md\\nCONTRIBUTING.rst\\nLICENSE\\nMANIFEST.in\\nNOTICE\\nREADME.rst\\nRELEASING.md\\nazure-pipelines.yml\\ndocs/\\nexamples/\\nperformance/\\npyproject.toml\\nsetup.cfg\\nsetup.py\\nsrc/\\ntests/\\ntox.ini\\n\",\n            \"response\": \"Let's list out some of the files in the repository to get an idea of the structure and contents. We can use the `ls -F` command to list the files in the current directory.\\n```\\nls -F\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"n/a\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"Let's list out some of the files in the repository to get an idea of the structure and contents. We can use the `ls -F` command to list the files in the current directory.\\n\"\n        },\n        {\n            \"action\": \"open setup.py\\n\",\n            \"observation\": \"[File: /marshmallow-code__marshmallow/setup.py (94 lines total)]\\n1:import re\\n2:from setuptools import setup, find_packages\\n3:\\n4:EXTRAS_REQUIRE = {\\n5:    \\\"tests\\\": [\\\"pytest\\\", \\\"pytz\\\", \\\"simplejson\\\"],\\n6:    \\\"lint\\\": [\\n7:        \\\"mypy==0.910\\\",\\n8:        \\\"flake8==4.0.1\\\",\\n9:        \\\"flake8-bugbear==21.9.2\\\",\\n10:        \\\"pre-commit~=2.4\\\",\\n11:    ],\\n12:    \\\"docs\\\": [\\n13:        \\\"sphinx==4.2.0\\\",\\n14:        \\\"sphinx-issues==1.2.0\\\",\\n15:        \\\"alabaster==0.7.12\\\",\\n16:        \\\"sphinx-version-warning==1.1.2\\\",\\n17:        \\\"autodocsumm==0.2.7\\\",\\n18:    ],\\n19:}\\n20:EXTRAS_REQUIRE[\\\"dev\\\"] = EXTRAS_REQUIRE[\\\"tests\\\"] + EXTRAS_REQUIRE[\\\"lint\\\"] + [\\\"tox\\\"]\\n21:\\n22:\\n23:def find_version(fname):\\n24:    \\\"\\\"\\\"Attempts to find the version number in the file names fname.\\n25:    Raises RuntimeError if not found.\\n26:    \\\"\\\"\\\"\\n27:    version = \\\"\\\"\\n28:    with open(fname) as fp:\\n29:        reg = re.compile(r'__version__ = [\\\\'\\\"]([^\\\\'\\\"]*)[\\\\'\\\"]')\\n30:        for line in fp:\\n31:            m = reg.match(line)\\n32:            if m:\\n33:                version = m.group(1)\\n34:                break\\n35:    if not version:\\n36:        raise RuntimeError(\\\"Cannot find version information\\\")\\n37:    return version\\n38:\\n39:\\n40:def read(fname):\\n41:    with open(fname) as fp:\\n42:        content = fp.read()\\n43:    return content\\n44:\\n45:\\n46:setup(\\n47:    name=\\\"marshmallow\\\",\\n48:    version=find_version(\\\"src/marshmallow/__init__.py\\\"),\\n49:    description=(\\n50:        \\\"A lightweight library for converting complex \\\"\\n51:        \\\"datatypes to and from native Python datatypes.\\\"\\n52:    ),\\n53:    long_description=read(\\\"README.rst\\\"),\\n54:    author=\\\"Steven Loria\\\",\\n55:    author_email=\\\"sloria1@gmail.com\\\",\\n56:    url=\\\"https://github.com/marshmallow-code/marshmallow\\\",\\n57:    packages=find_packages(\\\"src\\\", exclude=(\\\"test*\\\", \\\"examples\\\")),\\n58:    package_dir={\\\"\\\": \\\"src\\\"},\\n59:    package_data={\\\"marshmallow\\\": [\\\"py.typed\\\"]},\\n60:    include_package_data=True,\\n61:    extras_require=EXTRAS_REQUIRE,\\n62:    license=\\\"MIT\\\",\\n63:    zip_safe=False,\\n64:    keywords=[\\n65:        \\\"serialization\\\",\\n66:        \\\"rest\\\",\\n67:        \\\"json\\\",\\n68:        \\\"api\\\",\\n69:        \\\"marshal\\\",\\n70:        \\\"marshalling\\\",\\n71:        \\\"deserialization\\\",\\n72:        \\\"validation\\\",\\n73:        \\\"schema\\\",\\n74:    ],\\n75:    python_requires=\\\"&gt;=3.6\\\",\\n76:    classifiers=[\\n77:        \\\"Development Status :: 5 - Production/Stable\\\",\\n78:        \\\"Intended Audience :: Developers\\\",\\n79:        \\\"License :: OSI Approved :: MIT License\\\",\\n80:        \\\"Programming Language :: Python :: 3\\\",\\n81:        \\\"Programming Language :: Python :: 3.6\\\",\\n82:        \\\"Programming Language :: Python :: 3.7\\\",\\n83:        \\\"Programming Language :: Python :: 3.8\\\",\\n84:        \\\"Programming Language :: Python :: 3.9\\\",\\n85:        \\\"Programming Language :: Python :: 3.10\\\",\\n86:    ],\\n87:    test_suite=\\\"tests\\\",\\n88:    project_urls={\\n89:        \\\"Changelog\\\": \\\"https://marshmallow.readthedocs.io/en/latest/changelog.html\\\",\\n90:        \\\"Issues\\\": \\\"https://github.com/marshmallow-code/marshmallow/issues\\\",\\n91:        \\\"Funding\\\": \\\"https://opencollective.com/marshmallow\\\",\\n92:        \\\"Tidelift\\\": \\\"https://tidelift.com/subscription/pkg/pypi-marshmallow?utm_source=pypi-marshmallow&amp;utm_medium=pypi\\\",  # noqa\\n93:    },\\n94:)\\n\",\n            \"response\": \"We see that there's a setup.py file. This could be useful for installing the package locally. Since we'll probably need to reproduce the issue to solve it, it would be a good idea to install the package locally. Let's checkout the setup.py file to see what commands we can use to install the package.\\n```\\nopen setup.py\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"n/a\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"We see that there's a setup.py file. This could be useful for installing the package locally. Since we'll probably need to reproduce the issue to solve it, it would be a good idea to install the package locally. Let's checkout the setup.py file to see what commands we can use to install the package.\\n\"\n        },\n        {\n            \"action\": \"pip install -e .[dev]\\n\",\n            \"observation\": \"Obtaining file:///marshmallow-code__marshmallow\\n  Installing build dependencies: started\\n  Installing build dependencies: finished with status 'done'\\n  Checking if build backend supports build_editable: started\\n  Checking if build backend supports build_editable: finished with status 'done'\\n  Getting requirements to build editable: started\\n  Getting requirements to build editable: finished with status 'done'\\n  Preparing editable metadata (pyproject.toml): started\\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\\nRequirement already satisfied: pytest in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (8.1.1)\\nRequirement already satisfied: pytz in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (2024.1)\\nRequirement already satisfied: simplejson in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (3.19.2)\\nRequirement already satisfied: mypy==0.910 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (0.910)\\nRequirement already satisfied: flake8==4.0.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (4.0.1)\\nRequirement already satisfied: flake8-bugbear==21.9.2 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (21.9.2)\\nRequirement already satisfied: pre-commit~=2.4 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (2.21.0)\\nRequirement already satisfied: tox in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (4.14.2)\\nRequirement already satisfied: mccabe&lt;0.7.0,&gt;=0.6.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from flake8==4.0.1) (0.6.1)\\nRequirement already satisfied: pycodestyle&lt;2.9.0,&gt;=2.8.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from flake8==4.0.1) (2.8.0)\\nRequirement already satisfied: pyflakes&lt;2.5.0,&gt;=2.4.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from flake8==4.0.1) (2.4.0)\\nRequirement already satisfied: attrs&gt;=19.2.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from flake8-bugbear==21.9.2) (23.2.0)\\nRequirement already satisfied: typing-extensions&gt;=3.7.4 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from mypy==0.910) (4.10.0)\\nRequirement already satisfied: mypy-extensions&lt;0.5.0,&gt;=0.4.3 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from mypy==0.910) (0.4.4)\\nRequirement already satisfied: toml in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from mypy==0.910) (0.10.2)\\nRequirement already satisfied: cfgv&gt;=2.0.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pre-commit~=2.4) (3.4.0)\\nRequirement already satisfied: identify&gt;=1.0.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pre-commit~=2.4) (2.5.35)\\nRequirement already satisfied: nodeenv&gt;=0.11.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pre-commit~=2.4) (1.8.0)\\nRequirement already satisfied: pyyaml&gt;=5.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pre-commit~=2.4) (6.0.1)\\nRequirement already satisfied: virtualenv&gt;=20.10.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pre-commit~=2.4) (20.25.1)\\nRequirement already satisfied: iniconfig in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pytest) (2.0.0)\\nRequirement already satisfied: packaging in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pytest) (24.0)\\nRequirement already satisfied: pluggy&lt;2.0,&gt;=1.4 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pytest) (1.4.0)\\nRequirement already satisfied: exceptiongroup&gt;=1.0.0rc8 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pytest) (1.2.0)\\nRequirement already satisfied: tomli&gt;=1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pytest) (2.0.1)\\nRequirement already satisfied: cachetools&gt;=5.3.2 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (5.3.3)\\nRequirement already satisfied: chardet&gt;=5.2 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (5.2.0)\\nRequirement already satisfied: colorama&gt;=0.4.6 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (0.4.6)\\nRequirement already satisfied: filelock&gt;=3.13.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (3.13.3)\\nRequirement already satisfied: platformdirs&gt;=4.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (4.2.0)\\nRequirement already satisfied: pyproject-api&gt;=1.6.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (1.6.1)\\nRequirement already satisfied: setuptools in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from nodeenv&gt;=0.11.1-&gt;pre-commit~=2.4) (68.2.2)\\nRequirement already satisfied: distlib&lt;1,&gt;=0.3.7 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from virtualenv&gt;=20.10.0-&gt;pre-commit~=2.4) (0.3.8)\\nChecking if build backend supports build_editable: started\\nChecking if build backend supports build_editable: finished with status 'done'\\nBuilding wheels for collected packages: marshmallow\\n  Building editable for marshmallow (pyproject.toml): started\\n  Building editable for marshmallow (pyproject.toml): finished with status 'done'\\n  Created wheel for marshmallow: filename=marshmallow-3.13.0-0.editable-py3-none-any.whl size=4534 sha256=fcca61a41cd2783d4a5b8471ebc48cf886d36f6c66a29cc9b02761fc174a024d\\n  Stored in directory: /tmp/pip-ephem-wheel-cache-h335xxo8/wheels/4d/da/d4/e230bf0a3f16cad5a83d235ac24a34b55178ddda181cb64dae\\nSuccessfully built marshmallow\\nInstalling collected packages: marshmallow\\n  Attempting uninstall: marshmallow\\n    Found existing installation: marshmallow 3.13.0\\n    Uninstalling marshmallow-3.13.0:\\n      Successfully uninstalled marshmallow-3.13.0\\nSuccessfully installed marshmallow-3.13.0\\nWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\\n\",\n            \"response\": \"The setup.py file contains a lot of useful information to install the package locally. In particular, I see there's a [dev] extras that installs all the dependencies needed for development. We can use this to install the package with all the necessary dependencies. Let's install the package locally with the [dev] extras.\\n```\\npip install -e .[dev]\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/setup.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"The setup.py file contains a lot of useful information to install the package locally. In particular, I see there's a [dev] extras that installs all the dependencies needed for development. We can use this to install the package with all the necessary dependencies. Let's install the package locally with the [dev] extras.\\n\"\n        },\n        {\n            \"action\": \"create reproduce.py\\n\",\n            \"observation\": \"[File: /marshmallow-code__marshmallow/reproduce.py (1 lines total)]\\n1:\\n\",\n            \"response\": \"Looks like it installed successfully. Now that we have the package installed, we can start working on the issue.\\nLet's first start by reproducing the results of the issue. The issue includes some example code for reproduction, which we can use. We'll create a new file called `reproduce.py` and paste the example code into it.\\n```\\ncreate reproduce.py\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/setup.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"Looks like it installed successfully. Now that we have the package installed, we can start working on the issue.\\nLet's first start by reproducing the results of the issue. The issue includes some example code for reproduction, which we can use. We'll create a new file called `reproduce.py` and paste the example code into it.\\n\"\n        },\n        {\n            \"action\": \"edit 1:1\\nfrom marshmallow.fields import TimeDelta\\nfrom datetime import timedelta\\n\\ntd_field = TimeDelta(precision=\\\"milliseconds\\\")\\n\\nobj = dict()\\nobj[\\\"td_field\\\"] = timedelta(milliseconds=345)\\n\\nprint(td_field.serialize(\\\"td_field\\\", obj))\\nend_of_edit\\n\",\n            \"observation\": \"[File: /marshmallow-code__marshmallow/reproduce.py (9 lines total)]\\n1:from marshmallow.fields import TimeDelta\\n2:from datetime import timedelta\\n3:\\n4:td_field = TimeDelta(precision=\\\"milliseconds\\\")\\n5:\\n6:obj = dict()\\n7:obj[\\\"td_field\\\"] = timedelta(milliseconds=345)\\n8:\\n9:print(td_field.serialize(\\\"td_field\\\", obj))\\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\\n\",\n            \"response\": \"Now let's paste in the example code from the issue.\\n```\\nedit 1:1\\nfrom marshmallow.fields import TimeDelta\\nfrom datetime import timedelta\\n\\ntd_field = TimeDelta(precision=\\\"milliseconds\\\")\\n\\nobj = dict()\\nobj[\\\"td_field\\\"] = timedelta(milliseconds=345)\\n\\nprint(td_field.serialize(\\\"td_field\\\", obj))\\nend_of_edit\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/reproduce.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"Now let's paste in the example code from the issue.\\n\"\n        },\n        {\n            \"action\": \"python reproduce.py\\n\",\n            \"observation\": \"344\\n\",\n            \"response\": \"Now let's run the code to see if we see the same output as the issue.\\n```\\npython reproduce.py\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/reproduce.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"Now let's run the code to see if we see the same output as the issue.\\n\"\n        },\n        {\n            \"action\": \"ls -F\\n\",\n            \"observation\": \"AUTHORS.rst\\nCHANGELOG.rst\\nCODE_OF_CONDUCT.md\\nCONTRIBUTING.rst\\nLICENSE\\nMANIFEST.in\\nNOTICE\\nREADME.rst\\nRELEASING.md\\nazure-pipelines.yml\\ndocs/\\nexamples/\\nperformance/\\npyproject.toml\\nreproduce.py\\nsetup.cfg\\nsetup.py\\nsrc/\\ntests/\\ntox.ini\\n\",\n            \"response\": \"We are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py` file to see if there is a rounding issue. Let's open the `fields.py` file and navigate to line 1474 to see the relevant code. First we should find the `fields.py` file in the repository. It is likely to be in the `src/marshmallow` directory, but we should check to be sure.\\n```\\nls -F\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/reproduce.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"We are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py` file to see if there is a rounding issue. Let's open the `fields.py` file and navigate to line 1474 to see the relevant code. First we should find the `fields.py` file in the repository. It is likely to be in the `src/marshmallow` directory, but we should check to be sure.\\n\"\n        },\n        {\n            \"action\": \"find_file \\\"fields.py\\\" src\\n\",\n            \"observation\": \"Found 1 matches for \\\"fields.py\\\" in /marshmallow-code__marshmallow/src:\\n/marshmallow-code__marshmallow/src/marshmallow/fields.py\\n\",\n            \"response\": \"It looks like the `src` directory is present, which suggests that the `fields.py` file is likely to be in the `src` directory. Let's use find_file to see where it is.\\n```\\nfind_file \\\"fields.py\\\" src\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/reproduce.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"It looks like the `src` directory is present, which suggests that the `fields.py` file is likely to be in the `src` directory. Let's use find_file to see where it is.\\n\"\n        },\n        {\n            \"action\": \"open src/marshmallow/fields.py 1474\\n\",\n            \"observation\": \"[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\\n(1458 more lines above)\\n1459:            self.WEEKS,\\n1460:        )\\n1461:\\n1462:        if precision not in units:\\n1463:            msg = 'The precision must be {} or \\\"{}\\\".'.format(\\n1464:                \\\", \\\".join([f'\\\"{each}\\\"' for each in units[:-1]]), units[-1]\\n1465:            )\\n1466:            raise ValueError(msg)\\n1467:\\n1468:        self.precision = precision\\n1469:        super().__init__(**kwargs)\\n1470:\\n1471:    def _serialize(self, value, attr, obj, **kwargs):\\n1472:        if value is None:\\n1473:            return None\\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\\n1475:        return int(value.total_seconds() / base_unit.total_seconds())\\n1476:\\n1477:    def _deserialize(self, value, attr, data, **kwargs):\\n1478:        try:\\n1479:            value = int(value)\\n1480:        except (TypeError, ValueError) as error:\\n1481:            raise self.make_error(\\\"invalid\\\") from error\\n1482:\\n1483:        kwargs = {self.precision: value}\\n1484:\\n1485:        try:\\n1486:            return dt.timedelta(**kwargs)\\n1487:        except OverflowError as error:\\n1488:            raise self.make_error(\\\"invalid\\\") from error\\n1489:\\n1490:\\n1491:class Mapping(Field):\\n1492:    \\\"\\\"\\\"An abstract class for objects with key-value pairs.\\n1493:\\n1494:    :param keys: A field class or instance for dict keys.\\n1495:    :param values: A field class or instance for dict values.\\n1496:    :param kwargs: The same keyword arguments that :class:`Field` receives.\\n1497:\\n1498:    .. note::\\n1499:        When the structure of nested data is not known, you may omit the\\n1500:        `keys` and `values` arguments to prevent content validation.\\n1501:\\n1502:    .. versionadded:: 3.0.0rc4\\n1503:    \\\"\\\"\\\"\\n1504:\\n1505:    mapping_type = dict\\n1506:\\n1507:    #: Default error messages.\\n1508:    default_error_messages = {\\\"invalid\\\": \\\"Not a valid mapping type.\\\"}\\n1509:\\n1510:    def __init__(\\n1511:        self,\\n1512:        keys: typing.Optional[typing.Union[Field, type]] = None,\\n1513:        values: typing.Optional[typing.Union[Field, type]] = None,\\n1514:        **kwargs,\\n1515:    ):\\n1516:        super().__init__(**kwargs)\\n1517:        if keys is None:\\n1518:            self.key_field = None\\n1519:        else:\\n1520:            try:\\n1521:                self.key_field = resolve_field_instance(keys)\\n1522:            except FieldInstanceResolutionError as error:\\n1523:                raise ValueError(\\n1524:                    '\\\"keys\\\" must be a subclass or instance of '\\n1525:                    \\\"marshmallow.base.FieldABC.\\\"\\n1526:                ) from error\\n1527:\\n1528:        if values is None:\\n1529:            self.value_field = None\\n1530:        else:\\n1531:            try:\\n1532:                self.value_field = resolve_field_instance(values)\\n1533:            except FieldInstanceResolutionError as error:\\n1534:                raise ValueError(\\n1535:                    '\\\"values\\\" must be a subclass or instance of '\\n1536:                    \\\"marshmallow.base.FieldABC.\\\"\\n1537:                ) from error\\n1538:            if isinstance(self.value_field, Nested):\\n1539:                self.only = self.value_field.only\\n1540:                self.exclude = self.value_field.exclude\\n1541:\\n1542:    def _bind_to_schema(self, field_name, schema):\\n1543:        super()._bind_to_schema(field_name, schema)\\n1544:        if self.value_field:\\n1545:            self.value_field = copy.deepcopy(self.value_field)\\n1546:            self.value_field._bind_to_schema(field_name, self)\\n1547:        if isinstance(self.value_field, Nested):\\n1548:            self.value_field.only = self.only\\n1549:            self.value_field.exclude = self.exclude\\n1550:        if self.key_field:\\n1551:            self.key_field = copy.deepcopy(self.key_field)\\n1552:            self.key_field._bind_to_schema(field_name, self)\\n1553:\\n1554:    def _serialize(self, value, attr, obj, **kwargs):\\n1555:        if value is None:\\n1556:            return None\\n1557:        if not self.value_field and not self.key_field:\\n1558:            return self.mapping_type(value)\\n(439 more lines below)\\n\",\n            \"response\": \"It looks like the `fields.py` file is present in the `./src/marshmallow/` directory. The issue also points to a specific URL with line number 1474. We should navigate to that line in fields.py to see the relevant code for the `TimeDelta` serialization.\\n```\\nopen src/marshmallow/fields.py 1474\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/reproduce.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"It looks like the `fields.py` file is present in the `./src/marshmallow/` directory. The issue also points to a specific URL with line number 1474. We should navigate to that line in fields.py to see the relevant code for the `TimeDelta` serialization.\\n\"\n        },\n        {\n            \"action\": \"edit 1475:1475\\nreturn int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\nend_of_edit\\n\",\n            \"observation\": \"Your proposed edit has introduced new syntax error(s). Please understand the fixes and retry your edit commmand.\\n\\nERRORS:\\n- E999 IndentationError: unexpected indent\\n\\nThis is how your edit would have looked if applied\\n-------------------------------------------------\\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\\n(1468 more lines above)\\n1469:        super().__init__(**kwargs)\\n1470:\\n1471:    def _serialize(self, value, attr, obj, **kwargs):\\n1472:        if value is None:\\n1473:            return None\\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\\n1475:return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\n1476:\\n1477:    def _deserialize(self, value, attr, data, **kwargs):\\n1478:        try:\\n1479:            value = int(value)\\n(518 more lines below)\\n-------------------------------------------------\\n\\nThis is the original code before your edit\\n-------------------------------------------------\\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\\n(1469 more lines above)\\n1470:\\n1471:    def _serialize(self, value, attr, obj, **kwargs):\\n1472:        if value is None:\\n1473:            return None\\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\\n1475:        return int(value.total_seconds() / base_unit.total_seconds())\\n1476:\\n1477:    def _deserialize(self, value, attr, data, **kwargs):\\n1478:        try:\\n1479:            value = int(value)\\n1480:        except (TypeError, ValueError) as error:\\n(517 more lines below)\\n-------------------------------------------------\\nYour changes have NOT been applied. Please fix your edit command and try again.\\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\\n\",\n            \"response\": \"We are now looking at the relevant section of the `fields.py` file where the `TimeDelta` serialization occurs. The issue suggests that there is a rounding problem near line 1474. The current implementation uses integer division, which truncates the decimal part and can lead to incorrect rounding on line 1475.To fix this issue, we should ensure that the division results in a float, and then round the result to the nearest integer before converting it to an int. This should preserve the milliseconds precision as expected. Let's make the necessary edit to the code.\\n```\\nedit 1475:1475\\nreturn int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\nend_of_edit\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/src/marshmallow/fields.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"We are now looking at the relevant section of the `fields.py` file where the `TimeDelta` serialization occurs. The issue suggests that there is a rounding problem near line 1474. The current implementation uses integer division, which truncates the decimal part and can lead to incorrect rounding on line 1475.To fix this issue, we should ensure that the division results in a float, and then round the result to the nearest integer before converting it to an int. This should preserve the milliseconds precision as expected. Let's make the necessary edit to the code.\\n\"\n        },\n        {\n            \"action\": \"edit 1475:1475\\n        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\nend_of_edit\\n\",\n            \"observation\": \"[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\\n(1424 more lines above)\\n1425:\\n1426:    :param precision: Influences how the integer is interpreted during\\n1427:        (de)serialization. Must be 'days', 'seconds', 'microseconds',\\n1428:        'milliseconds', 'minutes', 'hours' or 'weeks'.\\n1429:    :param kwargs: The same keyword arguments that :class:`Field` receives.\\n1430:\\n1431:    .. versionchanged:: 2.0.0\\n1432:        Always serializes to an integer value to avoid rounding errors.\\n1433:        Add `precision` parameter.\\n1434:    \\\"\\\"\\\"\\n1435:\\n1436:    DAYS = \\\"days\\\"\\n1437:    SECONDS = \\\"seconds\\\"\\n1438:    MICROSECONDS = \\\"microseconds\\\"\\n1439:    MILLISECONDS = \\\"milliseconds\\\"\\n1440:    MINUTES = \\\"minutes\\\"\\n1441:    HOURS = \\\"hours\\\"\\n1442:    WEEKS = \\\"weeks\\\"\\n1443:\\n1444:    #: Default error messages.\\n1445:    default_error_messages = {\\n1446:        \\\"invalid\\\": \\\"Not a valid period of time.\\\",\\n1447:        \\\"format\\\": \\\"{input!r} cannot be formatted as a timedelta.\\\",\\n1448:    }\\n1449:\\n1450:    def __init__(self, precision: str = SECONDS, **kwargs):\\n1451:        precision = precision.lower()\\n1452:        units = (\\n1453:            self.DAYS,\\n1454:            self.SECONDS,\\n1455:            self.MICROSECONDS,\\n1456:            self.MILLISECONDS,\\n1457:            self.MINUTES,\\n1458:            self.HOURS,\\n1459:            self.WEEKS,\\n1460:        )\\n1461:\\n1462:        if precision not in units:\\n1463:            msg = 'The precision must be {} or \\\"{}\\\".'.format(\\n1464:                \\\", \\\".join([f'\\\"{each}\\\"' for each in units[:-1]]), units[-1]\\n1465:            )\\n1466:            raise ValueError(msg)\\n1467:\\n1468:        self.precision = precision\\n1469:        super().__init__(**kwargs)\\n1470:\\n1471:    def _serialize(self, value, attr, obj, **kwargs):\\n1472:        if value is None:\\n1473:            return None\\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\\n1475:        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\n1476:\\n1477:    def _deserialize(self, value, attr, data, **kwargs):\\n1478:        try:\\n1479:            value = int(value)\\n1480:        except (TypeError, ValueError) as error:\\n1481:            raise self.make_error(\\\"invalid\\\") from error\\n1482:\\n1483:        kwargs = {self.precision: value}\\n1484:\\n1485:        try:\\n1486:            return dt.timedelta(**kwargs)\\n1487:        except OverflowError as error:\\n1488:            raise self.make_error(\\\"invalid\\\") from error\\n1489:\\n1490:\\n1491:class Mapping(Field):\\n1492:    \\\"\\\"\\\"An abstract class for objects with key-value pairs.\\n1493:\\n1494:    :param keys: A field class or instance for dict keys.\\n1495:    :param values: A field class or instance for dict values.\\n1496:    :param kwargs: The same keyword arguments that :class:`Field` receives.\\n1497:\\n1498:    .. note::\\n1499:        When the structure of nested data is not known, you may omit the\\n1500:        `keys` and `values` arguments to prevent content validation.\\n1501:\\n1502:    .. versionadded:: 3.0.0rc4\\n1503:    \\\"\\\"\\\"\\n1504:\\n1505:    mapping_type = dict\\n1506:\\n1507:    #: Default error messages.\\n1508:    default_error_messages = {\\\"invalid\\\": \\\"Not a valid mapping type.\\\"}\\n1509:\\n1510:    def __init__(\\n1511:        self,\\n1512:        keys: typing.Optional[typing.Union[Field, type]] = None,\\n1513:        values: typing.Optional[typing.Union[Field, type]] = None,\\n1514:        **kwargs,\\n1515:    ):\\n1516:        super().__init__(**kwargs)\\n1517:        if keys is None:\\n1518:            self.key_field = None\\n1519:        else:\\n1520:            try:\\n1521:                self.key_field = resolve_field_instance(keys)\\n1522:            except FieldInstanceResolutionError as error:\\n1523:                raise ValueError(\\n1524:                    '\\\"keys\\\" must be a subclass or instance of '\\n(473 more lines below)\\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\\n\",\n            \"response\": \"My edit command did not use the proper indentation, I will fix my syntax in this follow up edit command.\\n```\\nedit 1475:1475\\n        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\nend_of_edit\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/src/marshmallow/fields.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"My edit command did not use the proper indentation, I will fix my syntax in this follow up edit command.\\n\"\n        },\n        {\n            \"action\": \"python reproduce.py\\n\",\n            \"observation\": \"345\\n\",\n            \"response\": \"The code has been updated to use the `round` function, which should fix the rounding issue. Before submitting the changes, it would be prudent to run the reproduce.py code again to ensure that this change has the desired effect. I see that \\\"Current directory\\\" is still `/marshmallow-code__marshmallow`, so we can just run `reproduce.py` directly.\\n```\\npython reproduce.py\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/src/marshmallow/fields.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"The code has been updated to use the `round` function, which should fix the rounding issue. Before submitting the changes, it would be prudent to run the reproduce.py code again to ensure that this change has the desired effect. I see that \\\"Current directory\\\" is still `/marshmallow-code__marshmallow`, so we can just run `reproduce.py` directly.\\n\"\n        },\n        {\n            \"action\": \"rm reproduce.py\\n\",\n            \"observation\": \"\",\n            \"response\": \"The output has changed from 344 to 345, which suggests that the rounding issue has been fixed. Let's remove the reproduce.py file since it is no longer needed.\\n```\\nrm reproduce.py\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/src/marshmallow/fields.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"The output has changed from 344 to 345, which suggests that the rounding issue has been fixed. Let's remove the reproduce.py file since it is no longer needed.\\n\"\n        },\n        {\n            \"action\": \"submit\\n\",\n            \"observation\": \"\\ndiff --git a/src/marshmallow/fields.py b/src/marshmallow/fields.py\\nindex ad388c7..20da768 100644\\n--- a/src/marshmallow/fields.py\\n+++ b/src/marshmallow/fields.py\\n@@ -1472,7 +1472,7 @@ class TimeDelta(Field):\\n         if value is None:\\n             return None\\n         base_unit = dt.timedelta(**{self.precision: 1})\\n-        return int(value.total_seconds() / base_unit.total_seconds())\\n+        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\n \\n     def _deserialize(self, value, attr, data, **kwargs):\\n         try:\\n\",\n            \"response\": \"rm doesn't have any output when it deletes successfully, so that must have worked. Now that we have fixed the issue, we should submit our changes to the code base. Let's submit the changes using the `submit` command.\\n```\\nsubmit\\n```\",\n            \"state\": \"{\\\"open_file\\\": \\\"/marshmallow-code__marshmallow/src/marshmallow/fields.py\\\", \\\"working_dir\\\": \\\"/marshmallow-code__marshmallow\\\"}\\n\",\n            \"thought\": \"rm doesn't have any output when it deletes successfully, so that must have worked. Now that we have fixed the issue, we should submit our changes to the code base. Let's submit the changes using the `submit` command.\\n\"\n        }\n    ],\n    \"history\": [\n        {\n            \"message_type\": \"system_prompt\",\n            \"role\": \"system\",\n            \"content\": \"SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\\n\\nThe special interface consists of a file editor that shows you 100 lines of a file at a time.\\nIn addition to typical bash commands, you can also use the following commands to help you navigate and edit files.\\n\\nCOMMANDS:\\nopen:\\n  docstring: opens the file at the given path in the editor. If line_number is provided, the window will be move to include that line\\n  signature: open &lt;path&gt; [&lt;line_number&gt;]\\n  arguments:\\n    - path (string) [required]: the path to the file to open\\n    - line_number (integer) [optional]: the line number to move the window to (if not provided, the window will start at the top of the file)\\n\\ngoto:\\n  docstring: moves the window to show &lt;line_number&gt;\\n  signature: goto &lt;line_number&gt;\\n  arguments:\\n    - line_number (integer) [required]: the line number to move the window to\\n\\nscroll_down:\\n  docstring: moves the window down {WINDOW} lines\\n  signature: scroll_down\\n\\nscroll_up:\\n  docstring: moves the window down {WINDOW} lines\\n  signature: scroll_down\\n\\ncreate:\\n  docstring: creates and opens a new file with the given name\\n  signature: create &lt;filename&gt;\\n  arguments:\\n    - filename (string) [required]: the name of the file to create\\n\\nsubmit:\\n  docstring: submits your current code and terminates the session\\n  signature: submit\\n\\nsearch_dir:\\n  docstring: searches for search_term in all files in dir. If dir is not provided, searches in the current directory\\n  signature: search_dir &lt;search_term&gt; [&lt;dir&gt;]\\n  arguments:\\n    - search_term (string) [required]: the term to search for\\n    - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\\n\\nsearch_file:\\n  docstring: searches for search_term in file. If file is not provided, searches in the current open file\\n  signature: search_file &lt;search_term&gt; [&lt;file&gt;]\\n  arguments:\\n    - search_term (string) [required]: the term to search for\\n    - file (string) [optional]: the file to search in (if not provided, searches in the current open file)\\n\\nfind_file:\\n  docstring: finds all files with the given name in dir. If dir is not provided, searches in the current directory\\n  signature: find_file &lt;file_name&gt; [&lt;dir&gt;]\\n  arguments:\\n    - file_name (string) [required]: the name of the file to search for\\n    - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\\n\\nedit:\\n  docstring: replaces lines &lt;start_line&gt; through &lt;end_line&gt; (inclusive) with the given text in the open file. The replacement text is terminated by a line with only end_of_edit on it. All of the &lt;replacement text&gt; will be entered, so make sure your indentation is formatted properly. Python files will be checked for syntax errors after the edit. If the system detects a syntax error, the edit will not be executed. Simply try to edit the file again, but make sure to read the error message and modify the edit command you issue accordingly. Issuing the same command a second time will just lead to the same error message again.\\n  signature: edit &lt;start_line&gt;:&lt;end_line&gt;\\n&lt;replacement_text&gt;\\nend_of_edit\\n  arguments:\\n    - start_line (integer) [required]: the line number to start the edit at\\n    - end_line (integer) [required]: the line number to end the edit at (inclusive)\\n    - replacement_text (string) [required]: the text to replace the current selection with\\n\\n\\n\\nPlease note that THE EDIT COMMAND REQUIRES PROPER INDENTATION. \\nIf you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not indented correctly will fail and require fixing before it can be run.\\n\\nRESPONSE FORMAT:\\nYour shell prompt is formatted as follows:\\n(Open file: &lt;path&gt;) &lt;cwd&gt; $\\n\\nYou need to format your output using two fields; discussion and command.\\nYour output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:\\nDISCUSSION\\nFirst I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.\\n```\\nls -a\\n```\\n\\nYou should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.\\nIf you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command. \\nYou're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.\\nHowever, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"We're currently solving the following issue within our repository. Here's the issue text:\\nISSUE:\\nTimeDelta serialization precision\\nHi there!\\n\\nI just found quite strange behaviour of `TimeDelta` field serialization\\n\\n```python3\\nfrom marshmallow.fields import TimeDelta\\nfrom datetime import timedelta\\n\\ntd_field = TimeDelta(precision=\\\"milliseconds\\\")\\n\\nobj = dict()\\nobj[\\\"td_field\\\"] = timedelta(milliseconds=345)\\n\\nprint(td_field.serialize(\\\"td_field\\\", obj))\\n```\\n\\nOutput of this snippet is `344`, but it seems that `345` is correct.\\n\\nLooks like a rounding issue here: https://github.com/marshmallow-code/marshmallow/blob/dev/src/marshmallow/fields.py#L1474\\n\\n\\nINSTRUCTIONS:\\nNow, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want. \\nRemember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command. \\nWhen you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\\nNote however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python &lt;script_name&gt;.py`.\\n\\nNOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line! \\n\\nIMPORTANT TIPS:\\n1. Always start by trying to replicate the bug that the issues discusses. \\n   If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\\n   Then start trying to fix it.\\n   When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\\n   \\n   If the bug reproduction script does not print anything when it succesfully runs, we recommend adding a print(\\\"Script completed successfully, no errors.\\\") command at the end of the file,\\n   so that you can be sure that the script indeed ran fine all the way through. \\n\\n2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\\n\\n3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker. \\n   \\n4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \\\"buggy-input.png\\\" If that doensn't work, use the linux 'find' command. \\n\\n5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.\\n\\n6. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\\n   \\n\\n(Open file: n/a)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"Let's list out some of the files in the repository to get an idea of the structure and contents. We can use the `ls -F` command to list the files in the current directory.\\n```\\nls -F\\n```\",\n            \"thought\": \"Let's list out some of the files in the repository to get an idea of the structure and contents. We can use the `ls -F` command to list the files in the current directory.\\n\",\n            \"action\": \"ls -F\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"AUTHORS.rst\\nCHANGELOG.rst\\nCODE_OF_CONDUCT.md\\nCONTRIBUTING.rst\\nLICENSE\\nMANIFEST.in\\nNOTICE\\nREADME.rst\\nRELEASING.md\\nazure-pipelines.yml\\ndocs/\\nexamples/\\nperformance/\\npyproject.toml\\nsetup.cfg\\nsetup.py\\nsrc/\\ntests/\\ntox.ini\\n\\n(Open file: n/a)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"We see that there's a setup.py file. This could be useful for installing the package locally. Since we'll probably need to reproduce the issue to solve it, it would be a good idea to install the package locally. Let's checkout the setup.py file to see what commands we can use to install the package.\\n```\\nopen setup.py\\n```\",\n            \"thought\": \"We see that there's a setup.py file. This could be useful for installing the package locally. Since we'll probably need to reproduce the issue to solve it, it would be a good idea to install the package locally. Let's checkout the setup.py file to see what commands we can use to install the package.\\n\",\n            \"action\": \"open setup.py\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"[File: /marshmallow-code__marshmallow/setup.py (94 lines total)]\\n1:import re\\n2:from setuptools import setup, find_packages\\n3:\\n4:EXTRAS_REQUIRE = {\\n5:    \\\"tests\\\": [\\\"pytest\\\", \\\"pytz\\\", \\\"simplejson\\\"],\\n6:    \\\"lint\\\": [\\n7:        \\\"mypy==0.910\\\",\\n8:        \\\"flake8==4.0.1\\\",\\n9:        \\\"flake8-bugbear==21.9.2\\\",\\n10:        \\\"pre-commit~=2.4\\\",\\n11:    ],\\n12:    \\\"docs\\\": [\\n13:        \\\"sphinx==4.2.0\\\",\\n14:        \\\"sphinx-issues==1.2.0\\\",\\n15:        \\\"alabaster==0.7.12\\\",\\n16:        \\\"sphinx-version-warning==1.1.2\\\",\\n17:        \\\"autodocsumm==0.2.7\\\",\\n18:    ],\\n19:}\\n20:EXTRAS_REQUIRE[\\\"dev\\\"] = EXTRAS_REQUIRE[\\\"tests\\\"] + EXTRAS_REQUIRE[\\\"lint\\\"] + [\\\"tox\\\"]\\n21:\\n22:\\n23:def find_version(fname):\\n24:    \\\"\\\"\\\"Attempts to find the version number in the file names fname.\\n25:    Raises RuntimeError if not found.\\n26:    \\\"\\\"\\\"\\n27:    version = \\\"\\\"\\n28:    with open(fname) as fp:\\n29:        reg = re.compile(r'__version__ = [\\\\'\\\"]([^\\\\'\\\"]*)[\\\\'\\\"]')\\n30:        for line in fp:\\n31:            m = reg.match(line)\\n32:            if m:\\n33:                version = m.group(1)\\n34:                break\\n35:    if not version:\\n36:        raise RuntimeError(\\\"Cannot find version information\\\")\\n37:    return version\\n38:\\n39:\\n40:def read(fname):\\n41:    with open(fname) as fp:\\n42:        content = fp.read()\\n43:    return content\\n44:\\n45:\\n46:setup(\\n47:    name=\\\"marshmallow\\\",\\n48:    version=find_version(\\\"src/marshmallow/__init__.py\\\"),\\n49:    description=(\\n50:        \\\"A lightweight library for converting complex \\\"\\n51:        \\\"datatypes to and from native Python datatypes.\\\"\\n52:    ),\\n53:    long_description=read(\\\"README.rst\\\"),\\n54:    author=\\\"Steven Loria\\\",\\n55:    author_email=\\\"sloria1@gmail.com\\\",\\n56:    url=\\\"https://github.com/marshmallow-code/marshmallow\\\",\\n57:    packages=find_packages(\\\"src\\\", exclude=(\\\"test*\\\", \\\"examples\\\")),\\n58:    package_dir={\\\"\\\": \\\"src\\\"},\\n59:    package_data={\\\"marshmallow\\\": [\\\"py.typed\\\"]},\\n60:    include_package_data=True,\\n61:    extras_require=EXTRAS_REQUIRE,\\n62:    license=\\\"MIT\\\",\\n63:    zip_safe=False,\\n64:    keywords=[\\n65:        \\\"serialization\\\",\\n66:        \\\"rest\\\",\\n67:        \\\"json\\\",\\n68:        \\\"api\\\",\\n69:        \\\"marshal\\\",\\n70:        \\\"marshalling\\\",\\n71:        \\\"deserialization\\\",\\n72:        \\\"validation\\\",\\n73:        \\\"schema\\\",\\n74:    ],\\n75:    python_requires=\\\"&gt;=3.6\\\",\\n76:    classifiers=[\\n77:        \\\"Development Status :: 5 - Production/Stable\\\",\\n78:        \\\"Intended Audience :: Developers\\\",\\n79:        \\\"License :: OSI Approved :: MIT License\\\",\\n80:        \\\"Programming Language :: Python :: 3\\\",\\n81:        \\\"Programming Language :: Python :: 3.6\\\",\\n82:        \\\"Programming Language :: Python :: 3.7\\\",\\n83:        \\\"Programming Language :: Python :: 3.8\\\",\\n84:        \\\"Programming Language :: Python :: 3.9\\\",\\n85:        \\\"Programming Language :: Python :: 3.10\\\",\\n86:    ],\\n87:    test_suite=\\\"tests\\\",\\n88:    project_urls={\\n89:        \\\"Changelog\\\": \\\"https://marshmallow.readthedocs.io/en/latest/changelog.html\\\",\\n90:        \\\"Issues\\\": \\\"https://github.com/marshmallow-code/marshmallow/issues\\\",\\n91:        \\\"Funding\\\": \\\"https://opencollective.com/marshmallow\\\",\\n92:        \\\"Tidelift\\\": \\\"https://tidelift.com/subscription/pkg/pypi-marshmallow?utm_source=pypi-marshmallow&amp;utm_medium=pypi\\\",  # noqa\\n93:    },\\n94:)\\n\\n(Open file: /marshmallow-code__marshmallow/setup.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"The setup.py file contains a lot of useful information to install the package locally. In particular, I see there's a [dev] extras that installs all the dependencies needed for development. We can use this to install the package with all the necessary dependencies. Let's install the package locally with the [dev] extras.\\n```\\npip install -e .[dev]\\n```\",\n            \"thought\": \"The setup.py file contains a lot of useful information to install the package locally. In particular, I see there's a [dev] extras that installs all the dependencies needed for development. We can use this to install the package with all the necessary dependencies. Let's install the package locally with the [dev] extras.\\n\",\n            \"action\": \"pip install -e .[dev]\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"Obtaining file:///marshmallow-code__marshmallow\\n  Installing build dependencies: started\\n  Installing build dependencies: finished with status 'done'\\n  Checking if build backend supports build_editable: started\\n  Checking if build backend supports build_editable: finished with status 'done'\\n  Getting requirements to build editable: started\\n  Getting requirements to build editable: finished with status 'done'\\n  Preparing editable metadata (pyproject.toml): started\\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\\nRequirement already satisfied: pytest in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (8.1.1)\\nRequirement already satisfied: pytz in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (2024.1)\\nRequirement already satisfied: simplejson in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (3.19.2)\\nRequirement already satisfied: mypy==0.910 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (0.910)\\nRequirement already satisfied: flake8==4.0.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (4.0.1)\\nRequirement already satisfied: flake8-bugbear==21.9.2 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (21.9.2)\\nRequirement already satisfied: pre-commit~=2.4 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (2.21.0)\\nRequirement already satisfied: tox in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (4.14.2)\\nRequirement already satisfied: mccabe&lt;0.7.0,&gt;=0.6.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from flake8==4.0.1) (0.6.1)\\nRequirement already satisfied: pycodestyle&lt;2.9.0,&gt;=2.8.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from flake8==4.0.1) (2.8.0)\\nRequirement already satisfied: pyflakes&lt;2.5.0,&gt;=2.4.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from flake8==4.0.1) (2.4.0)\\nRequirement already satisfied: attrs&gt;=19.2.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from flake8-bugbear==21.9.2) (23.2.0)\\nRequirement already satisfied: typing-extensions&gt;=3.7.4 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from mypy==0.910) (4.10.0)\\nRequirement already satisfied: mypy-extensions&lt;0.5.0,&gt;=0.4.3 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from mypy==0.910) (0.4.4)\\nRequirement already satisfied: toml in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from mypy==0.910) (0.10.2)\\nRequirement already satisfied: cfgv&gt;=2.0.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pre-commit~=2.4) (3.4.0)\\nRequirement already satisfied: identify&gt;=1.0.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pre-commit~=2.4) (2.5.35)\\nRequirement already satisfied: nodeenv&gt;=0.11.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pre-commit~=2.4) (1.8.0)\\nRequirement already satisfied: pyyaml&gt;=5.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pre-commit~=2.4) (6.0.1)\\nRequirement already satisfied: virtualenv&gt;=20.10.0 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pre-commit~=2.4) (20.25.1)\\nRequirement already satisfied: iniconfig in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pytest) (2.0.0)\\nRequirement already satisfied: packaging in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pytest) (24.0)\\nRequirement already satisfied: pluggy&lt;2.0,&gt;=1.4 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pytest) (1.4.0)\\nRequirement already satisfied: exceptiongroup&gt;=1.0.0rc8 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pytest) (1.2.0)\\nRequirement already satisfied: tomli&gt;=1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from pytest) (2.0.1)\\nRequirement already satisfied: cachetools&gt;=5.3.2 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (5.3.3)\\nRequirement already satisfied: chardet&gt;=5.2 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (5.2.0)\\nRequirement already satisfied: colorama&gt;=0.4.6 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (0.4.6)\\nRequirement already satisfied: filelock&gt;=3.13.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (3.13.3)\\nRequirement already satisfied: platformdirs&gt;=4.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (4.2.0)\\nRequirement already satisfied: pyproject-api&gt;=1.6.1 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from tox) (1.6.1)\\nRequirement already satisfied: setuptools in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from nodeenv&gt;=0.11.1-&gt;pre-commit~=2.4) (68.2.2)\\nRequirement already satisfied: distlib&lt;1,&gt;=0.3.7 in /root/miniconda3/envs/marshmallow-code__marshmallow__3.13/lib/python3.9/site-packages (from virtualenv&gt;=20.10.0-&gt;pre-commit~=2.4) (0.3.8)\\nChecking if build backend supports build_editable: started\\nChecking if build backend supports build_editable: finished with status 'done'\\nBuilding wheels for collected packages: marshmallow\\n  Building editable for marshmallow (pyproject.toml): started\\n  Building editable for marshmallow (pyproject.toml): finished with status 'done'\\n  Created wheel for marshmallow: filename=marshmallow-3.13.0-0.editable-py3-none-any.whl size=4534 sha256=fcca61a41cd2783d4a5b8471ebc48cf886d36f6c66a29cc9b02761fc174a024d\\n  Stored in directory: /tmp/pip-ephem-wheel-cache-h335xxo8/wheels/4d/da/d4/e230bf0a3f16cad5a83d235ac24a34b55178ddda181cb64dae\\nSuccessfully built marshmallow\\nInstalling collected packages: marshmallow\\n  Attempting uninstall: marshmallow\\n    Found existing installation: marshmallow 3.13.0\\n    Uninstalling marshmallow-3.13.0:\\n      Successfully uninstalled marshmallow-3.13.0\\nSuccessfully installed marshmallow-3.13.0\\nWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\\n\\n(Open file: /marshmallow-code__marshmallow/setup.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"Looks like it installed successfully. Now that we have the package installed, we can start working on the issue.\\nLet's first start by reproducing the results of the issue. The issue includes some example code for reproduction, which we can use. We'll create a new file called `reproduce.py` and paste the example code into it.\\n```\\ncreate reproduce.py\\n```\",\n            \"thought\": \"Looks like it installed successfully. Now that we have the package installed, we can start working on the issue.\\nLet's first start by reproducing the results of the issue. The issue includes some example code for reproduction, which we can use. We'll create a new file called `reproduce.py` and paste the example code into it.\\n\",\n            \"action\": \"create reproduce.py\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"[File: /marshmallow-code__marshmallow/reproduce.py (1 lines total)]\\n1:\\n\\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"Now let's paste in the example code from the issue.\\n```\\nedit 1:1\\nfrom marshmallow.fields import TimeDelta\\nfrom datetime import timedelta\\n\\ntd_field = TimeDelta(precision=\\\"milliseconds\\\")\\n\\nobj = dict()\\nobj[\\\"td_field\\\"] = timedelta(milliseconds=345)\\n\\nprint(td_field.serialize(\\\"td_field\\\", obj))\\nend_of_edit\\n```\",\n            \"thought\": \"Now let's paste in the example code from the issue.\\n\",\n            \"action\": \"edit 1:1\\nfrom marshmallow.fields import TimeDelta\\nfrom datetime import timedelta\\n\\ntd_field = TimeDelta(precision=\\\"milliseconds\\\")\\n\\nobj = dict()\\nobj[\\\"td_field\\\"] = timedelta(milliseconds=345)\\n\\nprint(td_field.serialize(\\\"td_field\\\", obj))\\nend_of_edit\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"[File: /marshmallow-code__marshmallow/reproduce.py (9 lines total)]\\n1:from marshmallow.fields import TimeDelta\\n2:from datetime import timedelta\\n3:\\n4:td_field = TimeDelta(precision=\\\"milliseconds\\\")\\n5:\\n6:obj = dict()\\n7:obj[\\\"td_field\\\"] = timedelta(milliseconds=345)\\n8:\\n9:print(td_field.serialize(\\\"td_field\\\", obj))\\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\\n\\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"Now let's run the code to see if we see the same output as the issue.\\n```\\npython reproduce.py\\n```\",\n            \"thought\": \"Now let's run the code to see if we see the same output as the issue.\\n\",\n            \"action\": \"python reproduce.py\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"344\\n\\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"We are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py` file to see if there is a rounding issue. Let's open the `fields.py` file and navigate to line 1474 to see the relevant code. First we should find the `fields.py` file in the repository. It is likely to be in the `src/marshmallow` directory, but we should check to be sure.\\n```\\nls -F\\n```\",\n            \"thought\": \"We are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py` file to see if there is a rounding issue. Let's open the `fields.py` file and navigate to line 1474 to see the relevant code. First we should find the `fields.py` file in the repository. It is likely to be in the `src/marshmallow` directory, but we should check to be sure.\\n\",\n            \"action\": \"ls -F\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"AUTHORS.rst\\nCHANGELOG.rst\\nCODE_OF_CONDUCT.md\\nCONTRIBUTING.rst\\nLICENSE\\nMANIFEST.in\\nNOTICE\\nREADME.rst\\nRELEASING.md\\nazure-pipelines.yml\\ndocs/\\nexamples/\\nperformance/\\npyproject.toml\\nreproduce.py\\nsetup.cfg\\nsetup.py\\nsrc/\\ntests/\\ntox.ini\\n\\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"It looks like the `src` directory is present, which suggests that the `fields.py` file is likely to be in the `src` directory. Let's use find_file to see where it is.\\n```\\nfind_file \\\"fields.py\\\" src\\n```\",\n            \"thought\": \"It looks like the `src` directory is present, which suggests that the `fields.py` file is likely to be in the `src` directory. Let's use find_file to see where it is.\\n\",\n            \"action\": \"find_file \\\"fields.py\\\" src\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"Found 1 matches for \\\"fields.py\\\" in /marshmallow-code__marshmallow/src:\\n/marshmallow-code__marshmallow/src/marshmallow/fields.py\\n\\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"It looks like the `fields.py` file is present in the `./src/marshmallow/` directory. The issue also points to a specific URL with line number 1474. We should navigate to that line in fields.py to see the relevant code for the `TimeDelta` serialization.\\n```\\nopen src/marshmallow/fields.py 1474\\n```\",\n            \"thought\": \"It looks like the `fields.py` file is present in the `./src/marshmallow/` directory. The issue also points to a specific URL with line number 1474. We should navigate to that line in fields.py to see the relevant code for the `TimeDelta` serialization.\\n\",\n            \"action\": \"open src/marshmallow/fields.py 1474\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\\n(1458 more lines above)\\n1459:            self.WEEKS,\\n1460:        )\\n1461:\\n1462:        if precision not in units:\\n1463:            msg = 'The precision must be {} or \\\"{}\\\".'.format(\\n1464:                \\\", \\\".join([f'\\\"{each}\\\"' for each in units[:-1]]), units[-1]\\n1465:            )\\n1466:            raise ValueError(msg)\\n1467:\\n1468:        self.precision = precision\\n1469:        super().__init__(**kwargs)\\n1470:\\n1471:    def _serialize(self, value, attr, obj, **kwargs):\\n1472:        if value is None:\\n1473:            return None\\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\\n1475:        return int(value.total_seconds() / base_unit.total_seconds())\\n1476:\\n1477:    def _deserialize(self, value, attr, data, **kwargs):\\n1478:        try:\\n1479:            value = int(value)\\n1480:        except (TypeError, ValueError) as error:\\n1481:            raise self.make_error(\\\"invalid\\\") from error\\n1482:\\n1483:        kwargs = {self.precision: value}\\n1484:\\n1485:        try:\\n1486:            return dt.timedelta(**kwargs)\\n1487:        except OverflowError as error:\\n1488:            raise self.make_error(\\\"invalid\\\") from error\\n1489:\\n1490:\\n1491:class Mapping(Field):\\n1492:    \\\"\\\"\\\"An abstract class for objects with key-value pairs.\\n1493:\\n1494:    :param keys: A field class or instance for dict keys.\\n1495:    :param values: A field class or instance for dict values.\\n1496:    :param kwargs: The same keyword arguments that :class:`Field` receives.\\n1497:\\n1498:    .. note::\\n1499:        When the structure of nested data is not known, you may omit the\\n1500:        `keys` and `values` arguments to prevent content validation.\\n1501:\\n1502:    .. versionadded:: 3.0.0rc4\\n1503:    \\\"\\\"\\\"\\n1504:\\n1505:    mapping_type = dict\\n1506:\\n1507:    #: Default error messages.\\n1508:    default_error_messages = {\\\"invalid\\\": \\\"Not a valid mapping type.\\\"}\\n1509:\\n1510:    def __init__(\\n1511:        self,\\n1512:        keys: typing.Optional[typing.Union[Field, type]] = None,\\n1513:        values: typing.Optional[typing.Union[Field, type]] = None,\\n1514:        **kwargs,\\n1515:    ):\\n1516:        super().__init__(**kwargs)\\n1517:        if keys is None:\\n1518:            self.key_field = None\\n1519:        else:\\n1520:            try:\\n1521:                self.key_field = resolve_field_instance(keys)\\n1522:            except FieldInstanceResolutionError as error:\\n1523:                raise ValueError(\\n1524:                    '\\\"keys\\\" must be a subclass or instance of '\\n1525:                    \\\"marshmallow.base.FieldABC.\\\"\\n1526:                ) from error\\n1527:\\n1528:        if values is None:\\n1529:            self.value_field = None\\n1530:        else:\\n1531:            try:\\n1532:                self.value_field = resolve_field_instance(values)\\n1533:            except FieldInstanceResolutionError as error:\\n1534:                raise ValueError(\\n1535:                    '\\\"values\\\" must be a subclass or instance of '\\n1536:                    \\\"marshmallow.base.FieldABC.\\\"\\n1537:                ) from error\\n1538:            if isinstance(self.value_field, Nested):\\n1539:                self.only = self.value_field.only\\n1540:                self.exclude = self.value_field.exclude\\n1541:\\n1542:    def _bind_to_schema(self, field_name, schema):\\n1543:        super()._bind_to_schema(field_name, schema)\\n1544:        if self.value_field:\\n1545:            self.value_field = copy.deepcopy(self.value_field)\\n1546:            self.value_field._bind_to_schema(field_name, self)\\n1547:        if isinstance(self.value_field, Nested):\\n1548:            self.value_field.only = self.only\\n1549:            self.value_field.exclude = self.exclude\\n1550:        if self.key_field:\\n1551:            self.key_field = copy.deepcopy(self.key_field)\\n1552:            self.key_field._bind_to_schema(field_name, self)\\n1553:\\n1554:    def _serialize(self, value, attr, obj, **kwargs):\\n1555:        if value is None:\\n1556:            return None\\n1557:        if not self.value_field and not self.key_field:\\n1558:            return self.mapping_type(value)\\n(439 more lines below)\\n\\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"We are now looking at the relevant section of the `fields.py` file where the `TimeDelta` serialization occurs. The issue suggests that there is a rounding problem near line 1474. The current implementation uses integer division, which truncates the decimal part and can lead to incorrect rounding on line 1475.To fix this issue, we should ensure that the division results in a float, and then round the result to the nearest integer before converting it to an int. This should preserve the milliseconds precision as expected. Let's make the necessary edit to the code.\\n```\\nedit 1475:1475\\nreturn int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\nend_of_edit\\n```\",\n            \"thought\": \"We are now looking at the relevant section of the `fields.py` file where the `TimeDelta` serialization occurs. The issue suggests that there is a rounding problem near line 1474. The current implementation uses integer division, which truncates the decimal part and can lead to incorrect rounding on line 1475.To fix this issue, we should ensure that the division results in a float, and then round the result to the nearest integer before converting it to an int. This should preserve the milliseconds precision as expected. Let's make the necessary edit to the code.\\n\",\n            \"action\": \"edit 1475:1475\\nreturn int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\nend_of_edit\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"Your proposed edit has introduced new syntax error(s). Please understand the fixes and retry your edit commmand.\\n\\nERRORS:\\n- E999 IndentationError: unexpected indent\\n\\nThis is how your edit would have looked if applied\\n-------------------------------------------------\\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\\n(1468 more lines above)\\n1469:        super().__init__(**kwargs)\\n1470:\\n1471:    def _serialize(self, value, attr, obj, **kwargs):\\n1472:        if value is None:\\n1473:            return None\\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\\n1475:return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\n1476:\\n1477:    def _deserialize(self, value, attr, data, **kwargs):\\n1478:        try:\\n1479:            value = int(value)\\n(518 more lines below)\\n-------------------------------------------------\\n\\nThis is the original code before your edit\\n-------------------------------------------------\\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\\n(1469 more lines above)\\n1470:\\n1471:    def _serialize(self, value, attr, obj, **kwargs):\\n1472:        if value is None:\\n1473:            return None\\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\\n1475:        return int(value.total_seconds() / base_unit.total_seconds())\\n1476:\\n1477:    def _deserialize(self, value, attr, data, **kwargs):\\n1478:        try:\\n1479:            value = int(value)\\n1480:        except (TypeError, ValueError) as error:\\n(517 more lines below)\\n-------------------------------------------------\\nYour changes have NOT been applied. Please fix your edit command and try again.\\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\\n\\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"My edit command did not use the proper indentation, I will fix my syntax in this follow up edit command.\\n```\\nedit 1475:1475\\n        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\nend_of_edit\\n```\",\n            \"thought\": \"My edit command did not use the proper indentation, I will fix my syntax in this follow up edit command.\\n\",\n            \"action\": \"edit 1475:1475\\n        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\nend_of_edit\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\\n(1424 more lines above)\\n1425:\\n1426:    :param precision: Influences how the integer is interpreted during\\n1427:        (de)serialization. Must be 'days', 'seconds', 'microseconds',\\n1428:        'milliseconds', 'minutes', 'hours' or 'weeks'.\\n1429:    :param kwargs: The same keyword arguments that :class:`Field` receives.\\n1430:\\n1431:    .. versionchanged:: 2.0.0\\n1432:        Always serializes to an integer value to avoid rounding errors.\\n1433:        Add `precision` parameter.\\n1434:    \\\"\\\"\\\"\\n1435:\\n1436:    DAYS = \\\"days\\\"\\n1437:    SECONDS = \\\"seconds\\\"\\n1438:    MICROSECONDS = \\\"microseconds\\\"\\n1439:    MILLISECONDS = \\\"milliseconds\\\"\\n1440:    MINUTES = \\\"minutes\\\"\\n1441:    HOURS = \\\"hours\\\"\\n1442:    WEEKS = \\\"weeks\\\"\\n1443:\\n1444:    #: Default error messages.\\n1445:    default_error_messages = {\\n1446:        \\\"invalid\\\": \\\"Not a valid period of time.\\\",\\n1447:        \\\"format\\\": \\\"{input!r} cannot be formatted as a timedelta.\\\",\\n1448:    }\\n1449:\\n1450:    def __init__(self, precision: str = SECONDS, **kwargs):\\n1451:        precision = precision.lower()\\n1452:        units = (\\n1453:            self.DAYS,\\n1454:            self.SECONDS,\\n1455:            self.MICROSECONDS,\\n1456:            self.MILLISECONDS,\\n1457:            self.MINUTES,\\n1458:            self.HOURS,\\n1459:            self.WEEKS,\\n1460:        )\\n1461:\\n1462:        if precision not in units:\\n1463:            msg = 'The precision must be {} or \\\"{}\\\".'.format(\\n1464:                \\\", \\\".join([f'\\\"{each}\\\"' for each in units[:-1]]), units[-1]\\n1465:            )\\n1466:            raise ValueError(msg)\\n1467:\\n1468:        self.precision = precision\\n1469:        super().__init__(**kwargs)\\n1470:\\n1471:    def _serialize(self, value, attr, obj, **kwargs):\\n1472:        if value is None:\\n1473:            return None\\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\\n1475:        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\n1476:\\n1477:    def _deserialize(self, value, attr, data, **kwargs):\\n1478:        try:\\n1479:            value = int(value)\\n1480:        except (TypeError, ValueError) as error:\\n1481:            raise self.make_error(\\\"invalid\\\") from error\\n1482:\\n1483:        kwargs = {self.precision: value}\\n1484:\\n1485:        try:\\n1486:            return dt.timedelta(**kwargs)\\n1487:        except OverflowError as error:\\n1488:            raise self.make_error(\\\"invalid\\\") from error\\n1489:\\n1490:\\n1491:class Mapping(Field):\\n1492:    \\\"\\\"\\\"An abstract class for objects with key-value pairs.\\n1493:\\n1494:    :param keys: A field class or instance for dict keys.\\n1495:    :param values: A field class or instance for dict values.\\n1496:    :param kwargs: The same keyword arguments that :class:`Field` receives.\\n1497:\\n1498:    .. note::\\n1499:        When the structure of nested data is not known, you may omit the\\n1500:        `keys` and `values` arguments to prevent content validation.\\n1501:\\n1502:    .. versionadded:: 3.0.0rc4\\n1503:    \\\"\\\"\\\"\\n1504:\\n1505:    mapping_type = dict\\n1506:\\n1507:    #: Default error messages.\\n1508:    default_error_messages = {\\\"invalid\\\": \\\"Not a valid mapping type.\\\"}\\n1509:\\n1510:    def __init__(\\n1511:        self,\\n1512:        keys: typing.Optional[typing.Union[Field, type]] = None,\\n1513:        values: typing.Optional[typing.Union[Field, type]] = None,\\n1514:        **kwargs,\\n1515:    ):\\n1516:        super().__init__(**kwargs)\\n1517:        if keys is None:\\n1518:            self.key_field = None\\n1519:        else:\\n1520:            try:\\n1521:                self.key_field = resolve_field_instance(keys)\\n1522:            except FieldInstanceResolutionError as error:\\n1523:                raise ValueError(\\n1524:                    '\\\"keys\\\" must be a subclass or instance of '\\n(473 more lines below)\\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\\n\\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"The code has been updated to use the `round` function, which should fix the rounding issue. Before submitting the changes, it would be prudent to run the reproduce.py code again to ensure that this change has the desired effect. I see that \\\"Current directory\\\" is still `/marshmallow-code__marshmallow`, so we can just run `reproduce.py` directly.\\n```\\npython reproduce.py\\n```\",\n            \"thought\": \"The code has been updated to use the `round` function, which should fix the rounding issue. Before submitting the changes, it would be prudent to run the reproduce.py code again to ensure that this change has the desired effect. I see that \\\"Current directory\\\" is still `/marshmallow-code__marshmallow`, so we can just run `reproduce.py` directly.\\n\",\n            \"action\": \"python reproduce.py\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"345\\n\\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"The output has changed from 344 to 345, which suggests that the rounding issue has been fixed. Let's remove the reproduce.py file since it is no longer needed.\\n```\\nrm reproduce.py\\n```\",\n            \"thought\": \"The output has changed from 344 to 345, which suggests that the rounding issue has been fixed. Let's remove the reproduce.py file since it is no longer needed.\\n\",\n            \"action\": \"rm reproduce.py\\n\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"observation\",\n            \"role\": \"user\",\n            \"content\": \"Your command ran successfully and did not produce any output.\\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\\n(Current directory: /marshmallow-code__marshmallow)\\nbash-$\",\n            \"agent\": \"primary\"\n        },\n        {\n            \"message_type\": \"action\",\n            \"role\": \"assistant\",\n            \"content\": \"rm doesn't have any output when it deletes successfully, so that must have worked. Now that we have fixed the issue, we should submit our changes to the code base. Let's submit the changes using the `submit` command.\\n```\\nsubmit\\n```\",\n            \"thought\": \"rm doesn't have any output when it deletes successfully, so that must have worked. Now that we have fixed the issue, we should submit our changes to the code base. Let's submit the changes using the `submit` command.\\n\",\n            \"action\": \"submit\\n\",\n            \"agent\": \"primary\"\n        }\n    ],\n    \"info\": {\n        \"exit_status\": \"submitted\",\n        \"submission\": \"\\ndiff --git a/src/marshmallow/fields.py b/src/marshmallow/fields.py\\nindex ad388c7..20da768 100644\\n--- a/src/marshmallow/fields.py\\n+++ b/src/marshmallow/fields.py\\n@@ -1472,7 +1472,7 @@ class TimeDelta(Field):\\n         if value is None:\\n             return None\\n         base_unit = dt.timedelta(**{self.precision: 1})\\n-        return int(value.total_seconds() / base_unit.total_seconds())\\n+        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\\n \\n     def _deserialize(self, value, attr, data, **kwargs):\\n         try:\\n\",\n        \"model_stats\": {\n            \"total_cost\": 0,\n            \"instance_cost\": 0,\n            \"tokens_sent\": 0,\n            \"tokens_received\": 0,\n            \"api_calls\": 0\n        }\n    }\n}\n</code></pre> <p>Viewing trajectories</p> <p>We provide a trajectory viewer for an easy viewing of trajectories. If you want to view the json, we recommend jsoneditoronline, because of the way it handles long lines.</p> <p>Trajectories can also be turned into custom demonstrations for SWE-agent (more information).</p>"},{"location":"usage/trajectories/#other-output-files","title":"Other output files","text":"<p>Together with the trajectory, SWE-agent will also generate the following files per instance:</p> <ul> <li><code>config.yaml</code>: A yaml file containing the configuration used for the experiment. You can directly repeat the run of this   exact instance by running <code>sweagent run --config config.yaml</code>.</li> <li><code>*.log</code>: Log files at different levels</li> </ul> <p>At a high level, the experiments folder is organized in the following manner:</p> <pre><code>trajectories:\n    user 1:\n        experiment 1:\n            run_batch.config.yaml\n            preds.json\n            run_batch.debug.log\n            run_batch.info.log\n            run_batch.warning.log\n            run_batch_exit_statuses.yaml\n            instance_1:\n                instance_1.traj\n                instance_1.config.yaml\n                instance_1.debug.log\n                instance_1.info.log\n                instance_1.warning.log\n            instance 2:\n                ...\n        experiment 2:\n            ...\n    user 2:\n        ...\n</code></pre> <p>Where every experiment follows the pattern <code>trajectories/&lt;user name&gt;/&lt;experiment name&gt;</code>. The <code>&lt;user name&gt;</code> is automatically inferred from your system, and the <code>experiment name</code> is inferred from the model names and other settings to the run command.</p> <p>Here are a few more files that are generated with <code>sweagent run-batch</code>:</p> <ul> <li><code>run_batch.config.yaml</code>: A yaml file containing the configuration used for the experiment. You can directly repeat the run of this   exact experiment by running <code>sweagent run-batch --config run_batch.config.yaml</code>.</li> <li><code>preds.json</code>: All predictions (i.e., patches produced by the agent) from all instances of the experiment.   If this file goes out of date, you can regenerate it by running <code>sweagent merge-preds</code>.</li> <li><code>run_batch.*.log</code>: Log files at different levels.</li> <li><code>run_batch_exit_statuses.yaml</code>: A yaml file containing the exit statuses of all instances in the experiment (for this run of <code>sweagent run-batch</code>).</li> </ul> <p>Tip</p> <ul> <li>Evaluation is not completed by <code>sweagent run-batch</code>, it is a separate step (see batch mode)</li> <li><code>preds.json</code> can be referenced directly into SWE-bench to run evaluation</li> <li>Trajectories can be turned into custom demonstrations for SWE-agent (more information).</li> </ul> <ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"usage/whats_next/","title":"What's next?","text":"<p>Congratulations, this is currently the last tutorial!</p> <p>Here are some ideas for what to check out next: There are two more sections on this website:</p> <ul> <li>User guides: This covers selected topics in more detail, for example<ul> <li>What are all the different subcommands of <code>sweagent</code>?</li> <li>How to configure swe-agent?</li> <li>What's the main architecture of SWE-agent?</li> </ul> </li> <li>API reference for complete lists of all configuration options.</li> </ul>"}]}